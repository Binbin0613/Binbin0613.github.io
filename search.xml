<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>(C++进阶06)-类-inline-const-mutable-this-static</title>
      <link href="/2023/081016157.html"/>
      <url>/2023/081016157.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="C-进阶07：类-inline-const-mutable-this-static"><a href="#C-进阶07：类-inline-const-mutable-this-static" class="headerlink" title="C++进阶07：类-inline-const-mutable-this-static"></a>C++进阶07：类-inline-const-mutable-this-static</h2><p><a href>更多内容</a></p></font>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C++进阶06)-类-初始化-构造函数-对象</title>
      <link href="/2023/081016156.html"/>
      <url>/2023/081016156.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="C-进阶06：类-初始化-构造函数-对象"><a href="#C-进阶06：类-初始化-构造函数-对象" class="headerlink" title="C++进阶06：类-初始化-构造函数-对象"></a>C++进阶06：类-初始化-构造函数-对象</h2><p>// 仔细查阅资料</p><p>观看视频：</p><p>11、类成员函数，对象拷贝，私有成员<br>12、类构造函数 explicit 初始化列表</p><p><a href>更多内容</a></p></font>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binbin0613-毕业那天</title>
      <link href="/2023/081016155.html"/>
      <url>/2023/081016155.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="毕业那天"><a href="#毕业那天" class="headerlink" title="毕业那天"></a><strong>毕业那天</strong></h2><p>Bin，<a href="http://www.xhu.edu.cn/">XHU</a>软件工程本，<a href="https://sias.uestc.edu.cn/">UESTC</a>电子信息专硕，21岁大四在读身高170cm体重不说每天8点到23点待实验室周末无休还卡在毕设的码农一位！</p><p><img src="/2023/081016155/1.JPG" alt></p><p><img src="/2023/081016155/1.JPG" alt><br><img src="/2023/081016155/2.JPG" alt><br><img src="/2023/081016155/3.JPG" alt><br><img src="/2023/081016155/4.JPG" alt><br><img src="/2023/081016155/5.JPG" alt><br><img src="/2023/081016155/6.JPG" alt><br><img src="/2023/081016155/7.JPG" alt><br><img src="/2023/081016155/8.JPG" alt><br><img src="/2023/081016155/9.JPG" alt><br><img src="/2023/081016155/10.JPG" alt><br><img src="/2023/081016155/11.JPG" alt><br><img src="/2023/081016155/12.JPG" alt><br><img src="/2023/081016155/13.JPG" alt><br><img src="/2023/081016155/14.JPG" alt><br><img src="/2023/081016155/15.JPG" alt><br><img src="/2023/081016155/16.JPG" alt><br><img src="/2023/081016155/17.JPG" alt><br><img src="/2023/081016155/18.JPG" alt><br><img src="/2023/081016155/19.JPG" alt><br><img src="/2023/081016155/20.JPG" alt><br><img src="/2023/081016155/21.JPG" alt><br><img src="/2023/081016155/22.JPG" alt><br><img src="/2023/081016155/23.JPG" alt><br><img src="/2023/081016155/24.JPG" alt><br><img src="/2023/081016155/25.JPG" alt></p><h3 id="接下来就是本科这边了"><a href="#接下来就是本科这边了" class="headerlink" title="接下来就是本科这边了"></a>接下来就是本科这边了</h3><p><img src="/2023/081016155/xhu.JPG" alt></p><p><img src="/2023/081016155/xhu2.JPG" alt><br><img src="/2023/081016155/xhu3.JPG" alt><br><img src="/2023/081016155/xhu4.JPG" alt><br><img src="/2023/081016155/xhu5.JPG" alt><br><img src="/2023/081016155/xhu6.JPG" alt><br><img src="/2023/081016155/xhu7.JPG" alt><br><img src="/2023/081016155/xhu8.JPG" alt><br><img src="/2023/081016155/xhu9.JPG" alt><br><img src="/2023/081016155/xhu10.JPG" alt><br><img src="/2023/081016155/xhu11.JPG" alt><br><img src="/2023/081016155/xhu12.JPG" alt><br><img src="/2023/081016155/xhu13.JPG" alt><br><img src="/2023/081016155/xhu14.JPG" alt><br><img src="/2023/081016155/xhu15.JPG" alt><br><img src="/2023/081016155/xhu16.JPG" alt><br><img src="/2023/081016155/xhu17.JPG" alt><br><img src="/2023/081016155/xhu18.JPG" alt><br><img src="/2023/081016155/xhu19.JPG" alt><br><img src="/2023/081016155/xhu20.JPG" alt><br><img src="/2023/081016155/xhu21.JPG" alt><br><img src="/2023/081016155/xhu22.JPG" alt><br><img src="/2023/081016155/xhu23.JPG" alt><br><img src="/2023/081016155/xhu24.JPG" alt><br><img src="/2023/081016155/xhu25.JPG" alt><br><img src="/2023/081016155/xhu26.JPG" alt><br><img src="/2023/081016155/xhu27.JPG" alt><br><img src="/2023/081016155/xhu28.JPG" alt><br><img src="/2023/081016155/xhu29.JPG" alt><br><img src="/2023/081016155/xhu30.JPG" alt><br><img src="/2023/081016155/xhu31.JPG" alt><br><img src="/2023/081016155/xhu32.JPG" alt><br><img src="/2023/081016155/xhu33.JPG" alt><br><img src="/2023/081016155/xhu34.JPG" alt><br><img src="/2023/081016155/xhu35.JPG" alt><br><img src="/2023/081016155/xhu36.JPG" alt><br><img src="/2023/081016155/xhu37.JPG" alt><br><img src="/2023/081016155/xhu38.JPG" alt><br><img src="/2023/081016155/xhu39.JPG" alt><br><img src="/2023/081016155/xhu40.JPG" alt><br><img src="/2023/081016155/xhu41.JPG" alt><br><img src="/2023/081016155/xhu42.JPG" alt><br><img src="/2023/081016155/xhu43.JPG" alt><br><img src="/2023/081016155/xhu44.JPG" alt></p><p>还有王被我打的视频</p><!--<iframe height=498 width=510 src="/[Binbin0613] - 毕业那天/wangchenquanbeiwodale.mp4">--><p>最后是我本科毕业设计的致谢：</p><blockquote><p>​                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这个走向人生新的阶段的路口，四年的本科生涯转瞬即逝，在此临别之际，借此机会向所有支持和帮助过我的人表达最深切的谢意。</p><p>​                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，我要感谢我的家人，还记得19年<strong>父母</strong>把我送进西华的样子，满眼都是对我的满怀期待，但我也从中看到了送儿千里的不舍和怅然。父亲曾不止一次的告诉我：他们永远是我最强的后盾。感谢他们给了我肌肤之躯，给了我现在的一切。</p><p>​                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其次，衷心感谢我的指导老师<strong>孔教授</strong>，来到孔教授实验室的三年多时间里，给我提供了一个参与学术研究和探索的机会和环境，传授给我丰富的学术经验和专业知识，还记得孔教授给我指导论文时，其严谨的科学态度，细致入微的指导过程，精益求精的思考方式让我受益匪浅。同时感谢在指导本论文时所付出了辛勤的劳动。</p><p>​                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;感谢和我在6A531一起奋斗的<strong>周明胜</strong>，二年级向孔老师介绍我加入实验室，带我完成科研项目的研究工作，参加各式的科研竞赛，每一个加班的夜晚都值得被铭记。感谢我的室友<strong>严雨萌</strong>，<strong>李庆</strong>和<strong>王晨权</strong>，四年时间的朝夕相处，让我们的兄弟感情变得更加深厚。还有一起通宵熬夜看世界杯的<strong>浩子哥</strong>，<strong>弛哥</strong>，<strong>陈杰鑫大师兄</strong>，<strong>冯雷师哥</strong>和<strong>长青师兄</strong>，我们一起见证了阿根廷队从小组赛出线，到淘汰澳大利亚，荷兰，克罗地亚以及强大的法国队，一起见证了梅西捧起大力神杯圆梦卡塔尔的精彩瞬间。在这里我想回答贺炜诗人的问题，“4年后看球的我们，还会在坐一起看比赛，四年后看球的我们，许过的愿望也一定会实现”。还有实验室给予我们欢乐的<strong>范蒙蒙师姐</strong>，给我论文提供指导的<strong>王茜师姐</strong>，一起减肥增肌的<strong>乐哥</strong>，<strong>刘哥</strong>和<strong>南哥</strong>。</p><p>​                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后，我想谢谢自己，四年前走进西华，没有就此放松对自己的要求，而是选择用两年的周末修完了第二学位经济学；而是选择骑行完成了数10次的环城绿道和成都三环，拜了都江堰的水，问了青城山的道；而是选择用研究生为我的学生生涯添加了续章。</p><p>将军不下马，我们各自奔前程。</p></blockquote></font>]]></content>
      
      
      <categories>
          
          <category> 博客介绍 </category>
          
          <category> 生活记录 </category>
          
          <category> 日常照片 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binbin0613 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C++进阶05)-迭代器</title>
      <link href="/2023/081016154.html"/>
      <url>/2023/081016154.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="C-进阶05：迭代器"><a href="#C-进阶05：迭代器" class="headerlink" title="C++进阶05：迭代器"></a>C++进阶05：迭代器</h2><p>需要仔细的阅读代码的写法：</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;struct student &#123;int number;&#125;;struct conf &#123;char itemname[40];char itemcontent[40];&#125;;&#x2F;&#x2F; 现在的需求是： 我给定一个配置文件名和配置项名称，你返回这个配置项的内容char* getInfo(vector&lt;conf*&gt; &amp;conflist, const char* tempItem) &#123;for (auto item &#x3D; conflist.begin(); item !&#x3D; conflist.end(); item++) &#123;if (_stricmp((*item)-&gt;itemname, tempItem) &#x3D;&#x3D; 0) &#123;return (*item)-&gt;itemcontent;&#125;&#125;return nullptr;&#125;int main() &#123;&#x2F;&#x2F; 一、迭代器简介&#x2F;&#x2F; 迭代器是一种遍历容器内元素的 数据类型，这种数据类型有点像指针，我们直接理解为迭代器用来指向容器中的某个元素&#x2F;&#x2F; string vector []: 实际上很少用到[]，更加常用的方式是迭代器，也更加通用&#x2F;&#x2F; 通过迭代器可以遍历读取容器中的元素值，也可以修改迭代器所指向的元素值&#x2F;&#x2F; 二、容器的迭代器类型vector&lt;int&gt; a &#x3D; &#123; 1,2,3 &#125;;vector&lt;int&gt;::iterator aiter;&#x2F;&#x2F; 创建了一个迭代器&#x2F;&#x2F; 在理解的时候，可以将vector&lt;int&gt;::iterator整体看做一个类型，这种类型专门应有于迭代器&#x2F;&#x2F; 三、迭代器begin()&#x2F;end()操作，反向迭代器rbegin()&#x2F;rend()操作&#x2F;&#x2F; begin()&#x2F;end() 用来返回迭代器类型aiter &#x3D; a.begin();&#x2F;&#x2F; 如果容器a中有元素，begin返回的是迭代器，指向容器中的第一个元素&#x2F;&#x2F; 相当于 aiter指向了 a[0]aiter &#x3D; a.end();&#x2F;&#x2F; 指向的不是容器的末端元素，而是末端元素的后边一个元素&#x2F;&#x2F; 如果容器元素为空，则begin()和end()返回的迭代器相同&#x2F;&#x2F; 可以用来判断容器是否为空vector&lt;int&gt; a2;vector&lt;int&gt;::iterator a2beginIter &#x3D; a2.begin();vector&lt;int&gt;::iterator a2endIter &#x3D; a2.end();if (a2beginIter &#x3D;&#x3D; a2endIter) &#123;cout &lt;&lt; &quot;a2容器为空&quot; &lt;&lt; endl; &#x2F;&#x2F; 输出：a2容器为空&#125;&#x2F;&#x2F; 正向迭代器 遍历容器的所有元素:记忆vector&lt;int&gt; a3 &#x3D; &#123; 1,2,3,4,5 &#125;;for (vector&lt;int&gt;::iterator iter &#x3D; a3.begin(); iter !&#x3D; a3.end(); iter++) &#123;cout &lt;&lt; *iter &lt;&lt; endl;&#125;&#x2F;&#x2F; 反向迭代器： 从后往前遍历一个容器&#x2F;&#x2F; rbegin(): 返回一个反向迭代器，指向容器的最后一个元素---&gt;作为反向迭代器的第一个元素&#x2F;&#x2F; rend(): 返回一个反向迭代器，指向容器的第一个元素的下一个位置 ---&gt;作为反向迭代器的最后一个元素的下一个位置for (vector&lt;int&gt;::reverse_iterator riter &#x3D; a3.rbegin(); riter !&#x3D; a3.rend(); riter++) &#123;cout &lt;&lt; *riter &lt;&lt; endl;&#125;&#x2F;&#x2F; 四、迭代器运算符&#x2F;&#x2F; *iter :返回的是iter所指向元素的引用，必须保证迭代器所指向的有效的容器元素&#x2F;&#x2F; 不能指向end()，因为end()是末端元素的下一个，是不存在的元素&#x2F;&#x2F; 向容器中添加结构体变量student Bin;Bin.number &#x3D; 100;vector&lt;student&gt; sList;sList.push_back(Bin);vector&lt;student&gt;::iterator sIter &#x3D; sList.begin();&#x2F;&#x2F; 一定要先往容器中添加元素，再创建itercout &lt;&lt; (*sIter).number &lt;&lt; endl;cout &lt;&lt; sIter-&gt;number &lt;&lt; endl;&#x2F;&#x2F; 五、const_iterator迭代器&#x2F;&#x2F; 表示该迭代器所指向的元素不能改变，但是迭代器可以改变指向vector&lt;int&gt; a4 &#x3D; &#123; 1,2,3,4,5 &#125;;for (vector&lt;int&gt;::const_iterator iter &#x3D; a4.begin(); iter !&#x3D; a4.end(); iter++) &#123;&#x2F;&#x2F;*iter &#x3D; 1;&#x2F;&#x2F; 这里不允许修改内容cout &lt;&lt; *iter &lt;&lt; endl;&#125;&#x2F;&#x2F; cbegin()和cend() 两种表示方式&#x2F;&#x2F; C++11所引入的，所返回的是常量的迭代器，常量迭代器不允许修改vector&lt;int&gt; a5 &#x3D; &#123; 1,2,3,4,5 &#125;;for (auto iter &#x3D; a5.cbegin(); iter !&#x3D; a5.cend(); iter++) &#123;&#x2F;&#x2F;*iter &#x3D; 1;&#x2F;&#x2F; 这里不允许修改常量的内容cout &lt;&lt; *iter &lt;&lt; endl;&#125;&#x2F;&#x2F; 六、迭代器失效问题&#x2F;&#x2F; 在进行范围for语句，或者使用迭代器循环遍历容器时，不要在遍历过程中，增加或删除容器中的元素vector&lt;int&gt; a6 &#x3D; &#123; 1,2,3,4,5 &#125;;for (vector&lt;int&gt;::iterator iter &#x3D; a6.begin(); iter !&#x3D; a6.end(); iter++) &#123;&#x2F;&#x2F;a6.push_back(6);&#x2F;&#x2F; 不能添加此语句，会导致该迭代器的失效&#x2F;&#x2F; 如果说一定要在遍历的过程中，向元素内添加元素，则在后面加上breakif (*iter &#x3D;&#x3D; 3) &#123;&#x2F;&#x2F;a6.push_back(6);  &#x2F;&#x2F; 这里是往容器的末尾加上元素6： 如果有元素等3，则往末尾加元素6 即1,2,3,4,5,6a6.insert(iter, 6);&#x2F;&#x2F; 这里表示往容器的第iter个位置上添加元素6，就是元素3的位置，即：1,2,6,3,4,5break;&#125;&#125;for (vector&lt;int&gt;::iterator iter &#x3D; a6.begin(); iter !&#x3D; a6.end(); iter++) &#123;cout &lt;&lt; *iter &lt;&lt; endl;&#125;&#x2F;&#x2F; erase()函数： 移出iter位置上的元素，返回下一个元素的位置&#x2F;&#x2F; 不断的释放容器中的元素值vector&lt;int&gt; a7 &#x3D; &#123; 1,2,3,4,5 &#125;;vector&lt;int&gt;::iterator iter &#x3D; a7.begin();vector&lt;int&gt;::iterator iend &#x3D; a7.end();&#x2F;&#x2F; 注意： 这里不能使用a7.end() 因为在遍历的过程中，容器内部的end在不断的发生变化，使用iend会导致程序崩溃&#x2F;&#x2F;while (iter !&#x3D; iend) &#123;&#x2F;&#x2F; 程序崩溃while (iter !&#x3D; a7.end()) &#123;&#x2F;&#x2F; 在进行容器变化的时候，需要注意iter &#x3D; a7.erase(iter);&#x2F;&#x2F; 移出iter上的元素&#125;&#x2F;&#x2F; 七、范例演示&#x2F;&#x2F; 1、使用迭代器遍历string内的内容string str &#x3D; &quot;I Love China&quot;;for (auto iter &#x3D; str.begin(); iter !&#x3D; str.end(); iter++) &#123;&#x2F;&#x2F; 可以直接使用auto表示类型*iter &#x3D; toupper(*iter);&#125;cout &lt;&lt; str &lt;&lt; endl;&#x2F;&#x2F; vector容器常用操作与内存释放&#x2F;&#x2F; 设计程序：&#x2F;&#x2F; 配置文件如下：&#x2F;&#x2F; ServerName &#x3D; 1区&#x2F;&#x2F; 表示服务器名称&#x2F;&#x2F; ServerID &#x3D; 10000&#x2F;&#x2F; 表示服务器IDconf* pconf1 &#x3D; new conf;strcpy_s(pconf1-&gt;itemname, sizeof(pconf1-&gt;itemname), &quot;ServerName&quot;);strcpy_s(pconf1-&gt;itemcontent, sizeof(pconf1-&gt;itemcontent), &quot;1区&quot;);conf* pconf2 &#x3D; new conf;strcpy_s(pconf2-&gt;itemname, sizeof(pconf2-&gt;itemname), &quot;ServerID&quot;);strcpy_s(pconf2-&gt;itemcontent, sizeof(pconf2-&gt;itemcontent), &quot;10000&quot;);vector&lt;conf*&gt; conflist;&#x2F;&#x2F; 容器当中的是指针类型&#x2F;&#x2F; 表示容器中第一个元素，指向的是conf1的地址，第二个元素指向conf2的地址conflist.push_back(pconf1); &#x2F;&#x2F;[0]conflist.push_back(pconf2);&#x2F;&#x2F;[1]&#x2F;&#x2F; 如果对conf1中的元素进行更改，容器中的元素的内容也会更改，原因是容器存储的是指向conf1的指针&#x2F;&#x2F; 查询配置项当中的内容char *tempItemContent &#x3D; getInfo(conflist,&quot;ServerName&quot;);if (tempItemContent !&#x3D; nullptr) &#123;cout &lt;&lt; tempItemContent &lt;&lt; endl;&#125;&#x2F;&#x2F; 我们需要释放内存，否则会导致内存的泄漏std::vector&lt;conf*&gt;::iterator pos;for (pos &#x3D; conflist.begin(); pos !&#x3D; conflist.end(); pos++) &#123;delete (*pos);&#125;conflist.clear(); &#x2F;&#x2F; 要不要都可以,如果不写这一句，其实conflist本身就已经是没有明确的指向了return 0;&#125;</code></pre><h3 id="一、迭代器简介"><a href="#一、迭代器简介" class="headerlink" title="一、迭代器简介"></a>一、迭代器简介</h3><p>迭代器是一种遍历容器内元素的 数据类型，这种数据类型有点像指针，我们直接理解为迭代器用来指向容器中的某个元素</p><p>string vector []: 实际上很少用到[]，更加常用的方式是迭代器，也更加通用</p><h3 id="二、迭代器begin-end-，rbegin-rend"><a href="#二、迭代器begin-end-，rbegin-rend" class="headerlink" title="二、迭代器begin()/end()，rbegin()/rend()"></a>二、迭代器begin()/end()，rbegin()/rend()</h3><p>begin()/end() 用来返回迭代器类型</p><pre class="language-c++" data-language="c++"><code class="language-c++">aiter &#x3D; a.begin();&#x2F;&#x2F; 如果容器a中有元素，begin返回的是迭代器，指向容器中的第一个元素&#x2F;&#x2F; 相当于 aiter指向了 a[0]aiter &#x3D; a.end();&#x2F;&#x2F; 指向的不是容器的末端元素，而是末端元素的后边一个元素</code></pre><p>如果容器元素为空，则begin()和end()返回的迭代器相同<br>可以用来判断容器是否为空</p><pre class="language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; a2;vector&lt;int&gt;::iterator a2beginIter &#x3D; a2.begin();vector&lt;int&gt;::iterator a2endIter &#x3D; a2.end();if (a2beginIter &#x3D;&#x3D; a2endIter) &#123;cout &lt;&lt; &quot;a2容器为空&quot; &lt;&lt; endl; &#x2F;&#x2F; 输出：a2容器为空&#125;</code></pre><p>正向迭代器 遍历容器的所有元素:记忆</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 正向迭代器 iterator 遍历容器的所有元素:记忆vector&lt;int&gt; a3 &#x3D; &#123; 1,2,3,4,5 &#125;;for (vector&lt;int&gt;::iterator iter &#x3D; a3.begin(); iter !&#x3D; a3.end(); iter++) &#123;cout &lt;&lt; *iter &lt;&lt; endl;&#125;</code></pre><p>反向迭代器： 从后往前遍历一个容器</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 反向迭代器： 从后往前遍历一个容器: reverse_iterator&#x2F;&#x2F; rbegin(): 返回一个反向迭代器，指向容器的最后一个元素---&gt;作为反向迭代器的第一个元素&#x2F;&#x2F; rend(): 返回一个反向迭代器，指向容器的第一个元素的下一个位置 ---&gt;作为反向迭代器的最后一个元素的下一个位置for (vector&lt;int&gt;::reverse_iterator riter &#x3D; a3.rbegin(); riter !&#x3D; a3.rend(); riter++) &#123;cout &lt;&lt; *riter &lt;&lt; endl;&#125;</code></pre><p><img src="/2023/081016154/%E8%BF%AD%E4%BB%A3%E5%99%A8beginend.png" alt></p><p>图：迭代器begin()/end()操作，反向迭代器rbegin()/rend()操作</p><h3 id="三、向容器中添加结构体变量"><a href="#三、向容器中添加结构体变量" class="headerlink" title="三、向容器中添加结构体变量"></a>三、向容器中添加结构体变量</h3><pre class="language-c++" data-language="c++"><code class="language-c++">student Bin;Bin.number &#x3D; 100;vector&lt;student&gt; sList;sList.push_back(Bin);vector&lt;student&gt;::iterator sIter &#x3D; sList.begin();&#x2F;&#x2F; 一定要先往容器中添加元素，再创建itercout &lt;&lt; (*sIter).number &lt;&lt; endl;cout &lt;&lt; sIter-&gt;number &lt;&lt; endl;</code></pre><h3 id="四、const-iterator迭代器"><a href="#四、const-iterator迭代器" class="headerlink" title="四、const_iterator迭代器"></a>四、const_iterator迭代器</h3><p>表示该迭代器所指向的元素不能改变，但是迭代器可以改变指向</p><pre class="language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; a4 &#x3D; &#123; 1,2,3,4,5 &#125;;for (vector&lt;int&gt;::const_iterator iter &#x3D; a4.begin(); iter !&#x3D; a4.end(); iter++) &#123;&#x2F;&#x2F;*iter &#x3D; 1;&#x2F;&#x2F; 这里不允许修改内容cout &lt;&lt; *iter &lt;&lt; endl;&#125;</code></pre><p>cbegin()和cend() 两种表示方式</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; C++11所引入的，所返回的是常量的迭代器，常量迭代器不允许修改    vector&lt;int&gt; a5 &#x3D; &#123; 1,2,3,4,5 &#125;;    for (auto iter &#x3D; a5.cbegin(); iter !&#x3D; a5.cend(); iter++) &#123;    &#x2F;&#x2F;*iter &#x3D; 1;&#x2F;&#x2F; 这里不允许修改常量的内容    cout &lt;&lt; *iter &lt;&lt; endl;&#125;</code></pre><h3 id="五、迭代器失效问题"><a href="#五、迭代器失效问题" class="headerlink" title="五、迭代器失效问题"></a>五、迭代器失效问题</h3><p>在进行范围for语句，或者使用迭代器循环遍历容器时，不要在遍历过程中，增加或删除容器中的元素</p><pre class="language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; a6 &#x3D; &#123; 1,2,3,4,5 &#125;;for (vector&lt;int&gt;::iterator iter &#x3D; a6.begin(); iter !&#x3D; a6.end(); iter++) &#123;    &#x2F;&#x2F;a6.push_back(6);&#x2F;&#x2F; 不能添加此语句，会导致该迭代器的失效    &#x2F;&#x2F; 如果说一定要在遍历的过程中，向元素内添加元素，则在后面加上break    if (*iter &#x3D;&#x3D; 3) &#123;        &#x2F;&#x2F;a6.push_back(6);  &#x2F;&#x2F; 这里是往容器的末尾加上元素6： 如果有元素等3，则往末尾加元素6 即1,2,3,4,5,6        a6.insert(iter, 6);&#x2F;&#x2F; 这里表示往容器的第iter个位置上添加元素6，就是元素3的位置，即：1,2,6,3,4,5        break;    &#125;&#125;for (vector&lt;int&gt;::iterator iter &#x3D; a6.begin(); iter !&#x3D; a6.end(); iter++) &#123;cout &lt;&lt; *iter &lt;&lt; endl;&#125;</code></pre><p>​    ersse()函数： 移出iter位置上的元素，返回下一个元素的位置</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 不断的释放容器中的元素值vector&lt;int&gt; a7 &#x3D; &#123; 1,2,3,4,5 &#125;;vector&lt;int&gt;::iterator iter &#x3D; a7.begin();vector&lt;int&gt;::iterator iend &#x3D; a7.end();&#x2F;&#x2F; 注意： 这里不能使用a7.end() 因为在遍历的过程中，容器内部的end在不断的发生变化，使用iend会导致程序崩溃&#x2F;&#x2F;while (iter !&#x3D; iend) &#123;&#x2F;&#x2F; 程序崩溃while (iter !&#x3D; a7.end()) &#123;&#x2F;&#x2F; 在进行容器变化的时候，需要注意    iter &#x3D; a7.erase(iter);&#x2F;&#x2F; 移出iter上的元素&#125;</code></pre><p>六、实际案例演示</p><p>1、使用迭代器遍历string中的内容，并修改</p><pre class="language-c++" data-language="c++"><code class="language-c++">string str &#x3D; &quot;I Love China&quot;;for (auto iter &#x3D; str.begin(); iter !&#x3D; str.end(); iter++) &#123;&#x2F;&#x2F; 可以直接使用auto表示类型    *iter &#x3D; toupper(*iter);&#125;cout &lt;&lt; str &lt;&lt; endl;</code></pre><p>2、创建配置文件对象，每个对象都有自己的属性名itemName 和 属性值 itemContent，向容器中添加变量，并且查询属性名对应的属性值</p><p>方法：</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 现在的需求是： 我给定一个配置文件名和配置项名称，你返回这个配置项的内容char* getInfo(vector&lt;conf*&gt; &amp;conflist, const char* tempItem) &#123;for (auto item &#x3D; conflist.begin(); item !&#x3D; conflist.end(); item++) &#123;if (_stricmp((*item)-&gt;itemname, tempItem) &#x3D;&#x3D; 0) &#123;return (*item)-&gt;itemcontent;&#125;&#125;return nullptr;&#125;</code></pre><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 配置文件如下：&#x2F;&#x2F; ServerName &#x3D; 1区&#x2F;&#x2F; 表示服务器名称&#x2F;&#x2F; ServerID &#x3D; 10000&#x2F;&#x2F; 表示服务器IDconf* pconf1 &#x3D; new conf;strcpy_s(pconf1-&gt;itemname, sizeof(pconf1-&gt;itemname), &quot;ServerName&quot;);strcpy_s(pconf1-&gt;itemcontent, sizeof(pconf1-&gt;itemcontent), &quot;1区&quot;);conf* pconf2 &#x3D; new conf;strcpy_s(pconf2-&gt;itemname, sizeof(pconf2-&gt;itemname), &quot;ServerID&quot;);strcpy_s(pconf2-&gt;itemcontent, sizeof(pconf2-&gt;itemcontent), &quot;10000&quot;);vector&lt;conf*&gt; conflist;&#x2F;&#x2F; 容器当中的是指针类型&#x2F;&#x2F; 表示容器中第一个元素，指向的是conf1的地址，第二个元素指向conf2的地址conflist.push_back(pconf1); &#x2F;&#x2F;[0]conflist.push_back(pconf2);&#x2F;&#x2F;[1]&#x2F;&#x2F; 如果对conf1中的元素进行更改，容器中的元素的内容也会更改，原因是容器存储的是指向conf1的指针&#x2F;&#x2F; 查询配置项当中的内容char *tempItemContent &#x3D; getInfo(conflist,&quot;ServerName&quot;);if (tempItemContent !&#x3D; nullptr) &#123;    cout &lt;&lt; tempItemContent &lt;&lt; endl;&#125;&#x2F;&#x2F; 我们需要释放内存，否则会导致内存的泄漏std::vector&lt;conf*&gt;::iterator pos;for (pos &#x3D; conflist.begin(); pos !&#x3D; conflist.end(); pos++) &#123;    delete (*pos);&#125;conflist.clear(); &#x2F;&#x2F; 要不要都可以</code></pre><p><a href>更多内容</a></p></font>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C++进阶04)-string,vector</title>
      <link href="/2023/080916153.html"/>
      <url>/2023/080916153.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="C-进阶04：string-vector"><a href="#C-进阶04：string-vector" class="headerlink" title="C++进阶04：string,vector"></a>C++进阶04：string,vector</h2><h3 id="一、string"><a href="#一、string" class="headerlink" title="一、string"></a>一、string</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;&#x2F;&#x2F; string : 一种可变字符串的处理，vector: 一种集合或者容器的概念&#x2F;&#x2F; string类型简介：C++标准库中的类型，表示一个可变长字符串&#x2F;&#x2F; string也是命名空间std中的元素int main() &#123;string s &#x3D; &quot;I Love China&quot;;string s1 &#x3D; &quot;Binbin Deng&quot;;&#x2F;&#x2F; string对象上的操作&#x2F;&#x2F; (1) 判断是否为空 empty()if (s.empty()) &#123;cout &lt;&lt; s &lt;&lt; &quot;为空&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F; (2) size()&#x2F;length(): 返回字节或字符数量，代表字符串的长度cout &lt;&lt; s.size() &lt;&lt; endl; &#x2F;&#x2F;12cout &lt;&lt; s.length() &lt;&lt; endl;&#x2F;&#x2F;12&#x2F;&#x2F; (3) s[n] : 返回一个字符串中第n个字符，n从0开始,不能超过s.size()-1cout &lt;&lt; s[0] &lt;&lt; &quot;-&quot; &lt;&lt; s[11] &lt;&lt; endl; &#x2F;&#x2F; I-a&#x2F;&#x2F; (4) s1 + s2 : 两个字符串相加，其实得到的是一个新的string对象cout &lt;&lt; s + s1 &lt;&lt; endl;&#x2F;&#x2F; (5) s1 &#x3D;&#x3D; s2 ： 判断两个字符串是否相等，只有完全相同才相同（大小写敏感）cout &lt;&lt; (&quot;Bin&quot; &#x3D;&#x3D; &quot;bin&quot;) &lt;&lt; endl;  &#x2F;&#x2F; 0 : flase&#x2F;&#x2F; (6) a.c_str() : 返回一个字符串s中的内容指针，返回一个指向字符串的指针常量，也就是以“\0”结尾的&#x2F;&#x2F;  这个函数的引入是为了与C语言相互兼容，c语言中没有string类型&#x2F;&#x2F;  所以使用string的c_str() 成员函数将string对象转化为c语言中的字符串样式&#x2F;&#x2F; (7)  就不行就不行吧，不用刻意记&#x2F;&#x2F;string s2 &#x3D; &quot;a&quot; + &quot;b&quot;;   &#x2F;&#x2F; 语法上不允许，系统无法识别&quot;a&quot;  &quot;b&quot; 分别属于什么类型&#x2F;&#x2F;string s2 &#x3D; &quot;a&quot; + s + &quot;b&quot;; &#x2F;&#x2F; 语法允许，系统识别是string类型的拼接&#x2F;&#x2F;string s2 &#x3D; &quot;a&quot; + &quot;b&quot; + s; &#x2F;&#x2F; 语法不允许&#x2F;&#x2F;string s2 &#x3D; s + &quot;a&quot; + &quot;b&quot; + s;  &#x2F;&#x2F; 语法允许&#x2F;&#x2F; (8) 范围for语句的使用for (auto &amp;x : s) &#123;&#x2F;&#x2F; 在变量前加上引用，相当于改变s中的值x &#x3D; toupper(x);&#x2F;&#x2F; 将字符转化为大写&#125;cout &lt;&lt; s &lt;&lt; endl;return 0;&#125;</code></pre><p><a href>string</a></p><h3 id="二、vector"><a href="#二、vector" class="headerlink" title="二、vector"></a>二、vector</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;vector&gt;using namespace std;&#x2F;&#x2F; 一、vector: 标准库： 集合或者动态数组，刻意把若干对象存放在里面&#x2F;&#x2F; vetor能够把对象装进去，也被称为容器struct student &#123;int number;&#125;;int main() &#123;&#x2F;&#x2F; 一、vector的定义及初始化vector&lt;int&gt; v;  &#x2F;&#x2F; 表示v中保存的是int型数据（int型对象）&#x2F;&#x2F; &lt;int&gt;： 类模板， vector本身就是一个类模板，&lt;int&gt;实际上就是类模板的实例化过程&#x2F;&#x2F; vector: 当成残缺的类型&#x2F;&#x2F; vector&lt;int&gt; : 在vector之后加一个&lt;&gt; ， &lt;&gt; 中加上类型信息，就是完成的类类型vector&lt;student&gt; stuList;&#x2F;&#x2F; 在容器中放student类型&#x2F;&#x2F; 定义容器，并添加数据vector&lt;string&gt; sList;sList.push_back(&quot;Binbin&quot;);sList.push_back(&quot;Deng&quot;);&#x2F;&#x2F; 元素的拷贝vector&lt;string&gt; s &#x3D; sList;&#x2F;&#x2F; 初始化的方式vector&lt;string&gt; s2 &#x3D; &#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125;;&#x2F;&#x2F; 容器3个元素，分别为a,b,cvector&lt;int&gt; s3(100,0);&#x2F;&#x2F; 给容器s3创建100个int类型的元素，每个元素的值是0；vector&lt;int&gt; s4(100);&#x2F;&#x2F; 给容器s4创建100个int类型的元素，每个元素的值系统给定为0；&#x2F;&#x2F; 注意： (): 一般表示元素的数量的感念，&#123;&#125;: 一般表示元素的内容的概念&#x2F;&#x2F; 二、vector在对象上的操作： 最常用的是：在实际的情况中不知道vector有多少个元素，需要动态的分配&#x2F;&#x2F; 所以首先创建空的vector对象，然后往里面添加元素&#x2F;&#x2F; vector的处理，与string非常相似&#x2F;&#x2F; (1) enpty 判断vector是否为空if (sList.empty()) &#123;cout &lt;&lt; &quot;为空&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F; (2) push_back() ： 用于向vector的末尾增加一个元素sList.push_back(&quot;Bin&quot;);sList.push_back(&quot;Binbin&quot;);&#x2F;&#x2F; (3) size: 返回元素的个数cout &lt;&lt; sList.size() &lt;&lt; endl;&#x2F;&#x2F; (4) list[n]: 返回vector的第n个元素cout &lt;&lt; sList[3] &lt;&lt; endl;&#x2F;&#x2F; (5) &#x3D;&#x3D;  !&#x3D; : 只有当两个vector中元素相同且位置也相同，才是相等的。for (auto&amp; i : sList) &#123;&#x2F;&#x2F; 这里使用引用，能够实现对sList中值的改变cout &lt;&lt; i &lt;&lt; endl;&#125;&#x2F;&#x2F; 范围for的进一步讲解：&#x2F;&#x2F; 如果在输出的过程当中，向容器中添加了元素，会导致最终的输出结果完全乱套&#x2F;&#x2F;for (auto i : sList) &#123; &#x2F;&#x2F; 程序崩溃&#x2F;&#x2F;sList.push_back(&quot;a&quot;);&#x2F;&#x2F;cout &lt;&lt; i &lt;&lt; endl;&#x2F;&#x2F;&#125;&#x2F;&#x2F; (6) clear() 将vector当中的元素全部都清空sList.clear();cout &lt;&lt; sList.size() &lt;&lt; endl;&#x2F;&#x2F; 0return 0;&#125;</code></pre><p><a href>更多内容</a></p></font>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C++进阶03)-结构，权限修饰符，类，内联函数和const</title>
      <link href="/2023/080916152.html"/>
      <url>/2023/080916152.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="C-进阶03：结构，权限修饰符，类，内联函数和const"><a href="#C-进阶03：结构，权限修饰符，类，内联函数和const" class="headerlink" title="C++进阶03：结构，权限修饰符，类，内联函数和const"></a>C++进阶03：结构，权限修饰符，类，内联函数和const</h2><h3 id="一、函数传值类型"><a href="#一、函数传值类型" class="headerlink" title="一、函数传值类型"></a>一、函数传值类型</h3><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F; 结构体值传递和引用传递和地址传递struct student &#123;&#x2F;&#x2F; 所有的结构成员变量前面，都有缺省的权限修饰符public ,所以可以不加int number;char name[100];void addNumber()&#123;number++;&#x2F;&#x2F; 入宫全部定义为private，则只有内部的func才能够访问，外面的都不行&#125;&#125;;&#x2F;&#x2F; 参数属于值传递的过程，只会改变局部变量temp,不会影响到main中的结构变量void changeStudent(student temp) &#123;temp.number &#x3D; 100;strcpy_s(temp.name, sizeof(temp.name), &quot;Binbin Deng&quot;);&#125;&#x2F;&#x2F; 参数属于引用，属于是main中结构变量的别名，所指向的是同一块内存空间，会改变结构变量的值void changeStudent(student &amp;temp) &#123;temp.number &#x3D; 100;strcpy_s(temp.name, sizeof(temp.name), &quot;Binbin Deng&quot;);&#125;&#x2F;&#x2F; 结构体指针作为参数，在main中调用时，将结构体变量的地址作为参数传递，这里进行的是地址传递void changeStudent2(student* temp) &#123;temp-&gt;number &#x3D; 1000;strcpy_s(temp-&gt;name, sizeof(temp-&gt;name), &quot;Bin&quot;);&#125;int mian()&#123;    student bin;bin.number &#x3D; 1;strcpy_s(bin.name, sizeof(bin.name), &quot;Daisy&quot;);cout &lt;&lt; bin.number &lt;&lt; endl;cout &lt;&lt; bin.name &lt;&lt; endl;changeStudent(bin);changeStudent2(&amp;bin);cout &lt;&lt; bin.number &lt;&lt; endl;cout &lt;&lt; bin.name &lt;&lt; endl;&#125;</code></pre><p><a href="https://blog.csdn.net/wyp8268526/article/details/105391518">值传递，引用传递，地址传递</a></p><h3 id="二、权限修饰符"><a href="#二、权限修饰符" class="headerlink" title="二、权限修饰符"></a>二、权限修饰符</h3><p>public 和 private 权限修饰符： public private protected</p><blockquote><p>public:   公有的，被其修饰的变量或函数 能够被外界所访问<br>private： 私有的，被其修饰的变量或函数 只有被内部定义才能使用</p></blockquote><h3 id="三、类简介：-类也是用户自定义的数据类型"><a href="#三、类简介：-类也是用户自定义的数据类型" class="headerlink" title="三、类简介： 类也是用户自定义的数据类型"></a>三、类简介： 类也是用户自定义的数据类型</h3><p>结构和类之间有什么区别？</p><blockquote><p>1、只有C++中有类的定义，C语言中没有<br>2、结构体用struct 类是class<br>3、C中：定义结构体变量：结构体变量； C++中定义属于类的变量： 对象<br>4、C++中，结构和类十分相似<br>重要： 5、C++中类的成员变量和函数访问权限都是private; C++中的结构体变量和函数的访问权限都是public<br>重要： 6、C++中类的继承默认都是private； 结构的继承默认都是public</p></blockquote><p>特别说明<br>    在C++语言结构当中，通常我们习惯的将相关的方法都写到一个类当中<br>    在C++标准库当中，包含了大量的类和模块供我们使用</p><p>​    通常，我们习惯将类的定义放在一个.h头文件中，可以与类相同： student.h<br>​    而类中的相关方法的实现放在cpp文件中，student.cpp</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; student.hstruct student &#123;int number;char name[100];void addNumber() &#123;&#125;&#125;;&#x2F;&#x2F; student.cpp#include &quot;student.h&quot;void student::addNumber&#123;number++;&#125;&#x2F;&#x2F; other.cpp#include &quot;student.h&quot;</code></pre><p><img src="/2023/080916152/C++%E7%B1%BB%E7%9A%84%E7%BC%96%E5%86%99%E6%96%B9%E5%BC%8F.png" alt></p><h3 id="四、内联函数"><a href="#四、内联函数" class="headerlink" title="四、内联函数"></a>四、内联函数</h3><h4 id="1-、在函数的定义前加上关键字inline-导致这个函数变成内联函数"><a href="#1-、在函数的定义前加上关键字inline-导致这个函数变成内联函数" class="headerlink" title="(1)、在函数的定义前加上关键字inline,导致这个函数变成内联函数"></a>(1)、在函数的定义前加上关键字inline,导致这个函数变成内联函数</h4><blockquote><p>1）内联含函数比一般函数在前面多一个inline修饰符</p><p>2）内联函数是直接复制“镶嵌”到主函数中去的，就是将内联函数的代码直接放在内联函数的位置上，这与一般函数不同，主函数在调用一般函数的时候，是指令跳转到被调用函数的入口地址，执行完被调用函数后，指令再跳转回主函数上继续执行后面的代码；而由于内联函数是将函数的代码直接放在了函数的位置上，所以没有指令跳转，指令按顺序执行</p><p>3）一般函数的代码段只有一份，放在内存中的某个位置上，当程序调用它是，指令就跳转过来；当下一次程序调用它是，指令又跳转过来；而内联函数是程序中调用几次内联函数，内联函数的代码就会复制几份放在对应的位置上</p><p>4）内联函数一般在头文件中定义，而一般函数在头文件中声明，在cpp中定义</p></blockquote><blockquote><p>1、inline 影响编译器，在编译阶段对inline函数进行处理，“系统尝试将调用该函数的动作替换为函数本体”，避免了进栈出栈的动作，通过这种方式提升性能<br>2、inline 只是我们给编译器的建议，编译器是否这样处理，取决于编译器的诊断功能。也就是数决定权在编译器<br>3、内联函数的定义只能放在头文件中，这样需要用到内联函数的cpp文件，需要把内联函数的源代码#include进来<br>        以便找到这个函数的本地源代码，并尝试将该函数的调用替换为函数体</p></blockquote><h4 id="2-、内联函数的优缺点"><a href="#2-、内联函数的优缺点" class="headerlink" title="(2)、内联函数的优缺点"></a>(2)、内联函数的优缺点</h4><blockquote><p>优点： 避免了指令的来回跳转，加快了程序的执行速度<br>缺点： 代码被多次复制，增加了代码量，占用了更多的空间</p></blockquote><h4 id="3-、注意："><a href="#3-、注意：" class="headerlink" title="(3)、注意："></a>(3)、注意：</h4><blockquote><p>各种编译器对inline的处理各不相同，inline函数应该尽量简单，代码尽可能少，避免出现循环，分支，递归<br>否则编译器可能会因为代码的原因，拒接让这个函数成为内联函数</p></blockquote><h4 id="4-、内联函数比宏更强大"><a href="#4-、内联函数比宏更强大" class="headerlink" title="(4)、内联函数比宏更强大"></a>(4)、内联函数比宏更强大</h4><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std; #define SUM(x) x*x inline int fun(int x)&#123;return x * x;&#125; int main()&#123;int a &#x3D; SUM(2 + 3);int b &#x3D; fun(2 + 3);cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;&#x2F;&#x2F; 11cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;&#x2F;&#x2F; 25system(&quot;pause&quot;);return 0;&#125;</code></pre><p>分析：为什么通过宏执行的结果是11呢，宏比较机械和简单，只是将传入的参数直接放上去就执行，所以int a = SUM(2 + 3);就相当于int a = 2 + 3 * 2 +3;由于乘法优先级更高，所以得到a的值为11；而在内联函数中，传入的参数是5，所以得到25</p><p>为了得到正确的结果，我们应该将宏改变为：#define SUM(x) ((x)*(x))</p><h4 id="4-、类与内联函数"><a href="#4-、类与内联函数" class="headerlink" title="(4)、类与内联函数"></a>(4)、类与内联函数</h4><blockquote><p>1）类内定义的函数都是内联函数，不管是否有inline修饰符</p><p>2）函数声明在类内，但定义在类外的看是否有inline修饰符，如果有就是内联函数，否则不是</p></blockquote><h3 id="四、const-char-、-char-const-、-char-const"><a href="#四、const-char-、-char-const-、-char-const" class="headerlink" title="四、const char * 、 char const *、 char * const"></a>四、const char * 、 char const *、 char * const</h3><p>结论：</p><blockquote><p>cosnt char *p:  p所指向的对象，不能通过p来修改，p能够改变指向的对象，这个对象可以通过其他途径更改</p><p>char const  *p： 与第一个等价</p><p>char * const p: p只能指向这个对象，不能指向其他对象，但是能够修改这个对象的内容</p><p>const char * const p: 只能指向这个对象，不能通过指针p更改对象内容，也不能更改p的指向</p></blockquote><pre class="language-c++" data-language="c++"><code class="language-c++">int main() &#123;&#x2F;&#x2F; const char * 、 char const *、 char * const 三者之间的区别char str[] &#x3D; &quot;I Love China&quot;;const char* p &#x3D; str;&#x2F;&#x2F; 在char *前面加上const：修饰的指针无法修改所指向的内容&#x2F;&#x2F; *p &#x3D; &#39;Y&#39;; p所指向的内容，不能通过p来修改&#x2F;&#x2F; char const * 与 const char * 等价的&#x2F;&#x2F; char * const p &#x3D; str : 定义的时候必须进行初始化，一旦指向了一个东西之后，就不能再指向其他东西char* const pp &#x3D; str;&#x2F;&#x2F; 融合写法const char* const ppp &#x3D; str;&#x2F;&#x2F; 表示ppp只能指向str,并且也无法通过ppp修改str的值return 0;&#125;</code></pre><p><a href>更多内容</a></p></font>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C++进阶02)-范围for，new内存动态分配，nullptr</title>
      <link href="/2023/080916151.html"/>
      <url>/2023/080916151.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="C-进阶02：范围for，new内存动态分配，nullptr"><a href="#C-进阶02：范围for，new内存动态分配，nullptr" class="headerlink" title="C++进阶02：范围for，new内存动态分配，nullptr"></a>C++进阶02：范围for，new内存动态分配，nullptr</h2><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;chrono&gt;#include&lt;time.h&gt;using namespace std;int main() &#123;&#x2F;&#x2F;范围for语句: 用于遍历一个序列int v[] &#x3D; &#123; 1,2,3,4,5 &#125;;&#x2F;&#x2F; 这里值得注意的是：每一次都有一个拷贝的处理，将V中的元素拷贝到i中来&#x2F;&#x2F;for (auto i : v) &#123;&#x2F;&#x2F; 省略了拷贝的动作，提升了程序的执行效率&#x2F;&#x2F; 这里的处理是在变量i的前面加上引用，表示每一次取的是V中元素的别名，不会另外消耗时间for (auto &amp;i : v) &#123;&#x2F;&#x2F;cout &lt;&lt; i &lt;&lt; endl;i &#x3D; i + 1;&#125;&#x2F;&#x2F; 内存分配问题：共程序使用的存储空间：程序区，静态存储区，动态存储区&#x2F;&#x2F; C++中，一般把内存进一步分为5个区域&#x2F;&#x2F; 1、 栈：一般函数内的局部变量都会存放在这里，由编译器自动分配和释放（可以理解为：）&#x2F;&#x2F; 2、 堆：由程序员进行malloc&#x2F;new进行分配，用free&#x2F;delete来释放。忘记释放，系统会回收&#x2F;&#x2F; 3、 全局&#x2F;静态存储区：存放全局变量和静态变量static，程序结束时系统会释放&#x2F;&#x2F; 4、 常量存储区： &quot;I Love Chain&quot;  int a &#x3D; 0....&#x2F;&#x2F; 5、 程序代码区。&#x2F;&#x2F; 堆和栈不同的用途和区别&#x2F;&#x2F; (1) 栈的空间是有限的，系统的分配速度快，程序员也无法控制&#x2F;&#x2F; (2) 堆：只要不超过你实际的拥有的物理内存，在操作系统所允许的分配的最大的内存之内，都可以分配给你&#x2F;&#x2F;         分配的速度比较慢，你可以使用malloc&#x2F;new来分配，free&#x2F;delete来释放内存&#x2F;&#x2F; malloc和free : 在C语言中，使用malloc和free从堆中分配和释放内存，注意malloc和free是函数&#x2F;&#x2F; new 和delete : 在C++语言中使用&#x2F;&#x2F; malloc(memory allocation): 动态内存分配&#x2F;&#x2F; 一般形式：&#x2F;&#x2F; void *malloc(int NumByte);&#x2F;&#x2F; NumByte表示需要分配的字节数，分配成功则返回指向这段被分配内存的指针，分配失败返回NULL.&#x2F;&#x2F; 当这段分配的内存你不使用的时候，应该使用free()将这段内存释放掉，供其他地方使用&#x2F;&#x2F; void free(void *FirstByte) 将malloc分配的内存释放int* p &#x3D; NULL;    &#x2F;&#x2F; 等价于 数字0p &#x3D; (int *)malloc(sizeof(int));&#x2F;&#x2F; 在堆中分配4个字节的内存，有时候分配的空间太大会失败if (p !&#x3D; NULL) &#123;&#x2F;&#x2F; 表示分配成功*p &#x3D; 100;cout &lt;&lt; *p &lt;&lt; endl;&#x2F;&#x2F; 100free(p);&#125;char* pChar &#x3D; NULL;pChar &#x3D; (char*)malloc(100 * sizeof(char));if (pChar !&#x3D; NULL) &#123;&#x2F;&#x2F;strcpy(pChar, &quot;My name is BinbinDeng&quot;); &#x2F;&#x2F; 程序提示需要使用更加安全的strcpy_sstrcpy_s(pChar, 100, &quot;My name is Binbin Deng&quot;);&#x2F;&#x2F; 注意的是： 在C语言中，strcpy函数可以直接使用，用于拷贝字符类型的数据&#x2F;&#x2F; strcpy将字符串拷贝到变量中，如果字符串字节数大于变量字节数，就会造成内存的溢出&#x2F;&#x2F; strcpy_s函数： 如果字符串字节数大于变量的字节数，会提示变量空间太小，所以中间新增一个参数表示后面字符串的大小不要超过n个字节数&#x2F;&#x2F; 如果中间的字节数n,任然小于后面字符串的字节数，程序会崩溃cout &lt;&lt; pChar &lt;&lt; endl;free(pChar);&#125;&#x2F;&#x2F; 分配一个可以存放100个int数据的内存空间int* pInt &#x3D; (int *)malloc(sizeof(int) * 100);if (pInt !&#x3D; NULL) &#123;int* q &#x3D; p;*q++ &#x3D; 1;&#x2F;&#x2F; 先*q &#x3D; 1  q++*q++ &#x3D; 5;cout &lt;&lt; *p &lt;&lt; endl;&#x2F;&#x2F;1cout &lt;&lt; *(p + 1) &lt;&lt; endl;&#x2F;&#x2F;5free(pInt);&#125;&#x2F;&#x2F; 使用new和delete： 是运算符（标识符），C++中使用new&#x2F;delete从堆中分配和释放内存，不再使用malloc&#x2F;free&#x2F;&#x2F; new&#x2F;delete比malloc&#x2F;free多做了一件事： 在分配内存时，调用了构造函数&#x2F;&#x2F; new的一般使用格式：&#x2F;&#x2F; （1）指针变量名 &#x3D; new 类型标识符&#x2F;&#x2F; （2）指针类型名 &#x3D; new 类型标识符（初始值）&#x2F;&#x2F; () 表示 设置初始值&#x2F;&#x2F; （3）指针类型名 &#x3D; new 类型标识符[内存单元个数]&#x2F;&#x2F; []&#x2F;&#x2F;int* myInt &#x3D; new int; &#x2F;&#x2F; (int *)malloc(sizeof(int))&#x2F;&#x2F;int* myInt &#x3D; new int(20); &#x2F;&#x2F; 给定了初始值20int* myInt &#x3D; new int[100]; &#x2F;&#x2F; 分配了一个大小为100的数组空间if (myInt !&#x3D; nullptr) &#123;&#x2F;&#x2F; 这里表示： 指针变量是否为空，使用nullptrint* qInt &#x3D; myInt;*qInt++ &#x3D; 1;&#x2F;&#x2F; 表示myInt[0] &#x3D; 1*qInt++ &#x3D; 2;&#x2F;&#x2F; 表示myInt[1] &#x3D; 2cout &lt;&lt; *myInt &lt;&lt; endl;&#x2F;&#x2F; 指针名表示数组首地址cout &lt;&lt; *(myInt+1) &lt;&lt; endl;&#x2F;&#x2F; 指针所指向的数组的第二个元素delete []myInt;&#x2F;&#x2F; 释放分配的数组空间的内存&#125;&#x2F;&#x2F; 注意事项：&#x2F;&#x2F; 分配和释放需要成对使用，有分配就有释放&#x2F;&#x2F; free&#x2F;delete 不要重复使用&#x2F;&#x2F; nullptr： C++ 11 中引入的新的关键字&#x2F;&#x2F; nullptr: 空指针cout &lt;&lt; typeid(NULL).name() &lt;&lt; endl;&#x2F;&#x2F; intcout &lt;&lt; typeid(nullptr).name() &lt;&lt; endl;&#x2F;&#x2F; std::nullptr_t&#x2F;&#x2F; 所以表述为空指针： 建议使用nullptr: 空指针关键字return 0;&#125;</code></pre><h3 id="一、范围for的使用"><a href="#一、范围for的使用" class="headerlink" title="一、范围for的使用"></a>一、范围for的使用</h3><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;范围for语句: 用于遍历一个序列int v[] &#x3D; &#123; 1,2,3,4,5 &#125;;&#x2F;&#x2F; 这里值得注意的是：每一次都有一个拷贝的处理，将V中的元素拷贝到i中来&#x2F;&#x2F;for (auto i : v) &#123;&#x2F;&#x2F; 省略了拷贝的动作，提升了程序的执行效率&#x2F;&#x2F; 这里的处理是在变量i的前面加上引用，表示每一次取的是V中元素的别名，不会另外消耗时间for (auto &amp;i : v) &#123;&#x2F;&#x2F;cout &lt;&lt; i &lt;&lt; endl;i &#x3D; i + 1;&#125;</code></pre><h3 id="二、内存分配"><a href="#二、内存分配" class="headerlink" title="二、内存分配"></a>二、内存分配</h3><p>C++中，一般把内存进一步分为5个区域</p><blockquote><p>1、 栈：一般函数内的局部变量都会存放在这里，由编译器自动分配和释放（可以理解为：）<br>2、 堆：由程序员进行malloc/new进行分配，用free/delete来释放。忘记释放，系统会回收<br>3、 全局/静态存储区：存放全局变量和静态变量static，程序结束时系统会释放<br>4、 常量存储区： “I Love Chain”  int a = 0….<br>5、 程序代码区。</p></blockquote><p>堆和栈不同的用途和区别</p><blockquote><p>(1) 栈的空间是有限的，系统的分配速度快，程序员也无法控制<br>(2) 堆：只要不超过你实际的拥有的物理内存，在操作系统所允许的分配的最大的内存之内，都可以分配给你<br>            分配的速度比较慢，你可以使用malloc/new来分配，free/delete来释放内存</p></blockquote><p>malloc和free : 在C语言中，使用malloc和free从堆中分配和释放内存，注意malloc和free是函数<br>new 和delete : 在C++语言中使用</p><p>malloc(memory allocation): 动态内存分配</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 一般形式：&#x2F;&#x2F; void *malloc(int NumByte);&#x2F;&#x2F; NumByte表示需要分配的字节数，分配成功则返回指向这段被分配内存的指针，分配失败返回NULL.&#x2F;&#x2F; 当这段分配的内存你不使用的时候，应该使用free()将这段内存释放掉，供其他地方使用&#x2F;&#x2F; void free(void *FirstByte) 将malloc分配的内存释放int* p &#x3D; NULL;    &#x2F;&#x2F; 等价于 数字0p &#x3D; (int *)malloc(sizeof(int));&#x2F;&#x2F; 在堆中分配4个字节的内存，有时候分配的空间太大会失败if (p !&#x3D; NULL) &#123;&#x2F;&#x2F; 表示分配成功*p &#x3D; 100;cout &lt;&lt; *p &lt;&lt; endl;&#x2F;&#x2F; 100free(p);&#125;char* pChar &#x3D; NULL;pChar &#x3D; (char*)malloc(100 * sizeof(char));if (pChar !&#x3D; NULL) &#123;&#x2F;&#x2F;strcpy(pChar, &quot;My name is BinbinDeng&quot;); &#x2F;&#x2F; 程序提示需要使用更加安全的strcpy_sstrcpy_s(pChar, 100, &quot;My name is Binbin Deng&quot;);&#x2F;&#x2F; 注意的是： 在C语言中，strcpy函数可以直接使用，用于拷贝字符类型的数据&#x2F;&#x2F; strcpy将字符串拷贝到变量中，如果字符串字节数大于变量字节数，就会造成内存的溢出&#x2F;&#x2F; strcpy_s函数： 如果字符串字节数大于变量的字节数，会提示变量空间太小，所以中间新增一个参数表示后面字符串的大小不要超过n个字节数&#x2F;&#x2F; 如果中间的字节数n,任然小于后面字符串的字节数，程序会崩溃cout &lt;&lt; pChar &lt;&lt; endl;free(pChar);&#125;&#x2F;&#x2F; 分配一个可以存放100个int数据的内存空间int* pInt &#x3D; (int *)malloc(sizeof(int) * 100);if (pInt !&#x3D; NULL) &#123;int* q &#x3D; p;*q++ &#x3D; 1;&#x2F;&#x2F; 先*q &#x3D; 1  q++  先用后加*q++ &#x3D; 5;cout &lt;&lt; *p &lt;&lt; endl;&#x2F;&#x2F;1cout &lt;&lt; *(p + 1) &lt;&lt; endl;&#x2F;&#x2F;5free(pInt);&#125;</code></pre><p>使用new和delete： 是运算符（标识符），C++中使用new/delete从堆中分配和释放内存，不再使用malloc/free</p><p>new的一般使用格式：</p><blockquote><p>（1）指针变量名 = new 类型标识符</p><p>（2）指针类型名 = new 类型标识符（初始值）          // () 表示 设置初始值</p><p>（3）指针类型名 = new 类型标识符[内存单元个数]    // [] 表示分配若干个单元的数组</p></blockquote><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;int* myInt &#x3D; new int; &#x2F;&#x2F; (int *)malloc(sizeof(int))&#x2F;&#x2F;int* myInt &#x3D; new int(20); &#x2F;&#x2F; 给定了初始值20int* myInt &#x3D; new int[100]; &#x2F;&#x2F; 分配了一个大小为100的数组空间if (myInt !&#x3D; nullptr) &#123;&#x2F;&#x2F; 这里表示： 指针变量是否为空，使用nullptr    int* qInt &#x3D; myInt;    *qInt++ &#x3D; 1;&#x2F;&#x2F; 表示myInt[0] &#x3D; 1    *qInt++ &#x3D; 2;&#x2F;&#x2F; 表示myInt[1] &#x3D; 2    cout &lt;&lt; *myInt &lt;&lt; endl;&#x2F;&#x2F; 指针名表示数组首地址    cout &lt;&lt; *(myInt+1) &lt;&lt; endl;&#x2F;&#x2F; 指针所指向的数组的第二个元素    delete []myInt;&#x2F;&#x2F; 释放分配的数组空间的内存</code></pre><p>注意事项：</p><ul><li>分配和释放需要成对使用，有分配就有释放</li><li>free/delete 不要重复使用</li></ul><h3 id="三、nullptr"><a href="#三、nullptr" class="headerlink" title="三、nullptr"></a>三、nullptr</h3><p>nullptr： C++ 11 中引入的新的关键字<br>    nullptr: 空指针</p><pre class="language-c++" data-language="c++"><code class="language-c++">cout &lt;&lt; typeid(NULL).name() &lt;&lt; endl;&#x2F;&#x2F; intcout &lt;&lt; typeid(nullptr).name() &lt;&lt; endl;&#x2F;&#x2F; std::nullptr_t&#x2F;&#x2F; 所以表述为空指针： 建议使用nullptr: 空指针关键字</code></pre><p><a href="https://blog.csdn.net/qq_39686950/article/details/113485496">更多内容</a></p></font>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C++代码小技巧)</title>
      <link href="/2023/080816150.html"/>
      <url>/2023/080816150.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="C-代码小技巧"><a href="#C-代码小技巧" class="headerlink" title="C++代码小技巧"></a>C++代码小技巧</h2><h4 id="一、计算代码运行时间"><a href="#一、计算代码运行时间" class="headerlink" title="一、计算代码运行时间"></a>一、计算代码运行时间</h4><p>（1）常用的计算代码运行时间方式</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;#include &lt;time.h&gt; clock_t start, finish;double times;int main()&#123;    start &#x3D; clock();    ....代码块...    finish &#x3D; clock();        times &#x3D; (double)(finish - start)&#x2F;CLOCKS_PER_SEC;    printf(&quot;times:%f\n&quot;, times);&#125;</code></pre><p>（2）高精度计算代码运行时间方式</p><p>这可能是当今测量墙壁时间的最佳，最便捷的方法，但仅在C ++ 11和更高版本上可用。如果您的项目/编译器不支持C ++ 11，则需要本文列出的其他选项之一。</p><p>该<code>&lt;chrono&gt;</code>库可以访问您机器中的几个不同的时钟，每个时钟都有不同的用途和特性。如果需要，您可以在<a href="https://link.zhihu.com/?target=https%3A//en.cppreference.com/w/cpp/chrono">此处</a>获取有关每种时钟的更多详细信息。但是，除非您确实需要其他时钟，否则我建议只使用<code>high_resolution_clock</code>。该时钟使用的是最高分辨率的时钟，因此对大多数人来说可能就足够了。使用方法如下：</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;chrono&gt;using namespace std;int main() &#123;auto begin &#x3D; std::chrono::high_resolution_clock::now();....代码块...auto end &#x3D; std::chrono::high_resolution_clock::now();auto elapsed &#x3D; std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(end - begin);printf(&quot;Time measured: %.5f seconds.\n&quot;, elapsed.count() * 1e-9);return 0;&#125;</code></pre><p>[更多](<a href="https://zhuanlan.zhihu.com/p/349949616">在C / C ++中测量执行时间的8种方法 - 知乎 (zhihu.com)</a>)</p><h4 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h4><p>（1）</p><p><a href>更多内容</a></p></font>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++代码技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C++进阶01)-C++编译过程，头文件防卫，命名空间</title>
      <link href="/2023/080816149.html"/>
      <url>/2023/080816149.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="C-进阶01：C-编译过程，头文件防卫，命名空间"><a href="#C-进阶01：C-编译过程，头文件防卫，命名空间" class="headerlink" title="C++进阶01：C++编译过程，头文件防卫，命名空间"></a>C++进阶01：C++编译过程，头文件防卫，命名空间</h2><h3 id="一、语言特性，工程构成，可移植性"><a href="#一、语言特性，工程构成，可移植性" class="headerlink" title="一、语言特性，工程构成，可移植性"></a>一、语言特性，工程构成，可移植性</h3><h4 id="1-语言特性：过程式，对象式程序设计"><a href="#1-语言特性：过程式，对象式程序设计" class="headerlink" title="(1) 语言特性：过程式，对象式程序设计"></a>(1) 语言特性：过程式，对象式程序设计</h4><p>过程式：<br>            面向过程式的程序设计：C语言C++ ：从下往下，逐步完成问题<br>                    // 结构： 学生：学号，姓名，班级…<br>                    // C语言当中，使用结构，需要首先定义一个属于该结构的变量                结构 == 类</p><p>对象式：</p><p>​            基于对象式的程序设计：C++语言<br>​            面向对象式的程序设计：C++语言    </p><p>​    // 在C++语言当中，将结构 叫做 “类”<br>​    // 在C++语言当中，需要使用到类时，不定义结构变量，而是定义一个 对象        结构变量 == 对象<br>​        // 在类当中，不仅仅能定义关于类的成员变量，还可以定义一些关于该类的函数(方法)，实现相关功能</p><pre class="language-c++" data-language="c++"><code class="language-c++">struct student&#123;&#x2F;&#x2F; 在结构体当中声明一些成员变量和函数int number;void study();void sleep();void work();&#125; struct student BinbinDeng;&#x2F;&#x2F; 对象BinbinDeng.student();&#x2F;&#x2F; 总的来说，就是C语言面向过程使用【结构体】创建【结构变量】把成员变量和函数声明在结构体中&#x2F;&#x2F;    C++ 面向对象使用【类】    创建【对象】把成员变量和函数声明在类中</code></pre><blockquote><p>// 继承性<br>// 创建一个类，包含上述类的所有成员变量和方法，该子类继承父类</p><p>// 多态性<br>// 子类的方法与父类的方法重名了，属于面向对象的程序设计</p><p>// 封装性</p></blockquote><p>面向对象的程序设计的优点：<br>易维护<br>易扩展<br>模块化</p><h4 id="2-编写一个最简单的C-程序"><a href="#2-编写一个最简单的C-程序" class="headerlink" title="(2) 编写一个最简单的C++程序"></a>(2) 编写一个最简单的C++程序</h4><ul><li>一个解决方案包括若干个项目</li><li>一个项目生成一个可执行程序</li></ul><p>在main函数当中，返回值一般表示状态，返回0表示成功，非0一般表示一些错误，这里一般先返回0<br>返回值在Windows下一般没什么用，在linux当中，返回值有作用<br>main函数是整个函数的入口函数，系统是从该函数开始执行的</p><h4 id="3-工程文件构成"><a href="#3-工程文件构成" class="headerlink" title="(3) 工程文件构成"></a>(3) 工程文件构成</h4><blockquote><p> 1、一个项目当中，存在多个cpp文件和多个h文件<br> 2、可能出现 .c .cpp .cxx源文件后缀   还有.m .mm<br> 3、头文件一般是.h<br> 4、.hpp表示的是将头文件和相关实现都放到该文件当中，可以减少编译的次数</p></blockquote><h4 id="4-可移植性问题"><a href="#4-可移植性问题" class="headerlink" title="(4) 可移植性问题"></a>(4) 可移植性问题</h4><ul><li>​    编译型语言：需要编译的过程，编译生成二进制文件(可执行文件)        执行速度快        C++</li><li>​    解释型语言： 不进行预先编译，先解释，再运行                                                             lua</li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">一个C++项目当中包含多个源文件，所以项目的执行过程可以理解为：源文件1 -&gt; 编译 -&gt; 目标文件1源文件2 -&gt; 编译 -&gt; 目标文件2  多个目标文件进行链接 -&gt; 可执行文件</code></pre><h3 id="二、命名空间简介"><a href="#二、命名空间简介" class="headerlink" title="二、命名空间简介"></a>二、命名空间简介</h3><p>(1) 命名空间<br>    命名空间就是：为了防止重名而引入的一种机制<br>    需要处理的是：多个Cpp源文件当中出现同名的函数或变量时，看上述的C++项目执行过程可知，<br>                  项目会最终将多个CPP源文件所编译的目标文件进行链接，所以会导致多个重名的因素编译不过<br>                  这里引入命名空间。</p><p>​    同名实体：同名函数，同名变量，同名类定义</p><blockquote><p>场景：在多个CPP文件当中创建了同名函数(参数项和返回值相同)，在编译的过程当中生成的目标文件obj会出错，重复定义的符号<br>      系统中可以定义多个命名空间，每一个命名空间都有自己的名字，不可以重名<br>      可以将这个命名空间看做 作用域，不同作用域下同名的函数，不受影响</p></blockquote><pre class="language-c++" data-language="c++"><code class="language-c++">namespace name&#123;...&#125;命名空间可以写在不同的文件当中如果以往没有定义命名空间，namespace 表示定义一个命名空间，如果事前定义过，则表示打开命名空间并添加新的成员    外界如何访问对应的命名空间当中的对应的成员函数？命名空间名称::实体名----其中::叫做“作用域运算符”temp1::copyName();如果不写temp1，则需要在文件开始的地方写：using namespace temp1;</code></pre><p>实际场景：</p><p>temp2.cpp</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;&#x2F;&#x2F; temp2中的同名函数namespace temp2 &#123;void copyName() &#123;cout &lt;&lt; &quot;temp2中的copyName()&quot;;&#125;void copyNmae2() &#123;cout &lt;&lt; &quot;temp2中的copyName2()&quot;;&#125;&#125;</code></pre><p>temp1.h</p><pre class="language-c++" data-language="c++"><code class="language-c++">#ifndef __HEAD__TAMP1__#define __HEAD__TEMP1__#pragma oncenamespace temp2 &#123;void copyName();void copyName2();&#125;#endif &#x2F;&#x2F; !__HEAD__TAMP1__</code></pre><p>temp1.cpp</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include &quot;temp1.h&quot;&#x2F;&#x2F; 只有包含了命名空间的声明，才能在本文件中使用using namespace std;using namespace temp2;&#x2F;&#x2F; 这句话可以理解为，为了省略前面的  temp2::&#x2F;&#x2F; temp1中的同名函数namespace temp1 &#123;void copyName() &#123;std::cout &lt;&lt; &quot;temp1中的copyName()&quot;;&#125;&#125;int main() &#123;temp2::copyName();&#x2F;&#x2F;temp2中的copyName()  包含了temp1.h的头文件，所以可以使用命名空间temp2copyName();    &#x2F;&#x2F;temp2中的copyName()  包含using namespace temp2 可以省略前面的temp1::copyName();&#x2F;&#x2F;temp1中的copyName()&#x2F;*int a[]&#123; 1,2,3,4 &#125;;for (auto x : a) &#123;cout &lt;&lt; x &lt;&lt; endl;&#125;*&#x2F;return 0;&#125;</code></pre><h3 id="三、基本输入输出精解"><a href="#三、基本输入输出精解" class="headerlink" title="三、基本输入输出精解"></a>三、基本输入输出精解</h3><p>// c++中不使用printf, 而是使用C++提供的标准库<br>输入输出流库：iostream标准库<br>流： 就是一种字符序列</p><h4 id="（1）输出运算符"><a href="#（1）输出运算符" class="headerlink" title="（1）输出运算符"></a>（1）输出运算符</h4><pre class="language-c++" data-language="c++"><code class="language-c++">std::coutstd: 命名空间，标准库命名空间cout： conslo output  是一个对象：标准输出对象可以这样理解：std命名空间当中一个类所确定的一个对象struct c&#123;&#125;namespace std&#123;c cout;&#x2F;&#x2F;可以直接这样理解&#125;&lt;&lt; : 输出运算符可以这样理解：&lt;&lt; 是一个运算符  (与左移运算符的符号重载了)    &lt;&lt; 可以理解为一个函数，左边右边为函数的参数左边： cout对象右边： 输出的内容&lt;&lt; 的定义： ostream &amp;std::cout.operatort&lt;&lt;();--- &lt;&lt; ：返回的也是一个写入了给定值的cout对象std::cout&lt;&lt;1;---返回值也是一个cout对象std::cout &lt;&lt; 1 &lt;&lt; 2 &lt;&lt; 3 &lt;&lt; endl;等价于：(std::cout&lt;&lt;1) &lt;&lt; 2 &lt;&lt; 3 &lt;&lt; endl;注意： 不要这样写代码：cout &lt;&lt; i-- &lt;&lt; i--; 在不同的编译器当中可能会出现不同的值，从右往左进行运算尽量避免一个表达式中超过一次的改变变量的值</code></pre><h4 id="（2）换行"><a href="#（2）换行" class="headerlink" title="（2）换行"></a>（2）换行</h4><pre class="language-c++" data-language="c++"><code class="language-c++">std::endl---是一个模板函数名，相当于函数指针作用：（1）输出换行符  \n（2）强制刷新 输出缓冲区(把缓冲区上的内容往屏幕上写)，缓冲区的所有数据，都被系统清除了输出缓冲区： 一段内存，cout实际上是指往输出缓冲区当中输出内容一般什么时候会将缓冲区的内容往屏幕上写？a) 缓冲区满了b) 执行到了main函数的return语句c) 执行了std::endl;   ---- 强制刷新输出缓冲区d) 当系统不太繁忙的时候，系统会查看缓冲区的内容，发现内容则将其输出（这就是为什么不使用std::endl的时候不强制输出缓冲区，也可以输出内容）</code></pre><h4 id="（3）输出运算符"><a href="#（3）输出运算符" class="headerlink" title="（3）输出运算符"></a>（3）输出运算符</h4><pre class="language-c++" data-language="c++"><code class="language-c++">cin: 标准 输入符&gt;&gt; : 输入运算符cin &gt;&gt; a;--- 其返回值也是一个对象cin &gt;&gt; a &gt;&gt; b;等价于(cin &gt;&gt; a) &gt;&gt; b;</code></pre><h3 id="四、auto-头文件防卫，引用，变量"><a href="#四、auto-头文件防卫，引用，变量" class="headerlink" title="四、auto 头文件防卫，引用，变量"></a>四、auto 头文件防卫，引用，变量</h3><h4 id="1-局部变量及初始化"><a href="#1-局部变量及初始化" class="headerlink" title="(1) 局部变量及初始化"></a>(1) 局部变量及初始化</h4><pre class="language-c++" data-language="c++"><code class="language-c++">int a &#123;1&#125;; int a[] &#123;1,2,3&#125;;---需要认识这种初始化的方式</code></pre><h4 id="2-auto-变量的自动类型推断"><a href="#2-auto-变量的自动类型推断" class="headerlink" title="(2) auto: 变量的自动类型推断"></a>(2) auto: 变量的自动类型推断</h4><pre class="language-c++" data-language="c++"><code class="language-c++">auto 可以在声明变量的时候，根据变量初始值的类型自动为此变量选择匹配的类型auto 自动类型推断在编译阶段完成，因此使用auto不会造成程序的效率降低auto x &#x3D; true;&#x2F;&#x2F; 自动推断为bool类型auto y &#x3D; 1;&#x2F;&#x2F; 自动推断为int类型auto z &#x3D; &#39;a&#39;;&#x2F;&#x2F; 自动推断为char类型</code></pre><h4 id="3-头文件的防卫式声明"><a href="#3-头文件的防卫式声明" class="headerlink" title="(3) 头文件的防卫式声明"></a>(3) 头文件的防卫式声明</h4><pre class="language-c++" data-language="c++"><code class="language-c++">场景介绍： 在引入头文件时，会引用多个.h文件，但是在这些头文件当中可能会存在b.h引用了a.h，当在C.cpp文件中引入了a.h和b.h之后，使用a.h中的变量时，会发生错误：（a.h中的变量重复定义）解决方案：在所有的头文件当中使用 ifdef  ifndef 条件编译#ifndef 标识符程序段#endif#ifndef __HEAD__TEMP1__#define __HEAD__TEMP1__程序段#endif &#x2F;&#x2F; !__HEAD__TAMP1__注意的是：每一个头文件当中的#ifndef的名称不能相同。  意思是：如果没有定义过，就执行程序段，如果被定义过就直接跳过，能够实现所有的头文件在引入的时候只被引入一次</code></pre><p>过程演示为什么防卫式声明可以解决上述问题：</p><pre class="language-c++" data-language="c++"><code class="language-c++">head1.h:#ifndef __HEAD1__TAMP__#define __HEAD1__TEMP__int global_1 &#x3D; 0;#endif----------------------------head2.h:#ifndef __HEAD2__TAMP__#define __HEAD2__TEMP__#include &quot;head1.h&quot;int global_2 &#x3D; 0;#endif----------------------------main：#include &quot;head1.h&quot;#include &quot;head2.h&quot;    上述代码的解释：head1.h头文件中包含定义的变量global_1，head2.h头文件中包含：include head1和变量global_2，cpp文件中同时include两个头文件1、从#include &quot;head1.h&quot; 出发： 执行 # ifndef __HEAD1__TAMP__，没有被定义，执行#define __HEAD1__TEMP__ 且创建变量global_12、main中的 #include &quot;head1.h&quot;  执行完了，继续执行 #include &quot;head2.h&quot; 。3、__HEAD2__TAMP__没有被定义，所以执行内部的程序块4、这里再次 #include &quot;head1.h&quot;, 但是head1.h内部的__HEAD1__TAMP__ 已经被定义了，所以内部的程序不会被执行5、继续执行 head2.h中的 程序： global_2被定义。</code></pre><p>[防卫式声明更多理解](<a href="https://zhuanlan.zhihu.com/p/336622992">头文件的防卫式声明 - 知乎 (zhihu.com)</a>)</p><h4 id="4-引用"><a href="#4-引用" class="headerlink" title="(4) 引用"></a>(4) 引用</h4><p>理解为：为变量起别名，使用&amp;符号，起完别名，别名和变量本身被视为同一变量</p><pre class="language-c++" data-language="c++"><code class="language-c++">int a &#x3D; 10;---变量本身和别名 使用的是同一块内存，不会造成内容的消耗int &amp;aa &#x3D; a;---注意：这里的&amp;不是取地址符的意思，初始化必须绑定到对象上1、定义别名的时候必须进行初始化2、只能够给变量进行初始化3、引用后的两个变量名，使用的是同一块内存</code></pre><h4 id="5-常量const"><a href="#5-常量const" class="headerlink" title="(5) 常量const"></a>(5) 常量const</h4><pre class="language-c++" data-language="c++"><code class="language-c++">const： 表示的就是变量的值不变const int a &#x3D; 1;constexpr 该关键字是C++11才引入的，也是一个常量的概念，在编译的时候求值，肯定能提升性能</code></pre><p><a href>更多内容</a></p></font>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C++基础09)-位运算及其应用场景</title>
      <link href="/2023/080716148.html"/>
      <url>/2023/080716148.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="C-基础09：位运算及其应用场景"><a href="#C-基础09：位运算及其应用场景" class="headerlink" title="C++基础09：位运算及其应用场景"></a>C++基础09：位运算及其应用场景</h2><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;&#x2F;&#x2F; 一个字节由8个二进制位构成，最左边的成为最高位，最右边的是最低位&#x2F;&#x2F; 一个字节就是：00000000-11111111（&#x3D;2^8-1 &#x3D; 255） 之间的数字&#x2F;&#x2F; 对应起来，一个整型int占4个字节，就是4*8&#x3D;32位1，所以一个字节所能表示的最大数就是2^32 - 1&#x2F;&#x2F; 位运算符&#x2F;&#x2F; &amp; 按位于只有两边都是1 才能是1&#x2F;&#x2F; | 按位或一边为1 就是1&#x2F;&#x2F; ^ 按位异或相同为0，否则为1&#x2F;&#x2F; ~ 取反（单目运算符）0-&gt;1  1-&gt;0按位取反注意需要加上前面所有的数字一起取反&#x2F;&#x2F; &lt;&lt; 左移左移若干位，末位补0  相当于10进制数 * 2&#x2F;&#x2F; &gt;&gt; 右移右移若干位，左边高位补0  相当于10进制数 &#x2F; 2&#x2F;&#x2F; 运算过程：&#x2F;&#x2F;unsigned int a &#x3D; 38 ( &amp; ) 22;&#x2F;&#x2F; 100110&#x2F;&#x2F;38&#x2F;&#x2F; 010110&#x2F;&#x2F;22&#x2F;&#x2F;-------&#x2F;&#x2F; 000110&#x2F;&#x2F;6&amp; 运算&#x2F;&#x2F; 110110&#x2F;&#x2F;54    | 运算&#x2F;&#x2F; 110000&#x2F;&#x2F;48^ 运算用处在于： 如果想做翻转可以和1做异或，如果保留某些位和0做异或&#x2F;&#x2F; 100110 取反的过程： 00000000 00000000 00000000 00100110 -&gt; 取反（所有的数字全部取反）&#x2F;&#x2F; 左移的过程&#x2F;&#x2F; 01111&#x2F;&#x2F;15&#x2F;&#x2F; ----------------- &#x2F;&#x2F; 11110&#x2F;&#x2F;30左移一位&#x2F;&#x2F; 111100   &#x2F;&#x2F;60左移两位&#x2F;&#x2F; 右移的过程&#x2F;&#x2F; 01111&#x2F;&#x2F;15&#x2F;&#x2F; ----------------- &#x2F;&#x2F; 00111&#x2F;&#x2F;7右移一位&#x2F;&#x2F; 00011    &#x2F;&#x2F;3右移两位&#x2F;&#x2F; 工作中位运算的场景&#x2F;&#x2F; 下面这个枚举没啥用，看main函数中的代码enum isDone &#123;hasDone1  &#x3D; 1,hasDone2  &#x3D; 1 &lt;&lt; 1,hasDone3  &#x3D; 1 &lt;&lt; 2,hasDone4  &#x3D; 1 &lt;&lt; 3,hasDone5  &#x3D; 1 &lt;&lt; 4,hasDone6  &#x3D; 1 &lt;&lt; 5,hasDone7  &#x3D; 1 &lt;&lt; 6,hasDone8  &#x3D; 1 &lt;&lt; 7,hasDone9  &#x3D; 1 &lt;&lt; 8,hasDone10 &#x3D; 1 &lt;&lt; 9,&#125;;int main() &#123;&#x2F;&#x2F; 为0， 二进制表示为： 00000000 00000000 00000000 10010010int workToday &#x3D; 146;&#x2F;&#x2F; 核心点在于：&#x2F;&#x2F; &amp;: 按位与  某个数与10000 按位与 能够实现： 判断第5位上，是否为1&#x2F;&#x2F; |: 按位或  某个数与10000 按位或 能够实现： 不管第5位上是什么，可以将第5位变为1&#x2F;&#x2F; 判断是否完成任务for (int i &#x3D; 0; i &lt; 10; i++) &#123;&#x2F;&#x2F; 1左移若干位，进行与处理，会判断workToday上的第i+1位上，是否为1&#x2F;&#x2F; 如果不为1（即为0），则最终表达式 workToday &amp; (1 &lt;&lt; i) 的值为0（未完成任务）.否则的话就是 10...0 （完成任务）cout &lt;&lt; (workToday &amp; (1 &lt;&lt; i)) &lt;&lt; endl;if (workToday &amp; (1 &lt;&lt; i)) &#123;&#x2F;&#x2F; 注意的是： 这里并没有改变workToday的值cout &lt;&lt; i+1 &lt;&lt; &quot;完成了&quot; &lt;&lt; endl;&#125;else &#123;cout &lt;&lt; i + 1 &lt;&lt; &quot;还没有完成！&quot; &lt;&lt; endl;&#125;&#125;&#x2F;&#x2F;cout &lt;&lt; workToday &lt;&lt; endl;&#x2F;&#x2F; 请输入你想完成的任务项while (workToday !&#x3D; 1023) &#123;&#x2F;&#x2F; 10位数全部完成，11 1111 1111 &#x3D; 1023int doSomeWork;cin &gt;&gt; doSomeWork;if (workToday &amp; (1 &lt;&lt; doSomeWork - 1)) &#123;&#x2F;&#x2F; 任务已经完成了，提示用户完成其他任务cout &lt;&lt; doSomeWork &lt;&lt; &quot;已经完成了，请输入未完成的任务项&quot; &lt;&lt; endl;&#125;else &#123;&#x2F;&#x2F; 任务未完成，这里完成任务&#x2F;&#x2F; 第doSomeWork位上不为0，我们需要完成任务，用或&amp; 将doSomeWork位上的值变为1workToday &#x3D; workToday | (1 &lt;&lt; doSomeWork - 1);&#x2F;&#x2F; 这里需要更新保存确定任务的值cout &lt;&lt; doSomeWork &lt;&lt; &quot;完成了!&quot; &lt;&lt; endl;&#125;&#125;&#125;</code></pre><h3 id="一、位运算"><a href="#一、位运算" class="headerlink" title="一、位运算"></a>一、位运算</h3><p>一个字节由8个二进制位构成，最左边的成为最高位，最右边的是最低位</p><p>一个字节就是：00000000-11111111（=2^8-1 = 255） 之间的数字<br>对应起来，一个整型int占4个字节，就是4*8=32位1，所以一个字节所能表示的最大数就是2^32 - 1</p><blockquote><p>位运算符<br>   &amp; 按位于                    只有两边都是1 才能是1<br>    | 按位或                    一边为1 就是1<br>   ^ 按位异或                相同为0，否则为1<br>   ~ 取反（单目运算符）        0-&gt;1  1-&gt;0    按位取反注意需要加上前面所有的数字一起取反<br>  &lt;&lt; 左移                    左移若干位，末位补0  相当于10进制数 * 2</p><p> “&gt;&gt;”右移                    右移若干位，左边高位补0  相当于10进制数 / 2</p></blockquote><p>运算过程：<br>    unsigned int a = 38 ( &amp; ) 22;<br>    100110    //38<br>    010110    //22<br>   // —————–<br>    000110    //6        &amp; 运算<br>    110110    //54    | 运算<br>    110000    //48    ^ 运算        用处在于： 如果想做翻转可以和1做异或，如果保留某些位和0做异或</p><p>100110 取反的过程： 00000000 00000000 00000000 00100110 -&gt; 取反（所有的数字全部取反）</p><p>左移的过程<br>   01111    //15<br>   // —————–<br>  11110    //30    左移一位<br>  111100   //60    左移两位</p><p>右移的过程<br>  01111    //15<br>  // —————–<br>  00111    //7        右移一位<br>  00011    //3        右移两位</p><p>二、实际应用场景</p><blockquote><p>实际需求：游戏公司给每个玩家安排每日10个任务，系统需要判断的是：这10个任务玩家完成了哪几个，没有完成就督促完成<br>// 核心点在于：<br>   // &amp;: 按位与  某个数与10000 按位与 能够实现： 判断第5位上，是否为1<br>   // |: 按位或  某个数与10000 按位或 能够实现： 不管第5位上是什么，可以将第5位变为1</p></blockquote><pre class="language-c++" data-language="c++"><code class="language-c++">int main() &#123;&#x2F;&#x2F; 假设初始值为146， 二进制表示为： 00000000 00000000 00000000 10010010int workToday &#x3D; 146;&#x2F;&#x2F; 核心点在于：&#x2F;&#x2F; &amp;: 按位与  某个数与10000 按位与 能够实现： 判断第5位上，是否为1&#x2F;&#x2F; |: 按位或  某个数与10000 按位或 能够实现： 不管第5位上是什么，可以将第5位变为1&#x2F;&#x2F; 判断是否完成任务for (int i &#x3D; 0; i &lt; 10; i++) &#123;&#x2F;&#x2F; 1左移若干位，进行与处理，会判断workToday上的第i+1位上，是否为1&#x2F;&#x2F; 如果不为1（即为0），则最终表达式 workToday &amp; (1 &lt;&lt; i) 的值为0（未完成任务）.否则的话就是 10...0 （完成任务）cout &lt;&lt; (workToday &amp; (1 &lt;&lt; i)) &lt;&lt; endl;if (workToday &amp; (1 &lt;&lt; i)) &#123;&#x2F;&#x2F; 注意的是： 这里并没有改变workToday的值cout &lt;&lt; i+1 &lt;&lt; &quot;完成了&quot; &lt;&lt; endl;&#125;else &#123;cout &lt;&lt; i + 1 &lt;&lt; &quot;还没有完成！&quot; &lt;&lt; endl;&#125;&#125;&#x2F;&#x2F;cout &lt;&lt; workToday &lt;&lt; endl;&#x2F;&#x2F; 请输入你想完成的任务项while (workToday !&#x3D; 1023) &#123;&#x2F;&#x2F; 10位数全部完成，11 1111 1111 &#x3D; 1023int doSomeWork;cin &gt;&gt; doSomeWork;if (workToday &amp; (1 &lt;&lt; doSomeWork - 1)) &#123;&#x2F;&#x2F; 任务已经完成了，提示用户完成其他任务cout &lt;&lt; doSomeWork &lt;&lt; &quot;已经完成了，请输入未完成的任务项&quot; &lt;&lt; endl;&#125;else &#123;&#x2F;&#x2F; 任务未完成，这里完成任务&#x2F;&#x2F; 第doSomeWork位上不为0，我们需要完成任务，用或&amp; 将doSomeWork位上的值变为1workToday &#x3D; workToday | (1 &lt;&lt; doSomeWork - 1);&#x2F;&#x2F; 这里需要更新保存确定任务的值cout &lt;&lt; doSomeWork &lt;&lt; &quot;完成了!&quot; &lt;&lt; endl;&#125;&#125;&#125;</code></pre><p><a href>更多内容</a></p></font>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 开发场景 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C++基础08)-结构体</title>
      <link href="/2023/080316147.html"/>
      <url>/2023/080316147.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="C-基础08：结构体"><a href="#C-基础08：结构体" class="headerlink" title="C++基础08：结构体"></a>C++基础08：结构体</h2><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;&#x2F;&#x2F; 一、结构体的概述&#x2F;&#x2F; 基本的数据类型单薄，结构体也是一种数据类型&#x2F;&#x2F; 结构体就是把多种类型的数据整合到一起&#x2F;&#x2F; 结构体的定义： struct name &#123;&#125;;&#x2F;&#x2F; 后面有分号&#x2F;&#x2F; 定义一个结构体struct data &#123;int month;int day;int year;char note[50];&#125;;struct student &#123;int num;char name[100];int gender;int age;char address[100];struct data birthday;&#125;s1,s2;&#x2F;&#x2F; 定义两个结构体变量&#x2F;&#x2F; 共用体（联合）&#x2F;&#x2F; 把几种不同的变量存放在同一段内存单元中（同一个内存地址开始的单元中）&#x2F;&#x2F; 几个变量共同占用同一段内存的结构，叫做共用体，在实际的代码中，最后一个公用体变量赋予的值才有意义，其他的都不行&#x2F;&#x2F; union 共用体名 &#123;成员列表&#125; 变量列表;union myuni &#123;int carnum;char cartype;char cname[50];&#125;a,b,c;&#x2F;&#x2F; 共用体与结构体之间的关系&#x2F;&#x2F; 结构体的字节数是所有成员变量的字节数之和&#x2F;&#x2F; 公用体所占的内存长度是最长的成员长度，不是之和&#x2F;&#x2F; 公用体变量的特点&#x2F;&#x2F; 同一段内存存放集中不同类型的成员&#x2F;&#x2F; 但每一个瞬间只能存放一个变量，即： 每一个瞬间只有一个成员变量起作用，其他成员不起作用&#x2F;&#x2F; 程序代码中，那个成员变量最后赋值，哪个成员就会起作用&#x2F;&#x2F; 公用体名称的地址，与其成员变量的地址相同&#x2F;&#x2F; 因为公用体的成员变量只有一个起作用，所以不能在创建的时候初始化&#x2F;&#x2F; 不能将公用体变量作为函数的参数，并且不能让函数带回公用体变量&#x2F;&#x2F; 枚举类型enum color &#123;Red,&#x2F;&#x2F; 注意使用逗号分开Green,yello&#125;;&#x2F;&#x2F; 使用typedef来定义类型&#x2F;&#x2F; 使用typedef来定义新的类型名&#x2F;&#x2F; typedef int intt;&#x2F;&#x2F; intt a,ab,c;&#x2F;&#x2F; a,b,c就是整型的变量int main()&#123;&#x2F;&#x2F; 创建一个结构体变量struct student BinbinDeng &#x3D; &#123;123,&quot;deng&quot;,1,23,&quot;cd&quot;,10,26,1,&quot;happy&quot;&#125;, *sanfi;&#x2F;&#x2F;BinbinDeng.name &#x3D; &quot;binbin&quot;; &#x2F;&#x2F; 这段代码是错误的，无法这样使用，但是在定义时赋值就不会产生错误&#x2F;&#x2F; strcpy_s是strcpy的安全方法，使用字符串赋值的方式进行代替strcpy_s(BinbinDeng.name,100,&quot;binbin&quot;);memcpy(BinbinDeng.birthday.note, &quot;kaixin&quot;, 50);&#x2F;&#x2F; 如果结构体的元素任然是一个结构体BinbinDeng.num &#x3D; 123;BinbinDeng.gender &#x3D; 1;BinbinDeng.age &#x3D; 22;&#x2F;&#x2F;BinbinDeng.address &#x3D; &quot;sz&quot;;BinbinDeng.birthday.day &#x3D; 10;&#x2F;&#x2F;BinbinDeng.birthday.note &#x3D; &quot;gaoxing&quot;;&#x2F;&#x2F; 另外一种赋值方式,指针结构体的表示方式sanfi-&gt;num &#x3D; 100;&#x2F;&#x2F;sanfi-&gt;address &#x3D; &quot;wuhan&quot;;strcpy(sanfi-&gt;address, &quot;wuhan&quot;);cout &lt;&lt; sizeof(BinbinDeng) &lt;&lt; endl;&#x2F;&#x2F; 结构体的字节数是所有成员变量的字节数之和cout &lt;&lt; BinbinDeng.name &lt;&lt; endl;cout &lt;&lt; BinbinDeng.birthday.note &lt;&lt; endl;&#x2F;&#x2F; 结构体数组&#x2F;&#x2F; 在定义结构体数组的时候也可以进行初始化，struct student str[2] &#x3D; &#123;&#123;100，...&#125;,&#123;&#125;&#125;;struct student str[3];&#x2F;&#x2F; 结构体指针: 指针指向该结构体变量占用内存的起始地址struct student s;struct student * ps;ps &#x3D; &amp;s;strcpy(s.name, &quot;xiaoming&quot;);s.age &#x3D; 100;printf(&quot;%d\n&quot;, ps-&gt;name);&#x2F;&#x2F; 如果使用ps的话，就是使用-&gt;去访问成员变量,常用printf(&quot;%d\n&quot;, (*ps).age);&#x2F;&#x2F; 如果使用*ps的话，就是使用(*ps).name，必须要加上括号，因为*没有.的优先级高&#x2F;&#x2F; 定义指向结构体数组的指针&#x2F;&#x2F; 如果struct student stu[10]&#x3D;&#123;&#125;; struct *ps &#x3D; &amp;stu; ps++表示跳跃到了下一个结构体数组元素&#x2F;&#x2F; 在实际的开发的过程中，应该尽量的使用地址传递的过程，即传入指针作为函数的参数，这样即降低了内存的开销，提升了&#x2F;&#x2F; 在使用的过程当中enum color mycolor1, mycolor2;  &#x2F;&#x2F; 这几个变量只能限于上述三个值mycolor1 &#x3D; Red;return 0;&#125;</code></pre><p><a href>更多内容</a></p></font>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C++基础07)-指针</title>
      <link href="/2023/080216146.html"/>
      <url>/2023/080216146.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="C-基础07：指针"><a href="#C-基础07：指针" class="headerlink" title="C++基础07：指针"></a>C++基础07：指针</h2><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;&#x2F;&#x2F; 一、预备知识&#x2F;&#x2F; 静态存储区，动态存储区。。。不同的变量会存储在不同的存储区当中&#x2F;&#x2F; 1、有些变量，会在编译的时候分配内存&#x2F;&#x2F; 2、有些变量，会在程序运行的时候分配内存&#x2F;&#x2F; 二、直接访问和间接访问&#x2F;&#x2F; 直接访问： 按照这个变量的地址取值&#x2F;&#x2F; 间接访问： 将变量i的地址存放到另一个存储单元中&#x2F;&#x2F; 我们通常用int char等类型来定义并存储变量的值&#x2F;&#x2F; 同时也有一种特殊的变量，能够存储另一个变量的“地址”，这就是指针变量 point &#x3D; &amp;i；&#x2F;&#x2F; 有时候，地址也被称为指针。&#x2F;&#x2F; 三、指针变量的定义&#x2F;&#x2F; 类型标识符 *标识符 int *point; 这个指针变量 指向整型标量&#x2F;&#x2F; 一个指针变量只能指向同一类型的变量&#x2F;&#x2F; 四、指针变量的引用&#x2F;&#x2F; 指针变量中只存放地址，不要将整型变量赋值给一个指针变量&#x2F;&#x2F; *p &#x3D; i&#x2F;&#x2F; 五、坑爹的解析&#x2F;&#x2F; &amp;*p ： &amp; * 两个运算符的优先级相同，&amp;（*p） &#x3D; &amp;i &#x3D; p&#x2F;&#x2F; *&amp;i : *&amp;p &#x3D; *(&amp;i) &#x3D; *p &#x3D; i&#x2F;&#x2F; (*p)++ : i++&#x2F;&#x2F; *p++ ：*和++的优先级相同，*p++ &#x3D; *(p++) 这里表示p所指向的内存 + p类型所占内存数后的地址&#x2F;&#x2F; &amp;i &#x3D; p &#x3D; 1000;  p++ &#x3D; 1000 + sizeof(int)4; 但是这一块内存不被p所使用,谨慎使用p++&#x2F;&#x2F; 六、分析一下,为什么下面会出问题void swap(int *p1, int *p2) &#123;&#x2F;&#x2F; 这个过程是： int temp;temp &#x3D; *p1;&#x2F;&#x2F; *p1 &#x3D; a &#x3D; 1 &#x3D;&#x3D;&gt; temp &#x3D;1*p1 &#x3D; *p2;&#x2F;&#x2F; *p2 &#x3D; b &#x3D; 2 &#x3D;&#x3D;&gt; *p1 &#x3D; 2    a &#x3D; 2*p2 &#x3D; temp;&#x2F;&#x2F; *p2 &#x3D; 1&#x2F;&#x2F; 下面这种方式会出现问题 有点懵逼，但是就是下面这种方式不行&#x2F;&#x2F; int *temp;&#x2F;&#x2F; temp &#x3D; p1;&#x2F;&#x2F; p1 &#x3D; p2;&#x2F;&#x2F; p2 &#x3D; temp;&#125;&#x2F;&#x2F; 七、数组的指针&#x2F;&#x2F; 数组指针： 数组的首地址  &#x2F;&#x2F; 数组元素的指针： 数组元素的地址&#x2F;&#x2F; 八、改变数组元素的几种方式（形参与实参的对应）&#x2F;&#x2F; (1) 实参和形参都是数组名称void changeValue1(int tempArr[]) &#123;tempArr[0] &#x3D; 100;&#125;&#x2F;&#x2F; (2) 实参用数组名，形参用指针变量void changeValue2(int* p) &#123;p[1] &#x3D; 110;&#x2F;&#x2F; p[1] &#x3D; *(p+1)&#125;&#x2F;&#x2F; (3) 实参用指针变量，形参用指针变量void changeValue3(int* p) &#123;p[2] &#x3D; 120;&#x2F;&#x2F; p[1] &#x3D; *(p+1)&#125;&#x2F;&#x2F; (4) 实参用指针变量，形参用数组名void changeValue4(int tempArr[]) &#123;tempArr[3] &#x3D; 130;&#125;&#x2F;&#x2F; 九、指针数组和数组指针&#x2F;&#x2F; 十、字符串指针和指向字符串的指针变量&#x2F;&#x2F;char mystr1[] &#x3D; &quot;I love China!&quot;;&#x2F;&#x2F;char mystr2[] &#x3D; &quot;I love China!&quot;; &#x2F;&#x2F;printf(&quot;%s\n&quot;, mystr1);&#x2F;&#x2F; 将字符串拷贝到字符数组中&#x2F;&#x2F;printf(&quot;%s\n&quot;, mystr2);&#x2F;&#x2F; 这两个变量的地址不同&#x2F;&#x2F;&#x2F;&#x2F;char *mystr1 &#x3D; &quot;I love China!&quot;;&#x2F;&#x2F; 这两个变量的相同，都指向 &quot;I love China!&quot;;的地址&#x2F;&#x2F;char *mystr2 &#x3D; &quot;I love China!&quot;;&#x2F;&#x2F; 不是拷贝&#x2F;&#x2F; C语言对字符串常量有特殊的处理，在内存中开辟一段类似于字符数组的空间来存储字符串常量&#x2F;&#x2F; 所有 &quot;I love China!&quot;;在内存中，有一块自己的内存地址。int main() &#123;&#x2F;&#x2F; 指针的定义int i;int *pointToi;&#x2F;&#x2F; 定义一个指针变量pointToi &#x3D; &amp;i;&#x2F;&#x2F; 表明了pointToi指向了整型变量i&#x2F;&#x2F; 将p1指向大的数&#x2F;*int a &#x3D; 1;int b &#x3D; 2;int *p1;int *p2;if (a &lt; b) &#123;swap(*p1, *p2);&#125;*&#x2F;&#x2F;&#x2F;只要是数组，数组之间的地址都是挨着的int arr[5];arr[0] &#x3D; 1; arr[1] &#x3D; 2; arr[2] &#x3D; 3; arr[3] &#x3D; 4; arr[4] &#x3D; 5;int* p &#x3D; &amp;arr[0];*p &#x3D; 10;&#x2F;&#x2F; 表示改变了*p &#x3D; arr[0] 的值p &#x3D; p + 1;&#x2F;&#x2F; 由于数组之间的地址是连续性的，所以p+1表示p所指向的元素的下一个元素&#x2F;&#x2F; p指向数组首元素地址，p + i 表示p指向了数组a[i]. a + i也是表示元素a[i]&#x2F;&#x2F; ！！！！！注意！！！！！&#x2F;&#x2F; a+i  表示数组第i个元素a[i]  a就是数组的初始地址 &#x2F;&#x2F; p+i  表示数组第i个元素a[i] p指向数组的初始地址&#x2F;&#x2F; *(p+i) 表示数组第i个元素a[i] p可以++ p++合法，就是往后加一&#x2F;&#x2F; *(a+i) 表示数组第i个元素a[i] a不可以++ a++不合法&#x2F;&#x2F; p[i]   表示数组第i个元素a[i]&#x2F;&#x2F; 八、改变数组元素的4种方式（形参与实参之间的4种对比方式）int a[5] &#x3D; &#123; 1,2,3,4,5 &#125;;&#x2F;&#x2F; (1) 实参和形参都是数组名称changeValue1(a);&#x2F;&#x2F; changeValue1的形参和实参公用某一块内存printf(&quot;%d\n&quot;, a[0]);&#x2F;&#x2F; 100 当数组名称作为实参传递时，传递的是数组的地址，实参数组原本的内容也会在changeValue1中改变&#x2F;&#x2F; (2) 实参用数组名，形参用指针变量changeValue2(a);&#x2F;&#x2F; 实参是指针变量，并且又明确的指向printf(&quot;%d\n&quot;, a[1]);&#x2F;&#x2F; 110 &#x2F;&#x2F; (3) 实参用指针变量，形参用指针变量int *pa &#x3D; a;changeValue3(pa);printf(&quot;%d\n&quot;, a[2]);&#x2F;&#x2F; (4) 实参用指针变量，形参用数组名int *paa &#x3D; a;changeValue4(paa);printf(&quot;%d\n&quot;, a[3]);&#x2F;&#x2F; 总结： 数组名称（即数组的地址）与指针可以相互替换&#x2F;&#x2F; 注意的是： 二维数组的aaa[1] 就是aaa[1][0]的地址 第二行元素的首地址int aaa[2][2] &#x3D; &#123; &#123;1,2&#125;,&#123;3,4&#125; &#125;;printf(&quot;%d\n&quot;, aaa[1]);&#x2F;&#x2F; 下面两个元素的值相同printf(&quot;%d\n&quot;, &amp;aaa[1][0]);&#x2F;&#x2F; 实践一下int aa[2][3] &#x3D; &#123; 86,86,86,86,86,86 &#125;;int *pp &#x3D; (int *)(aa + 1);&#x2F;&#x2F; 将二维数组的第二行首地址给p  aa[1][0]。。。aa[1][2]*pp &#x3D; 100;&#x2F;&#x2F; aa[1][0] &#x3D; 100pp++;&#x2F;&#x2F; 走4个字节 p指向 a[1][1]*pp &#x3D; 110;&#x2F;&#x2F; aa[1][1] &#x3D; 110;&#x2F;&#x2F; 九、指针数组和数组指针return 0;&#125;</code></pre><h3 id="一、知识理解"><a href="#一、知识理解" class="headerlink" title="一、知识理解"></a>一、知识理解</h3><blockquote><p>​     静态存储区，动态存储区。。。不同的变量会存储在不同的存储区当中<br>​    1、有些变量，会在编译的时候分配内存<br>​    2、有些变量，会在程序运行的时候分配内存</p></blockquote><h3 id="二、直接访问和间接访问"><a href="#二、直接访问和间接访问" class="headerlink" title="二、直接访问和间接访问"></a>二、直接访问和间接访问</h3><blockquote><p>直接访问： 按照这个变量的地址取值<br>间接访问： 将变量i的地址存放到另一个存储单元中<br>    我们通常用int char等类型来定义并存储变量的值<br>    同时也有一种特殊的变量，能够存储另一个变量的“地址”，这就是指针变量 point = &amp;i；<br>    有时候，地址也被称为指针。</p></blockquote><h3 id="三、指针变量的定义"><a href="#三、指针变量的定义" class="headerlink" title="三、指针变量的定义"></a>三、指针变量的定义</h3><p>​    类型标识符 *标识符 int *point; 这个指针变量 指向整型标量<br>​    一个指针变量只能指向同一类型的变量<br>​    </p><h3 id="四、指针变量的引用"><a href="#四、指针变量的引用" class="headerlink" title="四、指针变量的引用"></a>四、指针变量的引用</h3><p>指针变量中只存放地址，不要将整型变量赋值给一个指针变量<br>*p = i</p><h3 id="五、坑爹的解析"><a href="#五、坑爹的解析" class="headerlink" title="五、坑爹的解析"></a>五、坑爹的解析</h3><blockquote><p>&amp;<em>p ： &amp; * 两个运算符的优先级相同，&amp;（*p） = &amp;i = p<br>*&amp;i ：  *&amp;p = *(&amp;i) = *p = i<br>( *p)++ ：  i++<br>// * p++ ：</em> 和++的优先级相同，*p++ = *(p++) 这里表示p所指向的内存 + p类型所占内存数后的地址<br>       &amp;i = p = 1000;  p++ = 1000 + sizeof(int)4; 但是这一块内存不被p所使用,谨慎使用p++</p></blockquote><h3 id="六、分析一下-为什么下面会出问题"><a href="#六、分析一下-为什么下面会出问题" class="headerlink" title="六、分析一下,为什么下面会出问题"></a>六、分析一下,为什么下面会出问题</h3><pre class="language-c++" data-language="c++"><code class="language-c++">void swap(int *p1, int *p2) &#123;&#x2F;&#x2F; 这个过程是： int temp;temp &#x3D; *p1;&#x2F;&#x2F; *p1 &#x3D; a &#x3D; 1 &#x3D;&#x3D;&gt; temp &#x3D;1*p1 &#x3D; *p2;&#x2F;&#x2F; *p2 &#x3D; b &#x3D; 2 &#x3D;&#x3D;&gt; *p1 &#x3D; 2    a &#x3D; 2*p2 &#x3D; temp;&#x2F;&#x2F; *p2 &#x3D; 1&#x2F;&#x2F; 下面这种方式会出现问题 有点懵逼，但是就是下面这种方式不行&#x2F;&#x2F; int *temp;&#x2F;&#x2F; temp &#x3D; p1;&#x2F;&#x2F; p1 &#x3D; p2;&#x2F;&#x2F; p2 &#x3D; temp;&#125;</code></pre><h3 id="七、数组的指针"><a href="#七、数组的指针" class="headerlink" title="七、数组的指针"></a>七、数组的指针</h3><p> 数组指针： 数组的首地址<br> 数组元素的指针： 数组元素的地址</p><h3 id="八、改变数组元素的几种方式（形参与实参的对应）"><a href="#八、改变数组元素的几种方式（形参与实参的对应）" class="headerlink" title="八、改变数组元素的几种方式（形参与实参的对应）"></a>八、改变数组元素的几种方式（形参与实参的对应）</h3><pre class="language-none"><code class="language-none">&#x2F;&#x2F; (1) 实参和形参都是数组名称void changeValue1(int tempArr[]) &#123;tempArr[0] &#x3D; 100;&#125;&#x2F;&#x2F; (2) 实参用数组名，形参用指针变量void changeValue2(int* p) &#123;p[1] &#x3D; 110;&#x2F;&#x2F; p[1] &#x3D; *(p+1)&#125;&#x2F;&#x2F; (3) 实参用指针变量，形参用指针变量void changeValue3(int* p) &#123;p[2] &#x3D; 120;&#x2F;&#x2F; p[1] &#x3D; *(p+1)&#125;&#x2F;&#x2F; (4) 实参用指针变量，形参用数组名void changeValue4(int tempArr[]) &#123;tempArr[3] &#x3D; 130;&#125;</code></pre><h3 id="九、指针数组和数组指针"><a href="#九、指针数组和数组指针" class="headerlink" title="九、指针数组和数组指针"></a>九、指针数组和数组指针</h3><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; ！！！！！注意！！！！！&#x2F;&#x2F; a+i  表示数组第i个元素a[i]  a就是数组的初始地址 &#x2F;&#x2F; p+i  表示数组第i个元素a[i] p指向数组的初始地址&#x2F;&#x2F; *(p+i) 表示数组第i个元素a[i] p可以++ p++合法，就是往后加一&#x2F;&#x2F; *(a+i) 表示数组第i个元素a[i] a不可以++ a++不合法&#x2F;&#x2F; p[i]   表示数组第i个元素a[i]</code></pre><h3 id="十、字符串指针和指向字符串的指针变量"><a href="#十、字符串指针和指向字符串的指针变量" class="headerlink" title="十、字符串指针和指向字符串的指针变量"></a>十、字符串指针和指向字符串的指针变量</h3><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;char mystr1[] &#x3D; &quot;I love China!&quot;;&#x2F;&#x2F;char mystr2[] &#x3D; &quot;I love China!&quot;; &#x2F;&#x2F;printf(&quot;%s\n&quot;, mystr1);&#x2F;&#x2F; 将字符串拷贝到字符数组中&#x2F;&#x2F;printf(&quot;%s\n&quot;, mystr2);&#x2F;&#x2F; 这两个变量的地址不同&#x2F;&#x2F;&#x2F;&#x2F;char *mystr1 &#x3D; &quot;I love China!&quot;;&#x2F;&#x2F; 这两个变量的相同，都指向 &quot;I love China!&quot;;的地址&#x2F;&#x2F;char *mystr2 &#x3D; &quot;I love China!&quot;;&#x2F;&#x2F; 不是拷贝&#x2F;&#x2F; C语言对字符串常量有特殊的处理，在内存中开辟一段类似于字符数组的空间来存储字符串常量&#x2F;&#x2F; 所有 &quot;I love China!&quot;;在内存中，有一块自己的内存地址。</code></pre><p>二维数组a[][]的各种表达形式的意义：</p><p><img src="/2023/080216146/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%90%84%E4%B8%AA%E8%A1%A8%E8%BE%BE%E5%BD%A2%E5%BC%8F%E7%9A%84%E6%84%8F%E4%B9%89.png" alt></p><p><a href="https://blog.csdn.net/soonfly/article/details/51131141?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169103109216800197010477%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169103109216800197010477&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-51131141-null-null.142^v92^controlT0_2&utm_term=%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A3&spm=1018.2226.3001.4187">更多内容</a></p></font>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C++基础06)-编译预处理</title>
      <link href="/2023/080216145.html"/>
      <url>/2023/080216145.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="C-基础06：编译预处理"><a href="#C-基础06：编译预处理" class="headerlink" title="C++基础06：编译预处理"></a>C++基础06：编译预处理</h2><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;&#x2F;&#x2F; 不带参数的宏定义: 使用PI代替“3.1415926”这个字符串#define PI 3.1415926#define DPI PI * 2#define DPICPI DPI * PI&#x2F;&#x2F; 带参数的宏定义#define S(a,b) a * b#define A(r) PI * (r) * (r)&#x2F;&#x2F; 这里加上()的原因是，如果传进来的采纳数是2+4表达式时，由于宏定义是预处理的过程，不会执行2+4，而是直接带入表达式中int main() &#123;&#x2F;&#x2F; 一个项目可以通过编译，链接生成一个可执行文件&#x2F;&#x2F; 每一个源文件(.cpp)都会单独编译，生成一个目标文件(.o或者.obj，扩展名与操作系统有关)&#x2F;&#x2F; 系统会把这些.o文件进行链接，生成一个可执行文件&#x2F;&#x2F; 编译的过程？&#x2F;&#x2F; 笼统的说： 词法，语法分析，目标文件（临时文件）的生成，优化之类&#x2F;&#x2F; 1、预处理&#x2F;&#x2F; 2、编译：词法，语法分析，目标打码生成，优化，产生一些临时文件&#x2F;&#x2F; 3、汇编：生成.o(.obj)目标文件&#x2F;&#x2F; 预处理干了什么？&#x2F;&#x2F; 在源程序.cpp文件当中加入一些特殊的代码(特殊的命令)，编译系统对特殊代码的处理，就是预处理&#x2F;&#x2F; 处理结果再和源程序代码进行2编译，3汇编&#x2F;&#x2F; C语言一般提供三种预处理功能：&#x2F;&#x2F; 1、宏定义 2、文件包含 3、条件编译&#x2F;&#x2F; 这几种功能也是通过程序代码实现，但是：都是以#开头的代码&#x2F;&#x2F; 一、不带参数的宏定义生成.o(.obj)目标文件&#x2F;&#x2F; 不带参数的宏定义： 用一个指定的标识符来代替 一个字符串&#x2F;&#x2F; #define 标识符&#x2F;宏名 字符串&#x2F;&#x2F; 好处： 预编译时，将宏名替换成字符串的过程：宏展开&#x2F;&#x2F;增加了修改的便利性，这种方式经常使用&#x2F;&#x2F; 注意： （1）宏名，一般全部大写，习惯&#x2F;&#x2F;（2）不加分号，这不是C语句&#x2F;&#x2F;（3）#define只能出现在函数的外面（最上面），只能在本文件中使用，不能在其他文件中使用。&#x2F;&#x2F; 一般的工程项目中，将定义的宏写在一个文件中，然后引入即可。&#x2F;&#x2F;（4）使用#undef命令，终止宏定义的作用域(一般很少使用)&#x2F;&#x2F;（5）宏定义时，看可以进行层层定义&#x2F;&#x2F; 二、带参数的宏定义&#x2F;&#x2F; 带参数的宏定义： #define 宏名(参数表) 字符串&#x2F;&#x2F; 例如S（2,3）使用2,3分别替换参数a,b&#x2F;&#x2F; S（2,3） &#x3D; 2* 3;&#x2F;&#x2F; 注意： 如果写成S（1+1,3），最终的结果是 1+1*3，原因是宏定义是在预处理的过程，程序只会执行&#x2F;&#x2F; 三、宏定义和函数之间的区别&#x2F;&#x2F; 1、宏定义直接进行了简单的字符替换，而函数是先计算实参表达式的值&#x2F;&#x2F; 2、函数调用在程序运行时进行的，分配临时内存，宏展开是在预编译时进行的，没有分配内存，没有值传递，没有返回值&#x2F;&#x2F; 3、宏的参数没有类型这个说法，只有替换的的方式&#x2F;&#x2F; 4、宏展开只占用编译时间，不占用程序的运行时间&#x2F;&#x2F; 四、文件包含：将另外一个文件的内容包含到本文件中&#x2F;&#x2F; 一般而言 通常用于.h文件&#x2F;&#x2F; 我们把宏定义，函数说明，其他的include命令，全局变量的外部声明等存放到头文件中&#x2F;&#x2F; 文件包含可以嵌套的&#x2F;&#x2F; #include 使用&lt;&gt; 表示从系统目录当中寻找头文件， &quot;&quot;表示先从当前目录寻找，没有则从系统目录中寻找&#x2F;&#x2F; 五、条件编译：对一部分内容，指定编译条件&#x2F;&#x2F; 1、#ifdef  标识符 程序段1 [#else 程序段2] #endif &#x3D;&#x3D;&#x3D;&gt; 当标识符被定义过(#ifdef) 则对程序段1进行编译，否则程序段2进行编译，#else可以没有&#x2F;&#x2F; 2、#ifndef 标识符 程序段1 [#else 程序段2] #endif &#x3D;&#x3D;&#x3D;&gt; 当标识符没有被定义过(#ifndef) 则对程序段1进行编译，否则程序段2进行编译，#else可以没有&#x2F;&#x2F; 3、#if 表达式 程序段1 #else 程序段 #endif&#x2F;&#x2F; 好处： 1、条件编译可以降低目标文件的长度  2、可以处理跨平台的问题return 0;&#125;</code></pre><h3 id="一、知识理解"><a href="#一、知识理解" class="headerlink" title="一、知识理解"></a>一、知识理解</h3><blockquote><p>一个项目可以通过编译，链接生成一个可执行文件<br>每一个源文件(.cpp)都会单独编译，生成一个目标文件(.o或者.obj，扩展名与操作系统有关)<br>系统会把这些.o文件进行链接，生成一个可执行文件</p></blockquote><p>编译的过程？</p><p>​        笼统的说： 词法，语法分析，目标文件（临时文件）的生成，优化之类</p><blockquote><p>1、预处理<br>2、编译：词法，语法分析，目标打码生成，优化，产生一些临时文件<br>3、汇编：生成.o(.obj)目标文件</p></blockquote><p>预处理干了什么？<br>             在源程序.cpp文件当中加入一些特殊的代码(特殊的命令)，编译系统对特殊代码的处理，就是预处理<br>             处理结果再和源程序代码进行2编译，3汇编</p><p>C语言一般提供三种预处理功能:</p><blockquote><p>1、宏定义 </p><p>2、文件包含 </p><p>3、条件编译</p><p>这几种功能也是通过程序代码实现，但是：都是以#开头的代码</p></blockquote><h3 id="二、不带参数的宏定义"><a href="#二、不带参数的宏定义" class="headerlink" title="二、不带参数的宏定义"></a>二、不带参数的宏定义</h3><p>​        不带参数的宏定义： 用一个指定的标识符来代替 一个字符串</p><pre class="language-c++" data-language="c++"><code class="language-c++">#define 标识符&#x2F;宏名 字符串</code></pre><p>好处： 预编译时，将宏名替换成字符串的过程：宏展开<br>                    增加了修改的便利性，这种方式经常使用</p><p>注意：</p><blockquote><p>（1）宏名，一般全部大写，习惯<br>（2）不加分号，这不是C语句<br>（3）#define只能出现在函数的外面（最上面），只能在本文件中使用，不能在其他文件中使用。<br>        一般的工程项目中，将定义的宏写在一个文件中，然后引入即可。<br>（4）使用#undef命令，终止宏定义的作用域(一般很少使用)<br>（5）宏定义时，看可以进行层层定义</p></blockquote><h3 id="三、带参数的宏定义"><a href="#三、带参数的宏定义" class="headerlink" title="三、带参数的宏定义"></a>三、带参数的宏定义</h3><p>​             带参数的宏定义： #define 宏名(参数表) 字符串<br>​             例如S（2,3）使用2,3分别替换参数a,b<br>​             S（2,3） = 2* 3;<br>​             注意： 如果写成S（1+1,3），最终的结果是 1+1*3，原因是宏定义是在预处理的过程，程序只会执行<br>​            </p><h3 id="四、宏定义和函数之间的区别"><a href="#四、宏定义和函数之间的区别" class="headerlink" title="四、宏定义和函数之间的区别"></a>四、宏定义和函数之间的区别</h3><blockquote><p>1、宏定义直接进行了简单的字符替换，而函数是先计算实参表达式的值<br>2、函数调用在程序运行时进行的，分配临时内存，宏展开是在预编译时进行的，没有分配内存，没有值传递，没有返回值<br>3、宏的参数没有类型这个说法，只有替换的的方式<br>4、宏展开只占用编译时间，不占用程序的运行时间</p></blockquote><p>​    </p><h3 id="五、文件包含：将另外一个文件的内容包含到本文件中"><a href="#五、文件包含：将另外一个文件的内容包含到本文件中" class="headerlink" title="五、文件包含：将另外一个文件的内容包含到本文件中"></a>五、文件包含：将另外一个文件的内容包含到本文件中</h3><blockquote><p>1、一般而言 通常用于.h文件<br>2、 我们把宏定义，函数说明，其他的include命令，全局变量的外部声明等存放到头文件中<br>3、 文件包含可以嵌套的<br>4、 #include 使用&lt;&gt; 表示从系统目录当中寻找头文件， “”表示先从当前目录寻找，没有则从系统目录中寻找</p></blockquote><h3 id="六、条件编译：对一部分内容，指定编译条件"><a href="#六、条件编译：对一部分内容，指定编译条件" class="headerlink" title="六、条件编译：对一部分内容，指定编译条件"></a>六、条件编译：对一部分内容，指定编译条件</h3><blockquote><p>1、#ifdef  标识符 程序段1 [#else 程序段2] #endif </p><p>​                ===&gt; 当标识符被定义过(#ifdef) 则对程序段1进行编译，否则程序段2进行编译，#else可以没有<br>2、#ifndef 标识符 程序段1 [#else 程序段2] #endif </p><p>​                ===&gt; 当标识符没有被定义过(#ifndef) 则对程序段1进行编译，否则程序段2进行编译，#else可以没有<br>3、#if 表达式 程序段1 #else 程序段 #endif</p><p>好处：</p><p>1、条件编译可以降低目标文件的长度 </p><p>2、可以处理跨平台的问题</p></blockquote><p><a href="https://blog.csdn.net/wucz122140729/article/details/98477404">更多内容</a></p></font>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C++基础05)-函数</title>
      <link href="/2023/080116144.html"/>
      <url>/2023/080116144.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="C-基础05：函数"><a href="#C-基础05：函数" class="headerlink" title="C++基础05：函数"></a>C++基础05：函数</h2><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;&#x2F;&#x2F; 函数的内容&#x2F;&#x2F; 注意的是，如果函数写在了main函数的下面，则找不到该函数，需要事先声明&#x2F;&#x2F; 如果将函数写在main函数的上面，则表示函数以及定义并声明了&#x2F;&#x2F; 函数的定义&#x2F;&#x2F; 一个大项目通常不会存放到一个源文件里，因此一个C项目由一个或多个源文件组成&#x2F;&#x2F; 这些函数可以分别放到源文件里，被所有源文件公用&#x2F;&#x2F; 程序从main函数开始，也是从main函数当中结束&#x2F;&#x2F; 函数通常分为两类： 库函数  自定义函数&#x2F;&#x2F; 1、定义一个函数时，形式参数在函数被调用前不分配内存，调用的时候会分配内存，函数调用结束之后，形式参数的内存就被释放了，所以形式参数只能在函数内部使用&#x2F;&#x2F; 2、在函数调用的时候，实参的值自动赋值给了形参&#x2F;&#x2F; 3、在C语言当中，实参变量对形参变量的传递是“值传递”，也就是单向传递，只能由实参传递到形参&#x2F;&#x2F;  即完成函数的调用之后，原本的实参的值并没有改变&#x2F;&#x2F; 函数的调用&#x2F;&#x2F; C语言所编写的函数，只能返回一个值&#x2F;&#x2F; 函数的调用有三种方式： 1 单独作为一条语句 2 函数出现在一个表达式中 3 函数作为另一个函数的实参&#x2F;&#x2F; 函数的声明&#x2F;&#x2F; 1、可以将函数写在main函数的前面，表示函数的定义并声明&#x2F;&#x2F; 2、我们必须将函数的声明放到任何源代码文件的具体函数之前（一般就是源代码的开头），才能保证这些函数调用其他函数时，被调用的函数OK&#x2F;&#x2F; 3、函数的声明：&#x2F;&#x2F; 类型标识符 函数名(形参列表);&#x2F;&#x2F; 函数的嵌套定义&#x2F;&#x2F; C语言当中，不允许在一个函数当中定义另外一个函数&#x2F;&#x2F; C语言允许函数的嵌套调用&#x2F;&#x2F; 函数的递归调用： 在函数体内调用自己&#x2F;&#x2F; 函数的递归调用过程当中，只有一个函数结束之后，函数的局部变量占用的内存才会被释放int getJieCheng(int number) &#123;&#x2F;&#x2F; 1*2*3*4*5if (number &#x3D;&#x3D; 1) &#123;&#x2F;&#x2F; 递归函数必须要有结束条件return 1;&#125;return number * getJieCheng(number-1);&#x2F;&#x2F; 递归关系&#125;&#x2F;&#x2F; 个人理解的递归函数的编写&#x2F;&#x2F; 在函数体内要确定所有的边界条件，通常是特殊情况我们能确定的&#x2F;&#x2F; 然后使用其中的递归条件直接重复调用函数（汉诺塔，斐波拉契数列，棋盘可移动位置）&#x2F;&#x2F; 递归的优缺点&#x2F;&#x2F; 代码精简，但是如果调用的层数太深，可能会导致调用栈（内存）溢出&#x2F;&#x2F; 效率和性能都不高，无法保证深层次的运行效率&#x2F;&#x2F; 数组元素&#x2F;数组名作为函数的参数&#x2F;&#x2F; 数组元素作为函数的参数： int a[5]; a[1] &#x3D; 1; getJieCheng(a[1]);&#x2F;&#x2F; 数组名作为函数的参数： 数组名是数组的首地址，传递的是数组的首地址,数组可以是多维数组&#x2F;&#x2F; 此时，函数中的形参，也必须是数组名，或者是数组指针&#x2F;&#x2F; 注意：数组名作为函数参数时，不是“值传递（形参会分配内存）”，不是单向传递，而是把实参数组的开始地址传递给了形参数组（不会分配内存了）&#x2F;&#x2F; 这样，两个数组就会共同占用同一块内存。这个叫地址传递，也就是说，形参数组的值发生变化，会导致&#x2F;&#x2F; 实参数组当中的值发生变化void testShuZuCanShu(int temp[]) &#123;&#x2F;&#x2F; 数组名作为参数，调用这个函数，temp和tempA是同一块地址temp[0] &#x3D; 100;temp[1] &#x3D; 100;&#x2F;&#x2F; 这个函数的形参temp的大小可以声明大小，但是没有作用，函数会将实参的数组的地址给你&#x2F;&#x2F; temp[100],实际上temp只能调用tempA[2]两个内容，其他的内存块temp无法控制，不该temp管，不属于temp&#x2F;&#x2F; temp[5] &#x3D; 100; 这一块的内存不属于temp&#125;&#x2F;&#x2F; 全局变量和局部变量&#x2F;&#x2F; 一：局部变量： 在一个函数内部定义的变量，只能在函数内使用&#x2F;&#x2F; 在main函数中的变量，只能在main函数中，即便main函数调用了其他函数&#x2F;&#x2F; 不同函数当中的相同名字变量，互不相关&#x2F;&#x2F; 二：全局变量： 在函数外定义的变量，成为全局变量（外部变量）&#x2F;&#x2F; 优点：不同的函数之间可以进行交互，而不需要形参实参的传递&#x2F;&#x2F; 缺点：不便于阅读，全局变量会一直存在于系统当中，会占用内存&#x2F;&#x2F; extern int a; 表示在外部某个位置定义了变量a 这里不分配内存，只是做声明：后面有地方定义了a变量int a;&#x2F;&#x2F; 1、外部变量的定义只有有一次，会分配内存，定义时可以进行初始化&#x2F;&#x2F; 2、外部变量的声明很有很多次，声明不会分配内存&#x2F;&#x2F; 3、在同一个源文件当中，如果出现的全局变量和局部变量同名，在局部变量的作用范围内，全局变量不起作用&#x2F;&#x2F; 变量的存储类别&#x2F;&#x2F; 从变量存在的时间（生存周期）角度来划分，可以将变量分为： &#x2F;&#x2F;  静态存储变量和动态存储变量，从而引出了静态存储方式和动态存储方式&#x2F;&#x2F;  静态存储变量： 在程序运行期间分配固定存储空间的变量，这种分配变量的方式为静态存储方式&#x2F;&#x2F;  动态存储变量： 在程序运行期间根据需要进行动态分配存储空间的变量，这种分配方式为动态存储方式&#x2F;&#x2F;全局变量（在函数的外部定义的）放在静态存储区中，程序开始执行的时候给全局变量分配存储区﹐程序执行完毕后释放这些存储区&#x2F;&#x2F;在程序执行过程中它们占据固定的存储单元，而不是动态的分配和释放。&#x2F;&#x2F;动态存储区中存哪些数据呢?&#x2F;&#x2F; a)函数形参，函数形参被看做是局部变量。&#x2F;&#x2F; b)局部变量，比如函数内定义的一些变量。&#x2F;&#x2F; c)函数调用时现场的一些数据和返回地址等。&#x2F;&#x2F; 一般来讲，这些数据在函数调用开始时分配存储空间﹐函数调用完毕，这些空间就祊释放掉了。这种分配和释放，我们就认为是动态的&#x2F;&#x2F; 如果你两次调用同—个函蠢，分配给此函数的局部变里等等的存储空间地址可能就是不同的。&#x2F;&#x2F; 局部变量的存储方式&#x2F;&#x2F; 1.传统情形，函数的局部变量，在函数被调用时分配内存，函数结束时释放内存&#x2F;&#x2F; 2.局部静态变量，用static修饰的变量&#x2F;&#x2F; 其能够保留原值，占用的存储单元不释放，在下一次调用函数时，该值是上次调用结束时的值void testStatic() &#123;&#x2F;&#x2F; 静态局部变量&#x2F;&#x2F; 在静态存储区分配内存，程序整个运行期间不释放&#x2F;&#x2F; 局部静态变量是在编译时赋予初值的，只赋予一次&#x2F;&#x2F; 定义局部静态变量，不赋予初值会被赋值为0，普通的局部变量不赋予初值是一个不确定的值static int t &#x3D; 10;t++;printf(&quot;%d\n&quot;, t);&#125;&#x2F;&#x2F; 全局变量跨文件使用的方式&#x2F;&#x2F; 场景： 在a.cpp文件中定义的变量，在b.cpp文件当中使用&#x2F;&#x2F; 使用extern 做一个外部变量的说明（b.cpp文件的头部），说明这个变量是其他文件当中被定义过的外部变量，本文件不需要再进行申明&#x2F;&#x2F; 使用方法：在b.cpp头部写： extern int temp;&#x2F;&#x2F; 值得注意的是：在b.cpp文件中改变了变量的值，则在a.cpp文件中也会改变&#x2F;&#x2F; 如果只想在a.cpp文件当中使用变量temp.只需要在a.cpp文件： static int temp; 就无法在其他文件中使用&#x2F;&#x2F; 函数的跨文件使用&#x2F;&#x2F; 根据文件是否能被其他源文件使用，函数被分为内部函数和外部函数&#x2F;&#x2F; 在函数的申明前面加上static，表示为内部函数，只能在本文件当中使用&#x2F;&#x2F; 两个文件中的函数均加static，尽管在不同的文件当中出现同名函数，也不会影响&#x2F;&#x2F; 在函数前面加上extern 表示为外部函数 表示从外部来的函数&#x2F;&#x2F; 总结static的用法&#x2F;&#x2F; 1、在函数内部的一个变量前加上static，表示该变量只能存在于静态存储区  &#x2F;&#x2F; 在函数编译的时候初始化，如果不给初值，则被赋予初值Wie0，并且下次调用时，维持上次调用结束时的值&#x2F;&#x2F; 2、在全局变量前加上static，表示该变量只能在本文件中使用，不能在其他文件中使用&#x2F;&#x2F; 3、在函数定义前面加static，表示该函数只能在本文件中使用，不能在其他文件中使用int main() &#123;&#x2F;&#x2F; 测试递归函数printf(&quot;%d\n&quot;, getJieCheng(5));&#x2F;&#x2F; 测试数组名作为函数的参数，地址传递的过程int tempA[2] &#x3D; &#123; 1,2 &#125;;testShuZuCanShu(tempA);printf(&quot;%d-%d\n&quot;, tempA[0], tempA[1]);&#x2F;&#x2F; 此时两个元素均变成了100&#x2F;&#x2F; 测试程序块内的局部变量&#x2F;&#x2F; 用大括号编写一段代码，大括号内的叫复合语句，&#123;&#125;内的变量只能在复合语句中使用，复合语句也叫程序块int a &#x3D; 0; int b &#x3D; 1;&#123;int c &#x3D; a + b;&#x2F;&#x2F; 程序块内可以使用main函数内定义的变量，a,b可以使用&#125;&#x2F;&#x2F; c &#x3D; a + b; 程序显示未定义的标识符c 一旦离开程序块，c的内存就被释放了&#x2F;&#x2F; 测试静态局部变量的存储testStatic(); &#x2F;&#x2F; 输出三次为： 11 12 13testStatic();testStatic();return 0;&#125;</code></pre><p>[更多内容](<a href="https://www.runoob.com/cprogramming/c-functions.html">C 函数 | 菜鸟教程 (runoob.com)</a>)</p></font>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C++基础04)-数组</title>
      <link href="/2023/080116143.html"/>
      <url>/2023/080116143.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="C-基础04：数组"><a href="#C-基础04：数组" class="headerlink" title="C++基础04：数组"></a>C++基础04：数组</h2><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;&#x2F;&#x2F; C语言标准输入输出#include &lt;iostream&gt;&#x2F;&#x2F; C++标准输入输出using namespace std;&#x2F;&#x2F; 数组int main() &#123;&#x2F;&#x2F; 一维数组&#x2F;&#x2F; 一维数组的定义，引用，初始化&#x2F;&#x2F; 构造类型： 把基本的数据类型进行一定的变换得到的数据类型&#x2F;&#x2F;int array[10]; &#x2F;&#x2F; 表示数组有10个元素，下标从0开始到9&#x2F;&#x2F; 注意的是：数组的大小是固定的，不允许改变的&#x2F;&#x2F; 一维数组的初始化int array[10] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,0 &#125;;&#x2F;&#x2F; 在定义数组时，可以不指定数组的长度int a[] &#x3D; &#123; 1,2,3,4,5 &#125;;&#x2F;&#x2F; 此时系统认为数组a的长度是5，即int a[5] &#x3D;&#123;1,2,3,4,5&#125;int b[10] &#x3D; &#123; 1,2,3,4,5 &#125;;  &#x2F;&#x2F; 实际上的数组内容是1234500000printf(&quot;数组a的长度是%d&quot;, sizeof(a) &#x2F; sizeof(a[0])); &#x2F;&#x2F; 二维数组int c[2][3] &#x3D; &#123; &#123;1,2,3&#125;,&#123;2,3,4&#125; &#125;; &#x2F;&#x2F; 定义了一个2行3列的数组，值：1,2,3,2,3,4&#x2F;&#x2F; c[0][0],c[0][1],c[0][2]&#x2F;&#x2F; c[1][0],c[1][1],c[1][1]&#x2F;&#x2F; 在卡断点调试的过程中，shift + f9表示查看元素的内容&#x2F;&#x2F; 字符数 组: 用来存放字符的数组char d[10] &#x3D; &#123;&#39;1&#39;,&#39;2&#39;,&#39;e&#39;,&#39;s&#39;&#125;;&#x2F;&#x2F; 若没有完整的初始化字符数组，则后面的会使用\0来填充，相当于用0来填充，实际上\0的asicc码&#x2F;&#x2F; 字符和字符串的结束标记&#x2F;&#x2F; 使用字符串来初始化字符数组char e[] &#x3D; &#123; &quot;ILoveChina&quot; &#125;;&#x2F;&#x2F; 一般而言，字符串的末尾会有一个\0，叫做字符串结束标记char f[] &#x3D; &#123; &#39;I&#39;,&#39;L&#39;,&#39;o&#39;,&#39;v&#39;,&#39;e&#39;,&#39;C&#39;,&#39;h&#39;,&#39;i&#39;,&#39;n&#39;,&#39;a&#39; &#125;;printf(&quot;%d&quot;, sizeof(e) &#x2F; sizeof(e[0]));&#x2F;&#x2F; 数组的长度是11位，最后一位是\0&#x2F;&#x2F; 如果一个字符串的第11个字符是\0,那么它的有效长度是10个&#x2F;&#x2F; 也就是说，字符串遇到\0就意味着字符串的结束printf(&quot;%s\n&quot;,e);&#x2F;&#x2F;ILoveChina烫烫烫烫烫 printf(&quot;%s\n&quot;, f);&#x2F;&#x2F;ILoveChina&#x2F;&#x2F; 出现上述的原因是，e字符数组结尾没有出现00，导致关于继续打印出后面内容当中的内容，直到程序遇到00终止,打印字符串的时候不会打印\0&#x2F;&#x2F; 而字符数组f是字符串初始化的，字符串本身结尾就有结束标记\0，因此打印的时候字符结束就是00.不会出错&#x2F;&#x2F; 使用vs可以查看内容的地址，e字符数组后面的输出是无效字符的for (int i &#x3D; 0; i &lt; sizeof(e) &#x2F; sizeof(e[0]); i++) &#123;printf(&quot;%c\n&quot;, e[i]);&#x2F;&#x2F; 最后会多出一个空的出来，就是字符串结束标记\0，asicc码是0&#125;&#x2F;&#x2F; 注意： e和 &amp;e都被认为是数组的起始地址printf(&quot;%d\n&quot;, e);printf(&quot;%d\n&quot;, &amp;e);&#x2F;&#x2F; 在C语言当中，一维字符数组可以看做是字符串&#x2F;&#x2F; puts(字符数组)：将字符串数组输出到屏幕当中&#x2F;&#x2F; gets(字符数组): 从键盘上输入一个字符串数组char str[100] &#x3D; &quot;IloveUESTC&quot;;puts(str);&#x2F;&#x2F; IloveUESTC&#x2F;&#x2F; strcat(字符数组1，字符数组2)，两个字符数组相拼接&#x2F;&#x2F; 过程： 将字符数组1的最后一个字符\0去掉，然后将字符数组2的内容拼接过去，字符数组1的大小足够大能够容纳两个字符数组的大小&#x2F;&#x2F; strcpy(字符数组1，字符数组2)，右边那个拷贝到左边去&#x2F;&#x2F; 字符数组2的大小  大于等于 字符数组1的大小&#x2F;&#x2F; (5)strcmp(字符出1，字符出2》&#x2F;&#x2F; 比较字符串1和字符串2，也算一个常用函数&#x2F;&#x2F; a)如果学符串1等于享符串2, 该函教返回0·&#x2F;&#x2F; b)如果字符串1 &lt; 享符串2，返回一个正整数 &gt; 0 的数 1 &#x2F;&#x2F; c)如果字符串2 &gt; 字符串2, 返回一个负整数 &lt; 0 的数 -1&#x2F;&#x2F; 注意的是：在比较两个字符串之间的大小时,不要直接使用名称&#x2F;&#x2F; strcmp(str1,str2);  使用这种方式， str1 &#x3D;&#x3D; str2 这种方式比较的是地址&#x2F;&#x2F; strlen(字符数组)： 计算字符数组的长度，但是没有\0  返回的是字节数&#x2F;&#x2F; str &#x3D; &quot;我love你&quot;；可以查看字节数，验证了一个汉字是两个字节return 0;&#125;</code></pre></font>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C++基础03)-程序的基本结构和语句</title>
      <link href="/2023/073116142.html"/>
      <url>/2023/073116142.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="C-基础03：程序的基本结构和语句"><a href="#C-基础03：程序的基本结构和语句" class="headerlink" title="C++基础03：程序的基本结构和语句"></a>C++基础03：程序的基本结构和语句</h2><pre class="language-c++" data-language="c++"><code class="language-c++"># include&lt;iostream&gt;# include&lt;stdio.h&gt;#include&quot;temp2.h&quot;using namespace std;&#x2F;&#x2F; C语言程序的基本结构和语句int main() &#123;&#x2F;&#x2F; 一、C语言的语句和程序的基本结构&#x2F;&#x2F; 1, 语句的分类&#x2F;&#x2F;（1）控制语句：共有9中控制语句if for while do break switch continue goto return&#x2F;&#x2F;     （2）函数调用语句： 例如printf(&quot;Hello Word!&quot;);&#x2F;&#x2F;（3）表达式语句：  例如 int a; a &#x3D; 5; a +&#x3D; 5;&#x2F;&#x2F;     （4）复合语句：使用&#123;&#125;括起来的语句&#x2F;&#x2F;   凡是满足该条件的，&#123;&#125;内的语句都会执行&#x2F;&#x2F;   &#123;&#x2F;&#x2F;int a &#x3D; 1;&#x2F;&#x2F;......&#x2F;&#x2F;&#125;   大括号后面不用加分号&#x2F;&#x2F; 2、程序的三种基本结构&#x2F;&#x2F;（1）顺序结构&#x2F;&#x2F;（2）选择结构if-else&#x2F;多分支选择结构switch&#x2F;&#x2F;（3）循环结构&#x2F;&#x2F;当型循环结构：先判断是否可行，再进行操作&#x2F;&#x2F;直到型循环结构：先执行操作，再判断条件是否可行，要强调的是，至少会执行一次操作&#x2F;&#x2F; &#x2F;&#x2F; 3、赋值语句的特殊写法&#x2F;&#x2F;赋值语句可以编写在其他语句当中。&#x2F;&#x2F; 多分支语句switchint i &#x3D; 3;&#x2F;&#x2F;switch当中为表达式，一般是整型变量或表达式&#x2F;&#x2F;每一个case之间的顺序没有影响&#x2F;&#x2F; 每一个case后的值不相同，不要忘记break（包括default后面），会导致继续执行后续语句，直到遇到break或整个switch执行完毕&#x2F;&#x2F; 每一个case下面多行语句均会执行，如果没有加&#123;&#125;，每一条语句任会执行。&#x2F;&#x2F; switch可以没有default。switch (i) &#123;case 1: &#123;printf(&quot;i&#x3D;%d&quot;, 1);&#x2F;&#x2F; ...break;&#125;case 2:case 3:case 4: &#123;printf(&quot;i&#x3D;2或3或4&quot;);&#x2F;&#x2F; ...break;&#125;case 5: &#123;printf(&quot;i&#x3D;%d&quot;, 5);&#x2F;&#x2F; ...break;&#125;default: &#123;printf(&quot;i&#x3D;%d&quot;, -1);break;&#125;&#125;&#x2F;&#x2F; 一、数据的输出&#x2F;&#x2F; #include 表示预编译命令，作用是将一些文件包含到用户的源文件当中来，也就是将某些文件的内容原封不动的粘贴到#include这个位置&#x2F;&#x2F; #include&lt;stdio.h&gt; 标准的I&#x2F;O库，.h被称为头文件（head）&#x2F;&#x2F; #include&quot;stdio.h&quot; 也是可行的。&#x2F;&#x2F; 上述的两种包含头文件的区别： &lt;&gt;:表示从系统的目录当中进行查找文件，像加入标准的库文件使用&lt;&gt;，如果系统中没有，当前目录有，则会显示错误&#x2F;&#x2F;&quot;&quot;:表示首先从当前的目录文件进行查找文件，如果找不到，再到系统当中查找。&quot;&quot;用于对自己编写的头文件的引入，让系统优先使用当前目录当中的定义的头文件char a, b, c;a &#x3D; &#39;F&#39;;b &#x3D; &#39;T&#39;;c &#x3D; &#39;A&#39;;putchar(a);putchar(b);putchar(c);&#x2F;&#x2F; printf输出格式&#x2F;&#x2F; %d: 以10进制输出一个数字&#x2F;&#x2F; %o: 以8进制输出一个数字&#x2F;&#x2F; %x: 以16进制输出一个数字&#x2F;&#x2F; %u: 以10进制输出一个无符号数字&#x2F;&#x2F; %c: 输出一个字符&#x2F;&#x2F; %s: 输出一个字符串&#x2F;&#x2F; %f: 输出一个实数&#x2F;&#x2F; %.nf: 输出一个实数，保留n位小数&#x2F;&#x2F; 数据的输入与输出char temp;temp &#x3D; getchar();&#x2F;&#x2F; 从键盘上输入一个字符putchar(temp);&#x2F;&#x2F; 输出字符temp&#x2F;&#x2F; scanf: 格式化输入函数，用来输入任何类型的多个数据&#x2F;&#x2F; scanf(格式控制，地址表列)&#x2F;&#x2F; 当输入回车时，表示输入结束int x, y, z;scanf_s(&quot;%d%d%d&quot;, &amp;x, &amp;y, &amp;z);&#x2F;&#x2F;  表示在xyz的地址上输入数据,多个输入之间可以使用空格，回车，tab间隔printf(&quot;%d%d%d&quot;, x, y, z);&#x2F;&#x2F; 关系运算符（&lt;&gt;!&#x3D;&lt;&#x3D;&gt;&#x3D;）与关系表达式&#x2F;&#x2F; 关系运算符的优先级  小于  算数运算符的优先级&#x2F;&#x2F; 关系运算符的值，只有真和假两种&#x2F;&#x2F; 逻辑运算符与逻辑表达式(||或   &amp;&amp;与   !非)&#x2F;&#x2F; 用逻辑运算符 将 关系表达式 连接起来的，就是逻辑表达式&#x2F;&#x2F; 逻辑表达式的值也是真或假&#x2F;&#x2F; || &amp;&amp; ： 双目运算符&#x2F;&#x2F; ! : 单目运算符&#x2F;&#x2F; 注意的是： 千万不要把&amp;&amp; 和|| 写成 &amp; |,不会报错，但是逻辑会出错&#x2F;&#x2F; 逻辑运算符求值问题:在逻辑表达式求解中，不是所有逻辑运算符都会被执行，&#x2F;&#x2F; 只有在必须执行下一个逻辑运算符才能求出表达式的结果时，才执行该运算符。&#x2F;&#x2F; a &amp;&amp; b &amp;&amp; c 只有a为真(非0)）才需要判断b，只有a, b都为真才判断c·只要a为假，就不必判断b。如果a为真，b为假，就不必判断cint m &#x3D; 0;if ((3 &gt; 5) &amp;&amp; (m &#x3D; 8)) &#123;&#x2F;&#x2F; 此时，后面m&#x3D;8这一表达式不会被执行printf(&quot;%d&quot;,m);&#125;&#x2F;&#x2F; 循环结构语句（当型循环结构，直到型循环结构）&#x2F;&#x2F; goto, while, do while, for&#x2F;&#x2F; goto语句: 无条件转向语句，用来跳转到某个程序位置进行执行&#x2F;&#x2F; goto 语句标号； （其中语句标号是一个标识符，只能有字母数字下划线组成，且第一个字符必须是字母或下划线）&#x2F;&#x2F; goto语句的用途： （1） 与if语句构成循环结构&#x2F;&#x2F;（2）从循环结构当中跳出，不推荐，破坏循环结构&#x2F;&#x2F; 案例： 使用goto语句实现1~100的加法int number &#x3D; 1; int sum &#x3D; 0;loop:if (number &lt;&#x3D; 100) &#123;sum &#x3D; sum + number;number++;goto loop;&#125;printf(&quot;%d&quot;, sum);&#x2F;&#x2F; 不建议使用goto语句&#x2F;&#x2F; while 循环结构(先判断循环条件，再执行内容)&#x2F;&#x2F; do while循环结构（直到型循环结构）&#x2F;&#x2F; 直到型循环结构，至少会执行循环体内的语句一次&#x2F;&#x2F; for:循环语句&#x2F;&#x2F; for语司的一般形式 :&#x2F;&#x2F; for(表达式1 : 表达式2; 表达式3)内嵌的语句&#x2F;&#x2F; 执行过程:&#x2F;&#x2F; a)先求解表达式1的值&#x2F;&#x2F; b)再求解表达式2的值的&#x2F;&#x2F; b.1)若表达式2的值为真，则执行for语句中指定的内嵌语句﹐再求解表达式3的值，反复循环步骤2，一直到表达式2的值为假。&#x2F;&#x2F; b.2)若表达式2的值为假，则整个for循环结束，程序流程跳转到for语句后边的语句去执行。&#x2F;&#x2F; 这里我们要特别注意:表达式1的值只会被执行一次。&#x2F;&#x2F; for语句最简单也是最常用的引用形式 :&#x2F;&#x2F; for (循环变里赋初值 : 循环变里结束条件; 循环变里增加值）内嵌的语句&#x2F;&#x2F; 特殊情况&#x2F;&#x2F; 1、第一个表达式可以省略，但是循环变量需要在事前所定义&#x2F;&#x2F; 2、第二个表达式可以省略，需要在循环体内编写break语句用于中断循环。&#x2F;&#x2F; 3、第三个表达式可以省略，i++可以放在循环体内&#x2F;&#x2F; goto while do while for 循环之间的比较&#x2F;&#x2F; 1、大多数情况下，这些循环之间是可以互相替换的&#x2F;&#x2F; 2、不建议使用goto语句,会破坏结构化程序设计&#x2F;&#x2F; 3、while和for循环是先判断后执行语句，dowhile是先执行语句，后进行判断&#x2F;&#x2F; 4、三种循环语句都可以使用break中断循环&#x2F;&#x2F; 5、continue表示退出当前循环，会进行后续的循环内容&#x2F;&#x2F; 6、 continue只能够用于while do while for三种结构体当中，不能用于switch    &#x2F;&#x2F; 7、contine表示跳过下面未执行的语句，接着执行下一次循环    for(int i &#x3D; 1; i&lt;&#x3D;100;i++)&#123;        if(i % 3 &#x3D;&#x3D; 0)&#123;            continue;        &#125;        printf(&quot;%d &quot;, i);    &#125;return 0;&#125;</code></pre></font>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C++基础02)-数据类型，运算符，表达式</title>
      <link href="/2023/073116141.html"/>
      <url>/2023/073116141.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="C-基础02：数据类型"><a href="#C-基础02：数据类型" class="headerlink" title="C++基础02：数据类型"></a>C++基础02：数据类型</h2><pre class="language-c++" data-language="c++"><code class="language-c++"># include&lt;iostream&gt;# include&lt;stdio.h&gt;using namespace std;int main() &#123;&#x2F;&#x2F; 数据的变化&#x2F;&#x2F; 八进制的数： 012&#x2F;&#x2F; 十六进制的数： 0X&#x2F;&#x2F; 可以直接进行赋值，将这些数字赋值给声明的变量 int demo &#x3D; 0x12;&#x2F;&#x2F; &#x2F;&#x2F; sizeof&quot;运算符&quot;表示的是，一个类型的变量所占用的内存字节数cout &lt;&lt; (sizeof(int)) &lt;&lt; endl;&#x2F;&#x2F; 4cout &lt;&lt; (sizeof(short)) &lt;&lt; endl;&#x2F;&#x2F; 2cout &lt;&lt; (sizeof(long)) &lt;&lt; endl;&#x2F;&#x2F; 4cout &lt;&lt; (sizeof(char)) &lt;&lt; endl;&#x2F;&#x2F; 1cout &lt;&lt; (sizeof(string)) &lt;&lt; endl;&#x2F;&#x2F; 28&#x2F;&#x2F; 实型变量&#x2F;&#x2F; float : 单精度变量，一般提供7位有效数字（保守估计6位），这是随着机器而定的&#x2F;&#x2F; double：双精度变量，一般提供15到16位有效数字（保守估计15位），这是随着机器而定的float a &#x3D; 1111111.111;double b &#x3D; 1111111.111;char c &#x3D; &#39;a&#39;;char cc &#x3D; 98;cout &lt;&lt; c &lt;&lt; endl;cout &lt;&lt; cc &lt;&lt; endl;&#x2F;&#x2F; 注意的是char类型的数据，单引号当中只能是一个字符，如果写多个字符，这个变量的值取最后一位字符（验证所得）char x &#x3D; &#39;w1&#39;;cout &lt;&lt; x &lt;&lt; endl;float f1 &#x3D; 0.5;float f2 &#x3D; 0.51;cout &lt;&lt; f1 &lt;&lt; f2 &lt;&lt; endl;&#x2F;&#x2F; 使用调试模式（鼠标）移动查看f1f2的变量的值的大小，会发现f2为0.50999999。在存储的时候是采用二进制的方式进行存储&#x2F;&#x2F; char c &#x3D; &#39;a&#39; 和 string c &#x3D;  &quot;a&quot; 的区别在于：char类型存储时，仅仅存储一个字符a，但是对于string类型，存储的是字符a和‘\0’表示结束符&#x2F;&#x2F; 数据之间的混合运算，都是低维度数据类型向高维度数据类型的转换，然后再进行运算double d &#x3D; 3.1415;int dd &#x3D; 3;cout &lt;&lt; d + dd &lt;&lt; endl;&#x2F;&#x2F; 首先int类型的dd转化为double类型，然后运算return 0;&#125;</code></pre><blockquote><p>\ ?    在书写连续多个问好时使用，防止他们被解析成三字母词<br>\ ’    用于表示字符常量‘<br>\ “    用于表示字符常量”<br>\ \    用于表示一个反斜杠，防止他被解译成一个转义字符<br>\ a    警告字符，表示：蜂鸣<br>\ b    退格符<br>\ f    换页符<br>\ n    换行符<br>\ r    回车符<br>\ t    水平制表符<br>\ v    垂直制表符<br>\ ddd    三位八进制数代表一个ASCII字符（ddd是一个八进制数字）<br>\ xdd    二为十六进制数代表一个ASCII字符（dd是一个十六进制数字）</p></blockquote><p>注意的是：‘a’ 和 “a” 之间的区别： 前者是字符常量，一个字符，后者是字符串常量，字符串常量后面通常由一个字符串结束符 /0 ，因此后者是两个字符。</p><p><img src="/2023/073116141/%E5%AD%97%E7%AC%A6%E5%9E%8B%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt></p><p>注意的是：通常不同的数据类型之间的转换，系统首先会统一数据类型，然后进行运算</p><blockquote><p>int + double = double</p><p>int + char = int</p><p>系统是由低向高进行转换的</p></blockquote><p>转化的规则如下：</p><p><img src="/2023/073116141/%E5%AD%97%E7%AC%A6%E9%97%B4%E8%BD%AC%E6%8D%A2%E7%9A%84%E8%A7%84%E5%88%99.png" alt></p><p>运算符的类别如下图所示：</p><p><img src="/2023/073116141/%E8%BF%90%E7%AE%97%E7%AC%A6.png" alt></p><p>运算符的意义：</p><p><img src="/2023/073116141/%E8%BF%90%E7%AE%97%E7%AC%A6%E6%84%8F%E4%B9%891.png" alt></p><p><img src="/2023/073116141/%E8%BF%90%E7%AE%97%E7%AC%A6%E6%84%8F%E4%B9%892.png" alt></p><p>注意：</p><blockquote><p>1、取余运算符的两边要求是整数</p><p>2、两个整数相除，系统会舍弃最后的小数部分</p><p>3、类型转化的方式有两种：</p><p>​        （1）自动类型转换： 系统自动进行转换</p><p>​        （2）强制类型转化： 自动类型转换无法满足要求，就使用强制类型转换。</p><p>4、自增和自减运算符：只能用于变量，不能用于常量或表达式</p><p>​        i++ 先用后加   ++i 先加后用</p><p>5、赋值表达式也是有值的，例如int a = 1; 则a = 5的值是5，等于等号右边的值</p><p>6、逗号表达式的优先级最低，（表达式1，表达式2），最终的结果是表达式2的值，（3,5）的值是5。 int a; a = 3 * 5 , a * 4   首先a=3 * 5 = 15, 然后计算15， a * 4  结果是a * 4 = 15 * 4 = 60</p></blockquote><p>（补充。。。）</p></font>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(C++基础01)-安装环境及C++简介</title>
      <link href="/2023/073116140.html"/>
      <url>/2023/073116140.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="C-的发展历史"><a href="#C-的发展历史" class="headerlink" title="C++的发展历史"></a>C++的发展历史</h2><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3></font>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs231n-卷积神经网络</title>
      <link href="/2022/112316139.html"/>
      <url>/2022/112316139.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、课程大纲"><a href="#一、课程大纲" class="headerlink" title="一、课程大纲"></a>一、课程大纲</h3><blockquote><ul><li>结构概述</li><li>用来构建卷积神经网络的各种层<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;卷积层<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;汇聚层<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;归一化层<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;全连接层<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将全连接层转化成卷积层</li><li>卷积神经网络的结构<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;层的排列规律<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;层的尺寸设置规律<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;案例学习（LeNet / AlexNet / ZFNet / GoogLeNet / VGGNet）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;计算上的考量</li></ul></blockquote><h3 id="二、卷积神经网络（CNNs-ConvNets）"><a href="#二、卷积神经网络（CNNs-ConvNets）" class="headerlink" title="二、卷积神经网络（CNNs / ConvNets）"></a>二、卷积神经网络（CNNs / ConvNets）</h3><p>卷积神经网络和上一章讲的常规神经网络非常相似：它们都是由神经元组成，神经元中有具有学习能力的权重和偏差。<strong>每个神经元都得到一些输入数据，进行内积运算后再进行激活函数运算</strong>。整个网络依旧是一个<strong>可导的评分函数</strong>：该函数的<strong>输入是原始的图像像素</strong>，<strong>输出是不同类别的评分</strong>。在最后一层（往往是<strong>全连接层</strong>），网络依旧有一个损失函数（比如SVM或Softmax），并且在神经网络中我们实现的各种技巧和要点依旧适用于卷积神经网络。</p><p>那么有哪些地方变化了呢？卷积神经网络的结构基于一个假设，即输入数据是图像，基于该假设，我们就向结构中添加了一些特有的性质。这些特有属性使得前向传播函数实现起来更高效，并且大幅度降低了网络中参数的数量。</p><h3 id="三、结构概述"><a href="#三、结构概述" class="headerlink" title="三、结构概述"></a>三、结构概述</h3><p><strong>回顾：常规神经网络</strong>。在上一章中，神经网络的输入是一个向量，然后在一系列的隐层中对它做变换。每个隐层都是由若干的神经元组成，每个神经元都与前一层中的所有神经元连接。但是在一个隐层中，神经元相互独立不进行任何连接。最后的全连接层被称为“输出层”，在分类问题中，它输出的值被看做是不同类别的评分值。</p><p>常规神经网络对于大尺寸图像效果不尽人意。在CIFAR-10中，图像的尺寸是32x32x3（宽高均为32像素，3个颜色通道），因此，对应的的常规神经网络的第一个隐层中，每一个单独的全连接神经元就有32x32x3=3072个权重。这个数量看起来还可以接受，但是很显然这个全连接的结构不适用于更大尺寸的图像。举例说来，一个尺寸为200x200x3的图像，会让神经元包含200x200x3=120,000个权重值。而网络中肯定不止一个神经元，那么参数的量就会快速增加！显而易见，这种全连接方式效率低下，大量的参数也很快会导致网络过拟合。</p><p>神经元的三维排列。卷积神经网络针对输入全部是图像的情况，将结构调整得更加合理，获得了不小的优势。与常规神经网络不同，卷积神经网络的各层中的神经元是3维排列的：<strong>宽度、高度和深度</strong>（这里的深度指的是激活数据体的第三个维度，而不是整个网络的深度，整个网络的深度指的是网络的层数）。举个例子，CIFAR-10中的图像是作为卷积神经网络的输入，该数据体的维度是32x32x3（宽度，高度和深度）。我们将看到，层中的神经元将只与前一层中的一小块区域连接，而不是采取全连接方式。对于用来分类CIFAR-10中的图像的卷积网络，其最后的输出层的维度是1x1x10，因为在卷积神经网络结构的最后部分将会把全尺寸的图像压缩为包含分类评分的一个向量，向量是在深度方向排列的。下面是例子：<br><img src="/2022/112316139/demo.png" alt></p><p>左边是一个3层的神经网络。右边是一个卷积神经网络，图例中网络将它的神经元都排列成3个维度（宽、高和深度）。卷积神经网络的每一层都将3D的输入数据变化为神经元3D的激活数据并输出。在这个例子中，红色的输入层装的是图像，所以它的宽度和高度就是图像的宽度和高度，它的深度是3（代表了红、绿、蓝3种颜色通道）。</p><blockquote><ul><li>卷积神经网络是由层组成的。每一层都有一个简单的API：用一些含或者不含参数的可导的函数，将输入的3D数据变换为3D的输出数据。</li></ul></blockquote><h3 id="四、用来构建卷积网络的各种层"><a href="#四、用来构建卷积网络的各种层" class="headerlink" title="四、用来构建卷积网络的各种层"></a>四、用来构建卷积网络的各种层</h3><p>一个简单的卷积神经网络是由各种层按照顺序排列组成，网络中的每个层使用一个可以微分的函数将激活数据从一个层传递到另一个层。卷积神经网络主要由三种类型的层构成：<strong>卷积层</strong>，<strong>汇聚（Pooling）层</strong>和<strong>全连接层（全连接层和常规神经网络中的一样）</strong>。通过将这些层叠加起来，就可以构建一个完整的卷积神经网络。</p><p>网络结构例子：这仅仅是个概述，下面会更详解的介绍细节。一个用于CIFAR-10图像数据分类的卷积神经网络的结构可以是[输入层-卷积层-ReLU层-汇聚层-全连接层]。细节如下：</p><blockquote><ul><li>输入[32x32x3]存有图像的原始像素值，本例中图像宽高均为32，有3个颜色通道。</li><li>卷积层中，神经元与输入层中的一个局部区域相连，每个神经元都计算自己与输入层相连的小区域与自己权重的内积。卷积层会计算所有神经元的输出。如果我们使用12个滤波器（也叫作核），得到的输出数据体的维度就是[32x32x12]。</li><li>ReLU层将会逐个元素地进行激活函数操作，比如使用以0为阈值的max(0, x)作为激活函数。该层对数据尺寸没有改变，还是[32x32x12]。</li><li>汇聚层在在空间维度（宽度和高度）上进行降采样（downsampling）操作，数据尺寸变为[16x16x12]。</li><li>全连接层将会计算分类评分，数据尺寸变为[1x1x10]，其中10个数字对应的就是CIFAR-10中10个类别的分类评分值。正如其名，全连接层与常规神经网络一样，其中每个神经元都与前一层中所有神经元相连接。</li></ul></blockquote><p>由此看来，卷积神经网络一层一层地将图像从原始像素值变换成最终的分类评分值。其中有的层含有参数，有的没有。具体说来，卷积层和全连接层（CONV/FC）对输入执行变换操作的时候，不仅会用到激活函数，还会用到很多参数（神经元的突触权值和偏差）。而ReLU层和汇聚层则是进行一个固定不变的函数操作。卷积层和全连接层中的参数会随着梯度下降被训练，这样卷积神经网络计算出的分类评分就能和训练集中的每个图像的标签吻合了。</p><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><blockquote><ul><li>简单案例中卷积神经网络的结构，就是一系列的层将输入数据变换为输出数据（比如分类评分）。</li><li>卷积神经网络结构中有几种不同类型的层（目前最流行的有卷积层、全连接层、ReLU层和汇聚层）。</li><li>每个层的输入是3D数据，然后使用一个可导的函数将其变换为3D的输出数据。</li><li>有的层有参数，有的没有（卷积层和全连接层有，ReLU层和汇聚层没有）。</li><li>有的层有额外的超参数，有的没有（卷积层、全连接层和汇聚层有，ReLU层没有）。</li></ul></blockquote><p><img src="/2022/112316139/demo2.png" alt></p><p>一个卷积神经网络的激活输出例子。左边的输入层存有原始图像像素，右边的输出层存有类别分类评分。在处理流程中的每个激活数据体是铺成一列来展示的。因为对3D数据作图比较困难，我们就把每个数据体切成层，然后铺成一列显示。最后一层装的是针对不同类别的分类得分，这里只显示了得分最高的5个评分值和对应的类别。完整的网页演示在我们的课程主页。本例中的结构是一个小的VGG网络，VGG网络后面会有讨论。</p><h3 id="五、卷积层"><a href="#五、卷积层" class="headerlink" title="五、卷积层"></a>五、卷积层</h3><h5 id="卷积层是构建卷积神经网络的核心层，它产生了网络中大部分的计算量。"><a href="#卷积层是构建卷积神经网络的核心层，它产生了网络中大部分的计算量。" class="headerlink" title="卷积层是构建卷积神经网络的核心层，它产生了网络中大部分的计算量。"></a>卷积层是构建卷积神经网络的核心层，它产生了网络中大部分的计算量。</h5><p>概述和直观介绍：首先讨论的是，在没有大脑和生物意义上的神经元之类的比喻下，卷积层到底在计算什么。卷积层的参数是有一些可学习的滤波器集合构成的。每个滤波器在空间上（宽度和高度）都比较小，但是深度和输入数据一致。举例来说，卷积神经网络第一层的一个典型的滤波器的尺寸可以是5x5x3（宽高都是5像素，深度是3是因为图像应为颜色通道，所以有3的深度）。在前向传播的时候，让每个滤波器都在输入数据的宽度和高度上滑动（更精确地说是卷积），然后计算整个滤波器和输入数据任一处的内积。当滤波器沿着输入数据的宽度和高度滑过后，会生成一个2维的激活图（activation map），激活图给出了在每个空间位置处滤波器的反应。直观地来说，网络会让滤波器学习到当它看到某些类型的视觉特征时就激活，具体的视觉特征可能是某些方位上的边界，或者在第一层上某些颜色的斑点，甚至可以是网络更高层上的蜂巢状或者车轮状图案。</p><p>在每个卷积层上，我们会有一整个集合的滤波器（比如12个），每个都会生成一个不同的二维激活图。将这些激活映射在深度方向上层叠起来就生成了输出数据。</p><p><strong>局部连接</strong>：在处理图像这样的高维度输入时，让每个神经元都与前一层中的所有神经元进行全连接是不现实的。相反，我们让每个神经元只与输入数据的一个局部区域连接。该连接的空间大小叫做神经元的感受野（receptive field），它的尺寸是一个超参数（其实就是滤波器的空间尺寸）。在深度方向上，这个连接的大小总是和输入量的深度相等。需要再次强调的是，我们对待空间维度（宽和高）与深度维度是不同的：连接在空间（宽高）上是局部的，但是在深度上总是和输入数据的深度一致。</p><p><strong>例</strong>1：假设输入数据体尺寸为[32x32x3]（比如CIFAR-10的RGB图像），如果感受野（或滤波器尺寸）是5x5，那么卷积层中的每个神经元会有输入数据体中[5x5x3]区域的权重，共5x5x3=75个权重（还要加一个偏差参数）。注意这个连接在深度维度上的大小必须为3，和输入数据体的深度一致。</p><p><strong>例2</strong>：假设输入数据体的尺寸是[16x16x20]，感受野尺寸是3x3，那么卷积层中每个神经元和输入数据体就有3x3x20=180个连接。再次提示：在空间上连接是局部的（3x3），但是在深度上是和输入数据体一致的（20）。</p><p><img src="/2022/112316139/conv.png" alt></p><p>左边：红色的是输入数据体（比如CIFAR-10中的图像），蓝色的部分是第一个卷积层中的神经元。卷积层中的每个神经元都只是与输入数据体的一个局部在空间上相连，但是与输入数据体的所有深度维度全部相连（所有颜色通道）。在深度方向上有多个神经元（本例中5个），它们都接受输入数据的同一块区域（<strong>感受野相同</strong>）。至于深度列的讨论在下文中有。</p><p>右边：神经网络章节中介绍的神经元保持不变，它们还是计算权重和输入的内积，然后进行激活函数运算，只是它们的连接被限制在一个局部空间。</p><p><strong>空间排列</strong>：上文讲解了卷积层中每个神经元与输入数据体之间的连接方式，但是尚未讨论输出数据体中神经元的数量，以及它们的排列方式。3个超参数控制着输出数据体的尺寸：<strong>深度（depth）</strong>，<strong>步长（stride）</strong>和<strong>零填充（zero-padding）</strong>。下面是对它们的讨论：</p><blockquote><ul><li>首先，输出数据体的深度是一个超参数：它和使用的滤波器的数量一致，而每个滤波器在输入数据中寻找一些不同的东西。举例来说，如果第一个卷积层的输入是原始图像，那么在深度维度上的不同神经元将可能被不同方向的边界，或者是颜色斑点激活。我们将这些沿着深度方向排列、感受野相同的神经元集合称为深度列（depth column），也有人使用纤维（fibre）来称呼它们。</li><li>其次，在滑动滤波器的时候，必须指定步长。当步长为1，滤波器每次移动1个像素。当步长为2（或者不常用的3，或者更多，这些在实际中很少使用），滤波器滑动时每次移动2个像素。这个操作会让输出数据体在空间上变小。</li><li>在下文可以看到，有时候将输入数据体用0在边缘处进行填充是很方便的。这个零填充（zero-padding）的尺寸是一个超参数。零填充有一个良好性质，即可以控制输出数据体的空间尺寸（最常用的是用来保持输入数据体在空间上的尺寸，这样输入和输出的宽高都相等）。</li></ul></blockquote><p>输出数据体在空间上的尺寸可以通过输入数据体尺寸（W），卷积层中神经元的感受野尺寸（F），步长（S）和零填充的数量（P）的函数来计算。（译者注：这里假设输入数组的空间形状是正方形，即高度和宽度相等）输出数据体的空间尺寸为(W-F +2P)/S+1。比如输入是7x7，滤波器是3x3，步长为1，填充为0，那么就能得到一个5x5的输出。如果步长为2，输出就是3x3。下面是例子：<br><img src="/2022/112316139/conv2.png" alt></p><p>空间排列的图示。在本例中只有一个空间维度（x轴），神经元的感受野尺寸F=3，输入尺寸W=5，零填充P=1。左边：神经元使用的步长S=1，所以输出尺寸是(5-3+2)/1+1=5。右边：神经元的步长S=2，则输出尺寸是(5-3+2)/2+1=3。注意当步长S=3时是无法使用的，因为它无法整齐地穿过数据体。从等式上来说，因为(5-3+2)=4是不能被3整除的。</p><p>本例中，神经元的权重是[1,0,-1]，显示在图的右上角，偏差值为0。这些权重是被所有黄色的神经元共享的（参数共享的内容看下文相关内容）。</p><p>使用零填充：在上面左边例子中，注意输入维度是5，输出维度也是5。之所以如此，是因为感受野是3并且使用了1的零填充。如果不使用零填充，则输出数据体的空间维度就只有3，因为这就是滤波器整齐滑过并覆盖原始数据需要的数目。一般说来，当步长S = 1时，零填充的值是P = (F - 1) / 2，这样就能保证输入和输出数据体有相同的空间尺寸。这样做非常常见，在介绍卷积神经网络的结构的时候我们会详细讨论其原因。</p></font>]]></content>
      
      
      <categories>
          
          <category> cs231n </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs231n </tag>
            
            <tag> 课程笔记 </tag>
            
            <tag> 卷积神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs231n-神经网络2</title>
      <link href="/2022/112216136.html"/>
      <url>/2022/112216136.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、本节大纲"><a href="#一、本节大纲" class="headerlink" title="一、本节大纲"></a>一、本节大纲</h3><blockquote><ul><li>设置数据和模型<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据预处理<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;权重初始化<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;批量归一化（Batch Normalization）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;正则化（L2/L1/Maxnorm/Dropout）</li><li>损失函数</li><li>小结</li></ul></blockquote><h3 id="二、设置数据和模型"><a href="#二、设置数据和模型" class="headerlink" title="二、设置数据和模型"></a>二、设置数据和模型</h3><p>在上一节中介绍了神经元的模型，它在计算内积后进行非线性激活函数计算，神经网络将这些神经元组织成各个层。这些做法共同定义了评分函数（score function）的新形式，该形式是从前面线性分类章节中的简单线性映射发展而来的。具体来说，神经网络就是进行了一系列的线性映射与非线性激活函数交织的运算。本节将讨论更多的算法设计选项，比如数据预处理，权重初始化和损失函数。</p><h3 id="三、数据预处理"><a href="#三、数据预处理" class="headerlink" title="三、数据预处理"></a>三、数据预处理</h3><p>关于数据预处理我们有3个常用的符号，数据矩阵X，假设其尺寸是[N x D]（N是数据样本的数量，D是数据的维度）。</p><p><strong>均值减法（Mean subtraction）</strong>是预处理最常用的形式。它对数据中每个独立特征减去平均值，从几何上可以理解为在每个维度上都将数据云的中心都迁移到原点。在numpy中，该操作可以通过代码X -= np.mean(X, axis=0)实现。而对于图像，更常用的是对所有像素都减去一个值，可以用X -= np.mean(X)实现，也可以在3个颜色通道上分别操作。</p><p><strong>归一化（Normalization）</strong>是指将数据的所有维度都归一化，使其数值范围都近似相等。有两种常用方法可以实现归一化。第一种是先对数据做零中心化（zero-centered）处理，然后每个维度都除以其标准差，实现代码为<strong>X /= np.std(X, axis=0)</strong>。第二种方法是对每个维度都做归一化，使得每个维度的最大和最小值是1和-1。这个预处理操作只有在确信不同的输入特征有不同的数值范围（或计量单位）时才有意义，但要注意预处理操作的重要性几乎等同于学习算法本身。在图像处理中，由于像素的数值范围几乎是一致的（都在0-255之间），所以进行这个额外的预处理步骤并不是很必要。</p><p><img src="/2022/112216136/normalization.png" alt></p><p>一般数据预处理流程：左边：原始的2维输入数据。中间：在每个维度上都减去平均值后得到零中心化数据，现在数据云是以原点为中心的。右边：每个维度都除以其标准差来调整其数值范围。红色的线指出了数据各维度的数值范围，在中间的零中心化数据的数值范围不同，但在右边归一化数据中数值范围相同。</p><p>PCA和白化（Whitening）是另一种预处理形式。在这种处理中，先对数据进行零中心化处理，然后计算协方差矩阵，它展示了数据中的相关性结构。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 假设输入数据矩阵X的尺寸为[N x D]</span>X <span class="token operator">-=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>X<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 对数据进行零中心化(重要)</span>cov <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">.</span>T<span class="token punctuation">,</span> X<span class="token punctuation">)</span> <span class="token operator">/</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 得到数据的协方差矩阵</span></code></pre><p>数据协方差矩阵的第(i, j)个元素是数据第i个和第j个维度的协方差。具体来说，该矩阵的对角线上的元素是方差。还有，协方差矩阵是对称和半正定的。我们可以对数据协方差矩阵进行SVD（奇异值分解）运算。</p><pre class="language-python" data-language="python"><code class="language-python">U<span class="token punctuation">,</span>S<span class="token punctuation">,</span>V <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>svd<span class="token punctuation">(</span>cov<span class="token punctuation">)</span></code></pre><p>U的列是特征向量，S是装有奇异值的1维数组（因为cov是对称且半正定的，所以S中元素是特征值的平方）。为了去除数据相关性，将已经零中心化处理过的原始数据投影到特征基准上：</p><pre class="language-python" data-language="python"><code class="language-python">Xrot <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>U<span class="token punctuation">)</span> <span class="token comment"># 对数据去相关性</span></code></pre><p>注意U的列是标准正交向量的集合（范式为1，列之间标准正交），所以可以把它们看做标准正交基向量。因此，投影对应x中的数据的一个旋转，旋转产生的结果就是新的特征向量。如果计算Xrot的协方差矩阵，将会看到它是对角对称的。np.linalg.svd的一个良好性质是在它的返回值U中，特征向量是按照特征值的大小排列的。我们可以利用这个性质来对数据降维，只要使用前面的小部分特征向量，丢弃掉那些包含的数据没有方差的维度。 这个操作也被称为主成分分析（ Principal Component Analysis 简称PCA）降维：</p><pre class="language-python" data-language="python"><code class="language-python">Xrot_reduced <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span> U<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Xrot_reduced 变成 [N x 100]</span></code></pre><p>经过上面的操作，将原始的数据集的大小由[N x D]降到了[N x 100]，留下了数据中包含最大方差的100个维度。通常使用PCA降维过的数据训练线性分类器和神经网络会达到非常好的性能效果，同时还能节省时间和存储器空间。</p><p>最后一个在实践中会看见的变换是白化（whitening）。白化操作的输入是特征基准上的数据，然后对每个维度除以其特征值来对数值范围进行归一化。该变换的几何解释是：如果数据服从多变量的高斯分布，那么经过白化后，数据的分布将会是一个均值为零，且协方差相等的矩阵。该操作的代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 对数据进行白化操作:</span><span class="token comment"># 除以特征值 </span>Xwhite <span class="token operator">=</span> Xrot <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>S <span class="token operator">+</span> <span class="token number">1e-5</span><span class="token punctuation">)</span></code></pre><p>警告：夸大的噪声。注意分母中添加了1e-5（或一个更小的常量）来防止分母为0。该变换的一个缺陷是在变换的过程中可能会夸大数据中的噪声，这是因为它将所有维度都拉伸到相同的数值范围，这些维度中也包含了那些只有极少差异性(方差小)而大多是噪声的维度。在实际操作中，这个问题可以用更强的平滑来解决（例如：采用比1e-5更大的值）。</p><p><img src="/2022/112216136/normalization2.png" alt><br>PCA/白化。左边是二维的原始数据。中间：经过PCA操作的数据。可以看出数据首先是零中心的，然后变换到了数据协方差矩阵的基准轴上。这样就对数据进行了解相关（协方差矩阵变成对角阵）。右边：每个维度都被特征值调整数值范围，将数据协方差矩阵变为单位矩阵。从几何上看，就是对数据在各个方向上拉伸压缩，使之变成服从高斯分布的一个数据点分布。</p><p>我们可以使用CIFAR-10数据将这些变化可视化出来。CIFAR-10训练集的大小是50000x3072，其中每张图片都可以拉伸为3072维的行向量。我们可以计算[3072 x 3072]的协方差矩阵然后进行奇异值分解（比较耗费计算性能），那么经过计算的特征向量看起来是什么样子呢？<br><img src="/2022/112216136/normalization3.png" alt></p><p>最左：一个用于演示的集合，含49张图片。左二：3072个特征值向量中的前144个。靠前面的特征向量解释了数据中大部分的方差，可以看见它们与图像中较低的频率相关。第三张是49张经过了PCA降维处理的图片，展示了144个特征向量。这就是说，展示原始图像是每个图像用3072维的向量，向量中的元素是图片上某个位置的像素在某个颜色通道中的亮度值。而现在每张图片只使用了一个144维的向量，其中每个元素表示了特征向量对于组成这张图片的贡献度。为了让图片能够正常显示，需要将144维度重新变成基于像素基准的3072个数值。因为U是一个旋转，可以通过乘以U.transpose()[:144,:]来实现，然后将得到的3072个数值可视化。可以看见图像变得有点模糊了，这正好说明前面的特征向量获取了较低的频率。然而，大多数信息还是保留了下来。最右：将“白化”后的数据进行显示。其中144个维度中的方差都被压缩到了相同的数值范围。然后144个白化后的数值通过乘以U.transpose()[:144,:]转换到图像像素基准上。现在较低的频率（代表了大多数方差）可以忽略不计了，较高的频率（代表相对少的方差）就被夸大了。</p><p><strong>实践操作</strong>。在这个笔记中提到PCA和白化主要是为了介绍的完整性，实际上在卷积神经网络中并不会采用这些变换。然而对数据进行零中心化操作还是非常重要的，对每个像素进行归一化也很常见。</p><p><strong>常见错误</strong>。进行预处理很重要的一点是：任何预处理策略（比如数据均值）都只能在训练集数据上进行计算，算法训练完毕后再应用到验证集或者测试集上。例如，如果先计算整个数据集图像的平均值然后每张图片都减去平均值，最后将整个数据集分成训练/验证/测试集，那么这个做法是错误的。<strong>应该怎么做呢？应该先分成训练/验证/测试集，只是从训练集中求图片平均值，然后各个集（训练/验证/测试集）中的图像再减去这个平均值。</strong></p><h3 id="四、权重初始化"><a href="#四、权重初始化" class="headerlink" title="四、权重初始化"></a>四、权重初始化</h3><p>我们已经看到如何构建一个神经网络的结构并对数据进行预处理，但是在开始训练网络之前，还需要初始化网络的参数。</p><p><strong>错误：全零初始化</strong>。让我们从应该避免的错误开始。在训练完毕后，虽然不知道网络中每个权重的最终值应该是多少，但如果数据经过了恰当的归一化的话，就可以假设所有权重数值中大约一半为正数，一半为负数。这样，一个听起来蛮合理的想法就是把这些权重的初始值都设为0吧，因为在期望上来说0是最合理的猜测。这个做法错误的！因为如果网络中的每个神经元都计算出同样的输出，然后它们就会在反向传播中计算出同样的梯度，从而进行同样的参数更新。换句话说，如果权重被初始化为同样的值，神经元之间就失去了不对称性的源头。</p><p><strong>小随机数初始化</strong>。因此，权重初始值要非常接近0又不能等于0。解决方法就是将权重初始化为很小的数值，以此来打破对称性。其思路是：如果神经元刚开始的时候是随机且不相等的，那么它们将计算出不同的更新，并将自身变成整个网络的不同部分。小随机数权重初始化的实现方法是：<strong>W = 0.01 * np.random.randn(D,H)</strong>。其中<strong>randn函数</strong>是基于零均值和标准差的一个高斯分布（译者注：国内教程一般习惯称均值参数为期望）来生成随机数的。根据这个式子，每个神经元的权重向量都被初始化为一个随机向量，而这些随机向量又服从一个多变量高斯分布，这样在输入空间中，所有的神经元的指向是随机的。也可以使用均匀分布生成的随机数，但是从实践结果来看，对于算法的结果影响极小。</p><p><strong>警告</strong>。并不是小数值一定会得到好的结果。例如，一个神经网络的层中的权重值很小，那么在反向传播的时候就会计算出非常小的梯度（因为梯度与权重值是成比例的）。这就会很大程度上减小反向传播中的“梯度信号”，在深度网络中，就会出现问题。</p><p><strong>使用1/sqrt(n)校准方差</strong>。上面做法存在一个问题，随着输入数据量的增长，随机初始化的神经元的输出数据的分布中的方差也在增大。我们可以除以输入数据量的平方根来调整其数值范围，这样神经元输出的方差就归一化到1了。也就是说，建议将神经元的权重向量初始化为：<strong>w = np.random.randn(n) / sqrt(n)</strong>。其中n是输入数据的数量。这样就保证了网络中所有神经元起始时有近似同样的输出分布。实践经验证明，这样做可以提高收敛的速度。</p><p><img src="/2022/112216136/fangcha.png" alt></p><p><strong>稀疏初始化（Sparse initialization）</strong>。另一个处理非标定方差的方法是将所有权重矩阵设为0，但是为了打破对称性，每个神经元都同下一层固定数目的神经元随机连接（其权重数值由一个小的高斯分布生成）。一个比较典型的连接数目是10个。</p><p><strong>偏置（biases）的初始化</strong>。通常将偏置初始化为0，这是因为随机小数值权重矩阵已经打破了对称性。对于ReLU非线性激活函数，有研究人员喜欢使用如0.01这样的小数值常量作为所有偏置的初始值，这是因为他们认为这样做能让所有的ReLU单元一开始就激活，这样就能保存并传播一些梯度。然而，这样做是不是总是能提高算法性能并不清楚（有时候实验结果反而显示性能更差），所以通常还是使用0来初始化偏置参数。</p><p><strong>实践</strong>。当前的推荐是使用ReLU激活函数，并且使用<strong>w = np.random.randn(n) * sqrt(2.0/n)</strong>来进行权重初始化，关于这一点，这篇文章有讨论。</p><p><strong>批量归一化（Batch Normalization）</strong>。批量归一化是loffe和Szegedy最近才提出的方法，该方法减轻了如何合理初始化神经网络这个棘手问题带来的头痛：），其做法是让激活数据在训练开始前通过一个网络，网络处理数据使其服从标准高斯分布。因为归一化是一个简单可求导的操作，所以上述思路是可行的。在实现层面，应用这个技巧通常意味着全连接层（或者是卷积层，后续会讲）与激活函数之间添加一个BatchNorm层。对于这个技巧本节不会展开讲，因为上面的参考文献中已经讲得很清楚了，需要知道的是在神经网络中使用批量归一化已经变得非常常见。在实践中，使用了批量归一化的网络对于不好的初始值有更强的鲁棒性。最后一句话总结：批量归一化可以理解为在网络的每一层之前都做预处理，只是这种操作以另一种方式与网络集成在了一起。搞定！</p></font>]]></content>
      
      
      <categories>
          
          <category> cs231n </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> cs231n </tag>
            
            <tag> 课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs231n-神经网络1(下)</title>
      <link href="/2022/112216135.html"/>
      <url>/2022/112216135.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、本节大纲"><a href="#一、本节大纲" class="headerlink" title="一、本节大纲"></a>一、本节大纲</h3><blockquote><ul><li>1、不用大脑做类比的快速简介</li><li>2、单个神经元建模<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;生物动机和连接<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;作为线性分类器的单个神经元<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;常用的激活函数</li><li>3、神经网络结构<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;层组织<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前向传播计算例子<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表达能力<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设置层的数量和尺寸</li><li>4、小节</li><li>5、参考文献</li></ul></blockquote><h3 id="二、神经网络结构"><a href="#二、神经网络结构" class="headerlink" title="二、神经网络结构"></a>二、神经网络结构</h3><p><strong>将神经网络算法以神经元的形式图形化</strong>。神经网络被建模成神经元的集合，神经元之间以无环图的形式进行连接。也就是说，一些神经元的输出是另一些神经元的输入。在网络中是不允许循环的，因为这样会导致前向传播的无限循环。通常神经网络模型中神经元是分层的，而不是像生物神经元一样聚合成大小不一的团状。对于普通神经网络，最普通的层的类型是<strong>全连接层（fully-connected layer）</strong>。全连接层中的神经元与其前后两层的神经元是完全成对连接的，但是在同一个全连接层内的神经元之间没有连接。下面是两个神经网络的图例，都使用的全连接层：<br><img src="/2022/112216135/layer.png" alt></p><p>左边是一个2层神经网络，隐层由4个神经元（也可称为单元（unit））组成，输出层由2个神经元组成，输入层是3个神经元。右边是一个3层神经网络，两个含4个神经元的隐层。注意：层与层之间的神经元是全连接的，但是层内的神经元不连接。</p><p><strong>命名规则</strong>。<strong>当我们说N层神经网络的时候，我们没有把输入层算入</strong>。因此，单层的神经网络就是没有隐层的（输入直接映射到输出）。因此，有的研究者会说逻辑回归或者SVM只是单层神经网络的一个特例。研究者们也会使用人工神经网络（Artificial Neural Networks 缩写ANN）或者多层感知器（Multi-Layer Perceptrons 缩写MLP）来指代神经网络。很多研究者并不喜欢神经网络算法和人类大脑之间的类比，他们更倾向于用单元（unit）而不是神经元作为术语。</p><p><strong>输出层</strong>。和神经网络中其他层不同，输出层的神经元一般是不会有激活函数的（或者也可以认为它们有一个线性相等的激活函数）。这是因为最后的输出层大多用于表示分类评分值，因此是任意值的实数，或者某种实数值的目标数（比如在回归中）。</p><p><strong>确定网络尺寸</strong>。用来度量神经网络的尺寸的标准主要有两个：一个是神经元的个数，另一个是参数的个数，用上面图示的两个网络举例：</p><blockquote><ul><li>第一个网络有4+2=6个神经元（输入层不算），[3x4]+[4x2]=20个权重，还有4+2=6个偏置，共26个可学习的参数。</li><li>第二个网络有4+4+1=9个神经元，[3x4]+[4x4]+[4x1]=32个权重，4+4+1=9个偏置，共41个可学习的参数。</li></ul></blockquote><p>为了方便对比，现代卷积神经网络能包含约1亿个参数，可由10-20层构成（这就是深度学习）。然而，有效（effective）连接的个数因为参数共享的缘故大大增多。在后面的卷积神经网络内容中我们将学习更多。</p><h3 id="三、前向传播计算举例"><a href="#三、前向传播计算举例" class="headerlink" title="三、前向传播计算举例"></a>三、前向传播计算举例</h3><p>不断重复的矩阵乘法与激活函数交织。将神经网络组织成层状的一个主要原因，就是这个结构让神经网络算法使用矩阵向量操作变得简单和高效。用上面那个3层神经网络举例，输入是[3x1]的向量。一个层所有连接的强度可以存在一个单独的矩阵中。比如第一个隐层的权重W1是[4x3]，所有单元的偏置储存在b1中，尺寸[4x1]。这样，每个神经元的权重都在W1的一个行中，于是矩阵乘法np.dot(W1, x)就能计算该层中所有神经元的激活数据。类似的，W2将会是[4x4]矩阵，存储着第二个隐层的连接，W3是[1x4]的矩阵，用于输出层。完整的3层神经网络的前向传播就是简单的3次矩阵乘法，其中交织着激活函数的应用。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 一个3层神经网络的前向传播:</span>f <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 激活函数(用的sigmoid)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 含3个数字的随机输入向量(3x1)</span>h1 <span class="token operator">=</span> f<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>W1<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span> <span class="token comment"># 计算第一个隐层的激活数据(4x1)</span>h2 <span class="token operator">=</span> f<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>W2<span class="token punctuation">,</span> h1<span class="token punctuation">)</span> <span class="token operator">+</span> b2<span class="token punctuation">)</span> <span class="token comment"># 计算第二个隐层的激活数据(4x1)</span>out <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>W3<span class="token punctuation">,</span> h2<span class="token punctuation">)</span> <span class="token operator">+</span> b3 <span class="token comment"># 神经元输出(1x1)</span></code></pre><p>在上面的代码中，W1，W2，W3，b1，b2，b3都是网络中可以学习的参数。注意x并不是一个单独的列向量，而可以是一个批量的训练数据（其中每个输入样本将会是x中的一列），所有的样本将会被并行化的高效计算出来。注意神经网络最后一层通常是没有激活函数的（例如，在分类任务中它给出一个实数值的分类评分）。</p><blockquote><ul><li>全连接层的前向传播一般就是先进行一个矩阵乘法，然后加上偏置并运用激活函数。</li></ul></blockquote><h3 id="四、表达能力"><a href="#四、表达能力" class="headerlink" title="四、表达能力"></a>四、表达能力</h3><p>理解具有全连接层的神经网络的一个方式是：可以认为它们定义了一个由一系列函数组成的函数族，网络的权重就是每个函数的参数。如此产生的问题是：该函数族的表达能力如何？存在不能被神经网络表达的函数吗？</p><p><font color="#00FF">换句话说，神经网络可以近似任何连续函数</font></p><h3 id="五、设置层的数量和尺寸"><a href="#五、设置层的数量和尺寸" class="headerlink" title="五、设置层的数量和尺寸"></a>五、设置层的数量和尺寸</h3><p>在面对一个具体问题的时候该确定网络结构呢？到底是不用隐层呢？还是一个隐层？两个隐层或更多？每个层的尺寸该多大？</p><p>首先，要知道当我们增加层的数量和尺寸时，网络的容量上升了。即神经元们可以合作表达许多复杂函数，所以表达函数的空间增加。例如，如果有一个在二维平面上的二分类问题。我们可以训练3个不同的神经网络，每个网络都只有一个隐层，但是每层的神经元数目不同：</p><p><img src="/2022/112216135/convDemo.png" alt><br>更大的神经网络可以表达更复杂的函数。数据是用不同颜色的圆点表示他们的不同类别，决策边界是由训练过的神经网络做出的。你可以在<a href="http://cs.stanford.edu/people/karpathy/convnetjs/demo/classify2d.html">ConvNetsJS demo</a>上练练手。</p><p>在上图中，可以看见有更多神经元的神经网络可以表达更复杂的函数。然而这既是优势也是不足，优势是可以分类更复杂的数据，不足是可能造成对训练数据的过拟合。过拟合（Overfitting）是网络对数据中的噪声有很强的拟合能力，而没有重视数据间（假设）的潜在基本关系。举例来说，有20个神经元隐层的网络拟合了所有的训练数据，但是其代价是把决策边界变成了许多不相连的红绿区域。而有3个神经元的模型的表达能力只能用比较宽泛的方式去分类数据。它将数据看做是两个大块，并把个别在绿色区域内的红色点看做噪声。在实际中，这样可以在测试数据中获得更好的泛化（generalization）能力。</p><p>基于上面的讨论，看起来如果数据不是足够复杂，则似乎小一点的网络更好，因为可以防止过拟合。然而并非如此，防止神经网络的过拟合有很多方法（L2正则化，dropout和输入噪音等），后面会详细讨论。在实践中，使用这些方法来控制过拟合比减少网络神经元数目要好得多。</p><p>不要减少网络神经元数目的主要原因在于小网络更难使用梯度下降等局部方法来进行训练：虽然小型网络的损失函数的局部极小值更少，也比较容易收敛到这些局部极小值，但是这些最小值一般都很差，损失值很高。相反，大网络拥有更多的局部极小值，但就实际损失值来看，这些局部极小值表现更好，损失更小。因为神经网络是非凸的，就很难从数学上研究这些特性。即便如此，还是有一些文章尝试对这些目标函数进行理解，例如The Loss Surfaces of Multilayer Networks这篇论文。在实际中，你将发现如果训练的是一个小网络，那么最终的损失值将展现出多变性：某些情况下运气好会收敛到一个好的地方，某些情况下就收敛到一个不好的极值。从另一方面来说，如果你训练一个大的网络，你将发现许多不同的解决方法，但是最终损失值的差异将会小很多。这就是说，所有的解决办法都差不多，而且对于随机初始化参数好坏的依赖也会小很多。</p><p>重申一下，正则化强度是控制神经网络过拟合的好方法。看下图结果：<br><img src="/2022/112216135/convlamuda.png" alt></p><p>需要记住的是：不应该因为害怕出现过拟合而使用小网络。相反，应该进尽可能使用大网络，然后使用正则化技巧来控制过拟合。</p><h3 id="六、小结"><a href="#六、小结" class="headerlink" title="六、小结"></a>六、小结</h3><blockquote><ul><li>介绍了生物神经元的粗略模型；</li><li>讨论了几种不同类型的激活函数，其中ReLU是最佳推荐；</li><li>介绍了神经网络，神经元通过全连接层连接，层间神经元两两相连，但是层内神经元不连接；</li><li>理解了分层的结构能够让神经网络高效地进行矩阵乘法和激活函数运算；</li><li>理解了神经网络是一个通用函数近似器，但是该性质与其广泛使用无太大关系。之所以使用神经网络，是因为它们对于实际问题中的函数的公式能够某种程度上做出“正确”假设。</li><li>讨论了更大网络总是更好的这一事实。然而更大容量的模型一定要和更强的正则化（比如更高的权重衰减）配合，否则它们就会过拟合。在后续章节中我们讲学习更多正则化的方法，尤其是dropout。</li></ul></blockquote></font>]]></content>
      
      
      <categories>
          
          <category> cs231n </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> cs231n </tag>
            
            <tag> 课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs231n-神经网络1(上)</title>
      <link href="/2022/112216134.html"/>
      <url>/2022/112216134.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、本节大纲"><a href="#一、本节大纲" class="headerlink" title="一、本节大纲"></a>一、本节大纲</h3><blockquote><ul><li>1、不用大脑做类比的快速简介</li><li>2、单个神经元建模<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;生物动机和连接<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;作为线性分类器的单个神经元<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;常用的激活函数</li><li>3、神经网络结构<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;层组织<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前向传播计算例子<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表达能力<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设置层的数量和尺寸</li><li>4、小节</li><li>5、参考文献</li></ul></blockquote><h3 id="二、快速简介"><a href="#二、快速简介" class="headerlink" title="二、快速简介"></a>二、快速简介</h3><p>在不诉诸大脑的类比的情况下，依然是可以对神经网络算法进行介绍的。在线性分类一节中，在给出图像的情况下，是使用s = Wx来计算不同视觉类别的评分，其中W是一个矩阵，是一个x输入列向量，它包含了图像的全部像素数据。在使用数据库CIFAR-10的案例中，x是一个[3072x1]的列向量，W是一个[10x3072]的矩阵，所以输出的评分是一个包含10个分类评分的向量。</p><p>神经网络算法则不同，它的计算公式是s = W_2 * max(0, W_1 * x)。其中的W_1含义是这样的：举个例子来说，它可以是一个[100x3072]的矩阵，其作用是将图像转化为一个100维的过渡向量。函数max(0, -)是非线性的，它会作用到每个元素。这个非线性函数有多种选择，后续将会学到。但这个形式是一个最常用的选择，它就是简单地设置阈值，将所有小于0的值变成0。最终，矩阵W_2的尺寸是[10x100]，因此将得到10个数字，这10个数字可以解释为是分类的评分。注意非线性函数在计算上是至关重要的，如果略去这一步，那么两个矩阵将会合二为一，对于分类的评分计算将重新变成关于输入的线性函数。这个非线性函数就是改变的关键点。参数W_1, W_2将通过随机梯度下降来学习到，他们的梯度在反向传播过程中，通过链式法则来求导计算得出。</p><h3 id="三、神经元建模"><a href="#三、神经元建模" class="headerlink" title="三、神经元建模"></a>三、神经元建模</h3><p>一个神经元前向传播的实例代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Neuron</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># ... </span>  <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 假设输入和权重是1-D的numpy数组，偏差是一个数字 """</span>    cell_body_sum <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>inputs <span class="token operator">*</span> self<span class="token punctuation">.</span>weights<span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>bias    firing_rate <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">+</span> math<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>cell_body_sum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># sigmoid激活函数</span>    <span class="token keyword">return</span> firing_rate</code></pre><p>换句话说，每个神经元都对它的输入和权重进行点积，然后加上偏差，最后使用非线性函数（或称为激活函数）。本例中使用的是sigmoid函数。在本节的末尾部分将介绍不同激活函数的细节。</p><h3 id="四、常用的激活函数"><a href="#四、常用的激活函数" class="headerlink" title="四、常用的激活函数"></a>四、常用的激活函数</h3><p>每个激活函数（或非线性函数）的输入都是一个数字，然后对其进行某种固定的数学操作。下面是在实践中可能遇到的几种激活函数：</p><p><img src="/2022/112216134/sigmoid.png" alt></p><p>Sigmoid。sigmoid非线性函数的数学公式是σ(x) = 1 / (1 + e ^ -x)，函数图像如上图的左边所示。在前一节中已经提到过，它输入实数值并将其“挤压”到0到1范围内。更具体地说，很大的负数变成0，很大的正数变成1。在历史上，sigmoid函数非常常用，这是因为它对于神经元的激活频率有良好的解释：从完全不激活（0）到在求和后的最大频率处的完全饱和（saturated）的激活（1）。然而现在sigmoid函数已经不太受欢迎，实际很少使用了，这是因为它有两个主要缺点：</p><blockquote><ul><li>Sigmoid函数饱和使梯度消失。sigmoid神经元有一个不好的特性，就是当神经元的激活在接近0或1处时会饱和：在这些区域，梯度几乎为0。回忆一下，在反向传播的时候，这个（局部）梯度将会与整个损失函数关于该门单元输出的梯度相乘。因此，如果局部梯度非常小，那么相乘的结果也会接近零，这会有效地“杀死”梯度，几乎就有没有信号通过神经元传到权重再到数据了。还有，为了防止饱和，必须对于权重矩阵初始化特别留意。比如，如果初始化权重过大，那么大多数神经元将会饱和，导致网络就几乎不学习了。</li><li>Sigmoid函数的输出不是零中心的。这个性质并不是我们想要的，因为在神经网络后面层中的神经元得到的数据将不是零中心的。这一情况将影响梯度下降的运作，因为如果输入神经元的数据总是正数（比如在f = w ^ T + b中每个元素都x &gt; 0），那么关于w的梯度在反向传播的过程中，将会要么全部是正数，要么全部是负数（具体依整个表达式f而定）。这将会导致梯度下降权重更新时出现z字型的下降。然而，可以看到整个批量的数据的梯度被加起来后，对于权重的最终更新将会有不同的正负，这样就从一定程度上减轻了这个问题。因此，该问题相对于上面的神经元饱和问题来说只是个小麻烦，没有那么严重。</li></ul></blockquote><p><strong>Tanh</strong>。tanh非线性函数图像如上图右边所示。它将实数值压缩到[-1,1]之间。和sigmoid神经元一样，它也存在饱和问题，但是和sigmoid神经元不同的是，它的输出是零中心的。因此，在实际操作中，tanh非线性函数比sigmoid非线性函数更受欢迎。注意tanh神经元是一个简单放大的sigmoid神经元，具体说来就是：tanh(x) = 2σ(2x) - 1。</p><p><img src="/2022/112216134/relu.png" alt></p><p><strong>ReLU</strong>。在近些年ReLU变得非常流行。它的函数公式是f(x) = max(0, x)。换句话说，这个激活函数就是一个关于0的阈值（如上图左侧）。使用ReLU有以下一些优缺点：</p><blockquote><ul><li>优点：相较于sigmoid和tanh函数，ReLU对于随机梯度下降的收敛有巨大的加速作用（ Krizhevsky 等的论文指出有6倍之多）。据称这是由它的线性，非饱和的公式导致的。</li><li>优点：sigmoid和tanh神经元含有指数运算等耗费计算资源的操作，而ReLU可以简单地通过对一个矩阵进行阈值计算得到。</li><li>缺点：在训练的时候，ReLU单元比较脆弱并且可能“死掉”。举例来说，当一个很大的梯度流过ReLU的神经元的时候，可能会导致梯度更新到一种特别的状态，在这种状态下神经元将无法被其他任何数据点再次激活。如果这种情况发生，那么从此所以流过这个神经元的梯度将都变成0。也就是说，这个ReLU单元在训练中将不可逆转的死亡，因为这导致了数据多样化的丢失。例如，如果学习率设置得太高，可能会发现网络中40%的神经元都会死掉（在整个训练集中这些神经元都不会被激活）。通过合理设置学习率，这种情况的发生概率会降低。</li></ul></blockquote><p>了解： Leaky Relu / Maxout</p></font>]]></content>
      
      
      <categories>
          
          <category> cs231n </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> cs231n </tag>
            
            <tag> 课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs231n-反向传播</title>
      <link href="/2022/112216133.html"/>
      <url>/2022/112216133.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、本节大纲"><a href="#一、本节大纲" class="headerlink" title="一、本节大纲"></a>一、本节大纲</h3><blockquote><ul><li>1、简介</li><li>2、简单表达式和理解梯度</li><li>3、复合表达式，链式法则，反向传播</li><li>4、直观理解反向传播</li><li>5、模块：Sigmoid例子</li><li>6、反向传播实践：分段计算</li><li>7、回传流中的模式</li><li>8、用户向量化操作的梯度</li><li>9、小结</li></ul></blockquote></font>]]></content>
      
      
      <categories>
          
          <category> cs231n </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs231n </tag>
            
            <tag> 课程笔记 </tag>
            
            <tag> 反向传播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs231n-最优化(下)</title>
      <link href="/2022/112216132.html"/>
      <url>/2022/112216132.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、本节大纲"><a href="#一、本节大纲" class="headerlink" title="一、本节大纲"></a>一、本节大纲</h3><blockquote><p>1、损失函数可视化<br>2、最优化<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;策略#1：随机搜索<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;策略#2：随机局部搜索<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;策略#3：跟随梯度 译者注：上篇截止处<br>3、梯度计算<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用有限差值进行数值计算<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;微分计算梯度<br>4、梯度下降<br>5、小结</p></blockquote><h3 id="二、梯度计算"><a href="#二、梯度计算" class="headerlink" title="二、梯度计算"></a>二、梯度计算</h3><p>计算梯度有两种方法：一个是缓慢的近似方法（<strong>数值梯度法</strong>），但实现相对简单。另一个方法（<strong>分析梯度法</strong>）计算迅速，结果精确，但是实现时容易出错，且需要使用微分。现在对两种方法进行介绍：</p><h5 id="利用有限差值计算梯度"><a href="#利用有限差值计算梯度" class="headerlink" title="利用有限差值计算梯度"></a>利用有限差值计算梯度</h5><p>上节中的公式已经给出数值计算梯度的方法。下面代码是一个输入为函数f和向量x，计算f的梯度的通用函数，它返回函数f在点x处的梯度：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">eval_numerical_gradient</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">"""    一个f在x处的数值梯度法的简单实现  - f是只有一个参数的函数  - x是计算梯度的点  """</span>   fx <span class="token operator">=</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># 在原点计算函数值</span>  grad <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>  h <span class="token operator">=</span> <span class="token number">0.00001</span>  <span class="token comment"># 对x中所有的索引进行迭代</span>  it <span class="token operator">=</span> np<span class="token punctuation">.</span>nditer<span class="token punctuation">(</span>x<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'multi_index'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> op_flags<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'readwrite'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token keyword">not</span> it<span class="token punctuation">.</span>finished<span class="token punctuation">:</span>    <span class="token comment"># 计算x+h处的函数值</span>    ix <span class="token operator">=</span> it<span class="token punctuation">.</span>multi_index    old_value <span class="token operator">=</span> x<span class="token punctuation">[</span>ix<span class="token punctuation">]</span>    x<span class="token punctuation">[</span>ix<span class="token punctuation">]</span> <span class="token operator">=</span> old_value <span class="token operator">+</span> h <span class="token comment"># 增加h</span>    fxh <span class="token operator">=</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># 计算f(x + h)</span>    x<span class="token punctuation">[</span>ix<span class="token punctuation">]</span> <span class="token operator">=</span> old_value <span class="token comment"># 存到前一个值中 (非常重要)</span>    <span class="token comment"># 计算偏导数</span>    grad<span class="token punctuation">[</span>ix<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>fxh <span class="token operator">-</span> fx<span class="token punctuation">)</span> <span class="token operator">/</span> h <span class="token comment"># 坡度</span>    it<span class="token punctuation">.</span>iternext<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 到下个维度</span>  <span class="token keyword">return</span> grad</code></pre><p>根据上面的梯度公式，代码对所有维度进行迭代，在每个维度上产生一个很小的变化h，通过观察函数值变化，计算函数在该维度上的偏导数。最后，所有的梯度存储在变量grad中。<br><img src="/2022/112216132/tidu.png" alt></p><p>实践考量：注意在数学公式中，h的取值是趋近于0的，然而在实际中，用一个很小的数值（比如例子中的1e-5）就足够了。在不产生数值计算出错的理想前提下，你会使用尽可能小的h。还有，实际中用<strong>中心差值公式（centered difference formula）</strong>效果较好。细节可查看<a href="https://en.wikipedia.org/wiki/Numerical_differentiation">wiki</a>。</p><p>可以使用上面这个公式来计算任意函数在任意点上的梯度。下面计算权重空间中的某些随机点上，CIFAR-10损失函数的梯度：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 要使用上面的代码我们需要一个只有一个参数的函数</span><span class="token comment"># (在这里参数就是权重)所以也包含了X_train和Y_train</span><span class="token keyword">def</span> <span class="token function">CIFAR10_loss_fun</span><span class="token punctuation">(</span>W<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> L<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">,</span> W<span class="token punctuation">)</span>W <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3073</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.001</span> <span class="token comment"># 随机权重向量</span>df <span class="token operator">=</span> eval_numerical_gradient<span class="token punctuation">(</span>CIFAR10_loss_fun<span class="token punctuation">,</span> W<span class="token punctuation">)</span> <span class="token comment"># 得到梯度</span></code></pre><p>梯度告诉我们损失函数在每个维度上的斜率，以此来进行更新：</p><pre class="language-python" data-language="python"><code class="language-python">loss_original <span class="token operator">=</span> CIFAR10_loss_fun<span class="token punctuation">(</span>W<span class="token punctuation">)</span> <span class="token comment"># 初始损失值</span><span class="token keyword">print</span> <span class="token string">'original loss: %f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>loss_original<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token comment"># 查看不同步长的效果</span><span class="token keyword">for</span> step_size_log <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  step_size <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">**</span> step_size_log  W_new <span class="token operator">=</span> W <span class="token operator">-</span> step_size <span class="token operator">*</span> df <span class="token comment"># 权重空间中的新位置</span>  loss_new <span class="token operator">=</span> CIFAR10_loss_fun<span class="token punctuation">(</span>W_new<span class="token punctuation">)</span>  <span class="token keyword">print</span> <span class="token string">'for step size %f new loss: %f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>step_size<span class="token punctuation">,</span> loss_new<span class="token punctuation">)</span><span class="token comment"># 输出:</span><span class="token comment"># original loss: 2.200718</span><span class="token comment"># for step size 1.000000e-10 new loss: 2.200652</span><span class="token comment"># for step size 1.000000e-09 new loss: 2.200057</span><span class="token comment"># for step size 1.000000e-08 new loss: 2.194116</span><span class="token comment"># for step size 1.000000e-07 new loss: 2.135493</span><span class="token comment"># for step size 1.000000e-06 new loss: 1.647802</span><span class="token comment"># for step size 1.000000e-05 new loss: 2.844355</span><span class="token comment"># for step size 1.000000e-04 new loss: 25.558142</span><span class="token comment"># for step size 1.000000e-03 new loss: 254.086573</span><span class="token comment"># for step size 1.000000e-02 new loss: 2539.370888</span><span class="token comment"># for step size 1.000000e-01 new loss: 25392.214036</span></code></pre><p><strong>在梯度负方向上更新</strong>：在上面的代码中，为了计算<strong>W_new</strong>，要注意我们是向着梯度<strong>df</strong>的负方向去更新，这是因为我们希望损失函数值是降低而不是升高。</p><p><strong>步长的影响</strong>：梯度指明了函数在哪个方向是变化率最大的，但是没有指明在这个方向上应该走多远。在后续的课程中可以看到，选择<strong>步长（也叫作学习率）</strong>将会是神经网络训练中最重要（也是最头痛）的超参数设定之一。还是用蒙眼徒步者下山的比喻，这就好比我们可以感觉到脚朝向的不同方向上，地形的倾斜程度不同。但是该跨出多长的步长呢？不确定。如果谨慎地小步走，情况可能比较稳定但是进展较慢（这就是步长较小的情况）。相反，如果想尽快下山，那就大步走吧，但结果也不一定尽如人意。在上面的代码中就能看见反例，在某些点如果步长过大，反而可能越过最低点导致更高的损失值。</p><p><strong>效率问题</strong>：你可能已经注意到，计算数值梯度的复杂性和参数的量线性相关。在本例中有30730个参数，所以损失函数每走一步就需要计算30731次损失函数的梯度。现代神经网络很容易就有上千万的参数，因此这个问题只会越发严峻。显然这个策略不适合大规模数据，我们需要更好的策略。</p><h3 id="三、微分分析计算梯度"><a href="#三、微分分析计算梯度" class="headerlink" title="三、微分分析计算梯度"></a>三、微分分析计算梯度</h3><p>使用有限差值近似计算梯度比较简单，但缺点在于终究只是近似（因为我们对于h值是选取了一个很小的数值，但真正的梯度定义中h趋向0的极限），且耗费计算资源太多。第二个梯度计算方法是利用微分来分析，能得到计算梯度的公式（不是近似），用公式计算梯度速度很快，唯一不好的就是实现的时候容易出错。为了解决这个问题，在实际操作时常常将分析梯度法的结果和数值梯度法的结果作比较，以此来检查其实现的正确性，这个步骤叫做<strong>梯度检查</strong>。</p><p>用SVM的损失函数在某个数据点上的计算来举例：<br>$$ L_i=\displaystyle\sum_{j\not =y_i}[max(0,w^T_jx_i-w^T_{y_i}x_i+\Delta)] $$</p><p>可以对函数进行微分。比如，对进行微分得到：<br>$$ \displaystyle\nabla_{w_{y_i}}L_i=-(\sum_{j\not=y_i}1(w^T_jx_i-w^T_{y_i}x_i+\Delta&gt;0))x_i $$</p><p><img src="/2022/112216132/tidu2.png" alt></p><h3 id="四、梯度下降"><a href="#四、梯度下降" class="headerlink" title="四、梯度下降"></a>四、梯度下降</h3><p>现在可以计算损失函数的梯度了，程序重复地计算梯度然后对参数进行更新，这一过程称为梯度下降，他的普通版本是这样的：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 普通的梯度下降</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  weights_grad <span class="token operator">=</span> evaluate_gradient<span class="token punctuation">(</span>loss_fun<span class="token punctuation">,</span> data<span class="token punctuation">,</span> weights<span class="token punctuation">)</span>  weights <span class="token operator">+=</span> <span class="token operator">-</span> step_size <span class="token operator">*</span> weights_grad <span class="token comment"># 进行梯度更新</span></code></pre><p>这个简单的循环在所有的神经网络核心库中都有。虽然也有其他实现最优化的方法（比如LBFGS），但是到目前为止，梯度下降是对神经网络的损失函数最优化中最常用的方法。课程中，我们会在它的循环细节增加一些新的东西（比如更新的具体公式），但是核心思想不变，那就是我们一直跟着梯度走，直到结果不再变化。</p><p><strong>小批量数据梯度下降（Mini-batch gradient descent）</strong>：在大规模的应用中（比如ILSVRC挑战赛），训练数据可以达到百万级量级。如果像这样计算整个训练集，来获得仅仅一个参数的更新就太浪费了。一个常用的方法是计算训练集中的<strong>小批量（batches）</strong>数据。例如，在目前最高水平的卷积神经网络中，一个典型的小批量包含256个例子，而整个训练集是多少呢？一百二十万个。这个小批量数据就用来实现一个参数更新：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 普通的小批量数据梯度下降</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  data_batch <span class="token operator">=</span> sample_training_data<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token comment"># 256个数据</span>  weights_grad <span class="token operator">=</span> evaluate_gradient<span class="token punctuation">(</span>loss_fun<span class="token punctuation">,</span> data_batch<span class="token punctuation">,</span> weights<span class="token punctuation">)</span>  weights <span class="token operator">+=</span> <span class="token operator">-</span> step_size <span class="token operator">*</span> weights_grad <span class="token comment"># 参数更新</span></code></pre><p>这个方法之所以效果不错，是因为训练集中的数据都是相关的。要理解这一点，可以想象一个极端情况：在ILSVRC中的120万个图像是1000张不同图片的复制（每个类别1张图片，每张图片有1200张复制）。那么显然计算这1200张复制图像的梯度就应该是一样的。对比120万张图片的数据损失的均值与只计算1000张的子集的数据损失均值时，结果应该是一样的。实际情况中，数据集肯定不会包含重复图像，那么小批量数据的梯度就是对整个数据集梯度的一个近似。因此，在实践中通过计算小批量数据的梯度可以实现更快速地收敛，并以此来进行更频繁的参数更新。</p><p>小批量数据策略有个极端情况，那就是每个批量中只有1个数据样本，这种策略被称为<strong>随机梯度下降（Stochastic Gradient Descent 简称SGD）</strong>，有时候也被称为在线梯度下降。这种策略在实际情况中相对少见，因为向量化操作的代码一次计算100个数据 比100次计算1个数据要高效很多。即使SGD在技术上是指每次使用1个数据来计算梯度，你还是会听到人们使用SGD来指代小批量数据梯度下降（或者用MGD来指代小批量数据梯度下降，而BGD来指代则相对少见）。小批量数据的大小是一个超参数，但是一般并不需要通过交叉验证来调参。它一般由存储器的限制来决定的，或者干脆设置为同样大小，比如32，64，128等。之所以使用2的指数，是因为在实际中许多向量化操作实现的时候，如果输入数据量是2的倍数，那么运算更快。</p><h3 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h3><p><img src="/2022/112216132/tidu3.png" alt></p><p>信息流的总结图例。数据集中的(x,y)是给定的。权重从一个随机数字开始，且可以改变。在前向传播时，评分函数计算出类别的分类评分并存储在向量f中。损失函数包含两个部分：数据损失和正则化损失。其中，数据损失计算的是分类评分f和实际标签y之间的差异，正则化损失只是一个关于权重的函数。在梯度下降过程中，我们计算权重的梯度（如果愿意的话，也可以计算数据上的梯度），然后使用它们来实现参数的更新。</p><blockquote><ul><li>将损失函数比作了一个高维度的最优化地形，并尝试到达它的最底部。最优化的工作过程可以看做一个蒙着眼睛的徒步者希望摸索着走到山的底部。在例子中，可见SVM的损失函数是分段线性的，并且是碗状的。</li><li>提出了迭代优化的思想，从一个随机的权重开始，然后一步步地让损失值变小，直到最小。</li><li>函数的梯度给出了该函数最陡峭的上升方向。介绍了利用有限的差值来近似计算梯度的方法，该方法实现简单但是效率较低（有限差值就是h，用来计算数值梯度）。</li><li>参数更新需要有技巧地设置步长。也叫学习率。如果步长太小，进度稳定但是缓慢，如果步长太大，进度快但是可能有风险。</li><li>讨论权衡了数值梯度法和分析梯度法。数值梯度法计算简单，但结果只是近似且耗费计算资源。分析梯度法计算准确迅速但是实现容易出错，而且需要对梯度公式进行推导的数学基本功。因此，在实际中使用分析梯度法，然后使用梯度检查来检查其实现正确与否，其本质就是将分析梯度法的结果与数值梯度法的计算结果对比。</li><li>介绍了梯度下降算法，它在循环中迭代地计算梯度并更新参数。</li></ul></blockquote><p><strong>预告</strong>：这节课的核心内容是：理解并能计算损失函数关于权重的梯度，是设计、训练和理解神经网络的核心能力。下节中，将介绍如何使用链式法则来高效地计算梯度，也就是通常所说的<strong>反向传播（backpropagation）机制</strong>。该机制能够对包含卷积神经网络在内的几乎所有类型的神经网络的损失函数进行高效的最优化。</p></font>]]></content>
      
      
      <categories>
          
          <category> cs231n </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs231n </tag>
            
            <tag> 课程笔记 </tag>
            
            <tag> 最优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs231n-最优化(上)</title>
      <link href="/2022/112016131.html"/>
      <url>/2022/112016131.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、本节大纲"><a href="#一、本节大纲" class="headerlink" title="一、本节大纲"></a>一、本节大纲</h3><blockquote><p>1、损失函数可视化<br>2、最优化<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;策略#1：随机搜索<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;策略#2：随机局部搜索<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;策略#3：跟随梯度 译者注：上篇截止处<br>3、梯度计算<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用有限差值进行数值计算<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;微分计算梯度<br>4、梯度下降<br>5、小结</p></blockquote><h3 id="二、最优化简介"><a href="#二、最优化简介" class="headerlink" title="二、最优化简介"></a>二、最优化简介</h3><p>在上一节中，我们介绍了图像分类任务中的两个关键部分：</p><p>1、基于参数的<strong>评分函数</strong>。该函数将原始图像像素映射为分类评分值（例如：一个线性函数）。<br>2、<strong>损失函数</strong>。该函数能够根据分类评分和训练集图像数据实际分类的一致性，衡量某个具体参数集的质量好坏。损失函数有多种版本和不同的实现方式（例如：Softmax或SVM）。</p><p>上节中，线性函数的形式是f(s_i, W) = W * x_i，而SVM实现的公式是：</p><p>$$ L=\displaystyle\frac{1}{N}\sum_i\sum_{j\not= y_i}[max(0,f(x_i;W)<em>j-f(x_i;W)</em>{y_i}+1)]+\alpha R(W) $$</p><p>对于图像数据x_i，如果基于参数集W做出的分类预测与真实情况比较一致，那么计算出来的损失值L就很低。现在介绍第三个，也是最后一个关键部分：<strong>最优化Optimization</strong>。最优化是寻找能使得损失函数值最小化的参数W的过程。</p><p><strong>铺垫</strong>：一旦理解了这三个部分是如何相互运作的，我们将会回到第一个部分（基于参数的函数映射），然后将其拓展为一个远比线性函数复杂的函数：首先是神经网络，然后是卷积神经网络。而损失函数和最优化过程这两个部分将会保持相对稳定。</p><h3 id="三、损失函数可视化"><a href="#三、损失函数可视化" class="headerlink" title="三、损失函数可视化"></a>三、损失函数可视化</h3><p>我们可以通过数学公式来解释损失函数的分段线性结构。对于一个单独的数据，有损失函数的计算公式如下：<br>$$ Li=\sum_{j\not=y_i}[max(0,w^T_jx_i-w^T_{y_i}x_i+1) $$</p><p>通过公式可见，每个样本的数据损失值是以W为参数的线性函数的总和（零阈值来源于max(0, -)函数）。W的每一行（即w_j），有时候它前面是一个正号（比如当它对应错误分类的时候），有时候它前面是一个负号（比如当它是是正确分类的时候）。为进一步阐明，假设有一个简单的数据集，其中包含有3个只有1个维度的点，数据集数据点有3个类别。那么完整的无正则化SVM的损失值计算如下：</p><p>$$ L_0=max(0,w^T_1x_0-w^T_0x_0+1)+max(0,w^T_2x_0-w^T_0x_0+1) $$<br>$$ L_1=max(0,w^T_0x_1-w^T_1x_1+1)+max(0,w^T_2x_1-w^T_1x_1+1) $$<br>$$ L_2=max(0,w^T_0x_2-w^T_2x_2+1)+max(0,w^T_1x_2-w^T_2x_2+1) $$<br>$$L=(L_0+L_1+L_2)/3 $$</p><p><img src="/2022/112016131/w0.png" alt></p><p>从一个维度方向上对数据损失值的展示。x轴方向就是一个权重，y轴就是损失值。数据损失是多个部分组合而成。其中每个部分要么是某个权重的独立部分，要么是该权重的线性函数与0阈值的比较。完整的SVM数据损失就是这个形状的30730维版本。<br>——————————————————————————————————————</p><p>需要多说一句的是，你可能根据SVM的损失函数的碗状外观猜出它是一个凸函数。关于如何高效地最小化凸函数的论文有很多，你也可以学习斯坦福大学关于（凸函数最优化）的课程。但是一旦我们将f函数扩展到神经网络，目标函数就就不再是凸函数了，图像也不会像上面那样是个碗状，而是凹凸不平的复杂地形形状。</p><p>不可导的损失函数。作为一个技术笔记，你要注意到：由于max操作，损失函数中存在一些不可导点（kinks），这些点使得损失函数不可微，因为在这些不可导点，梯度是没有定义的。但是次梯度（subgradient）依然存在且常常被使用。在本课中，我们将交换使用次梯度和梯度两个术语。</p><h3 id="四、最优化-Optimization"><a href="#四、最优化-Optimization" class="headerlink" title="四、最优化 Optimization"></a>四、最优化 Optimization</h3><p>重申一下：损失函数可以量化某个具体权重集W的质量。而最优化的目标就是找到能够最小化损失函数值的W 。我们现在就朝着这个目标前进，实现一个能够最优化损失函数的方法。对于有一些经验的同学，这节课看起来有点奇怪，因为使用的例子（SVM 损失函数）是一个凸函数问题。但是要记得，最终的目标是不仅仅对凸函数做最优化，而是能够最优化一个神经网络，而对于神经网络是不能简单的使用凸函数的最优化技巧的。</p><h4 id="策略-1：一个差劲的初始方案：随机搜索"><a href="#策略-1：一个差劲的初始方案：随机搜索" class="headerlink" title="策略#1：一个差劲的初始方案：随机搜索"></a>策略#1：一个差劲的初始方案：随机搜索</h4><p>既然确认参数集W的好坏蛮简单的，那第一个想到的（差劲）方法，就是可以随机尝试很多不同的权重，然后看其中哪个最好。过程如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 假设X_train的每一列都是一个数据样本（比如3073 x 50000）</span><span class="token comment"># 假设Y_train是数据样本的类别标签（比如一个长50000的一维数组）</span><span class="token comment"># 假设函数L对损失函数进行评价</span>bestloss <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span> <span class="token comment"># Python assigns the highest possible float value</span><span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  W <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3073</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.0001</span> <span class="token comment"># generate random parameters</span>  loss <span class="token operator">=</span> L<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">,</span> W<span class="token punctuation">)</span> <span class="token comment"># get the loss over the entire training set</span>  <span class="token keyword">if</span> loss <span class="token operator">&lt;</span> bestloss<span class="token punctuation">:</span> <span class="token comment"># keep track of the best solution</span>    bestloss <span class="token operator">=</span> loss    bestW <span class="token operator">=</span> W  <span class="token keyword">print</span> <span class="token string">'in attempt %d the loss was %f, best %f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> bestloss<span class="token punctuation">)</span><span class="token comment"># 输出:</span><span class="token comment"># in attempt 0 the loss was 9.401632, best 9.401632</span><span class="token comment"># in attempt 1 the loss was 8.959668, best 8.959668</span><span class="token comment"># in attempt 2 the loss was 9.044034, best 8.959668</span><span class="token comment"># in attempt 3 the loss was 9.278948, best 8.959668</span><span class="token comment"># in attempt 4 the loss was 8.857370, best 8.857370</span><span class="token comment"># in attempt 5 the loss was 8.943151, best 8.857370</span><span class="token comment"># in attempt 6 the loss was 8.605604, best 8.605604</span><span class="token comment"># ... (trunctated: continues for 1000 lines)</span></code></pre><p>在上面的代码中，我们尝试了若干随机生成的权重矩阵<strong>W</strong>，其中某些的损失值较小，而另一些的损失值大些。我们可以把这次随机搜索中找到的最好的权重W取出，然后去跑测试集：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 假设X_test尺寸是[3073 x 10000], Y_test尺寸是[10000 x 1]</span>scores <span class="token operator">=</span> Wbest<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>Xte_cols<span class="token punctuation">)</span> <span class="token comment"># 10 x 10000, the class scores for all test examples</span><span class="token comment"># 找到在每列中评分值最大的索引（即预测的分类）</span>Yte_predict <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>scores<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 以及计算准确率</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>Yte_predict <span class="token operator">==</span> Yte<span class="token punctuation">)</span><span class="token comment"># 返回 0.1555</span></code></pre><p>验证集上表现最好的权重W跑测试集的准确率是15.5%，而完全随机猜的准确率是10%，如此看来，这个准确率对于这样一个不经过大脑的策略来说，还算不错嘛！</p><p><strong>核心思路：迭代优化</strong>。当然，我们肯定能做得更好些。核心思路是：虽然找到最优的权重W非常困难，甚至是不可能的（尤其当W中存的是整个神经网络的权重的时候），但如果问题转化为：<strong>对一个权重矩阵集W取优，使其损失值稍微减少</strong>。那么问题的难度就大大降低了。换句话说，<strong>我们的方法从一个随机的W开始，然后对其迭代取优，每次都让它的损失值变得更小一点</strong>。</p><blockquote><p>我们的策略是从随机权重开始，然后迭代取优，从而获得更低的损失值。</p></blockquote><p><strong>蒙眼徒步者的比喻</strong>：一个助于理解的比喻是把你自己想象成一个蒙着眼睛的徒步者，正走在山地地形上，目标是要慢慢走到山底。在CIFAR-10的例子中，这山是30730维的（因为<strong>W</strong>是3073x10）。我们在山上踩的每一点都对应一个的损失值，该损失值可以看做该点的海拔高度。</p><h4 id="策略-2：随机本地搜索"><a href="#策略-2：随机本地搜索" class="headerlink" title="策略#2：随机本地搜索"></a>策略#2：随机本地搜索</h4><p>第一个策略可以看做是每走一步都尝试几个随机方向，如果某个方向是向山下的，就向该方向走一步。这次我们从一个随机W开始，然后生成一个随机的扰动δW ，只有当W + δW的损失值变低，我们才会更新。这个过程的具体代码如下：</p><pre class="language-python" data-language="python"><code class="language-python">W <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3073</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.001</span> <span class="token comment"># 生成随机初始W</span>bestloss <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  step_size <span class="token operator">=</span> <span class="token number">0.0001</span>  Wtry <span class="token operator">=</span> W <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3073</span><span class="token punctuation">)</span> <span class="token operator">*</span> step_size  loss <span class="token operator">=</span> L<span class="token punctuation">(</span>Xtr_cols<span class="token punctuation">,</span> Ytr<span class="token punctuation">,</span> Wtry<span class="token punctuation">)</span>  <span class="token keyword">if</span> loss <span class="token operator">&lt;</span> bestloss<span class="token punctuation">:</span>    W <span class="token operator">=</span> Wtry    bestloss <span class="token operator">=</span> loss  <span class="token keyword">print</span> <span class="token string">'iter %d loss is %f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> bestloss<span class="token punctuation">)</span></code></pre><p>使用同样的数据（1000），这个方法可以得到21.4%的分类准确率。这个比策略一好，但是依然过于浪费计算资源。</p><h4 id="策略-3：跟随梯度"><a href="#策略-3：跟随梯度" class="headerlink" title="策略#3：跟随梯度"></a>策略#3：跟随梯度</h4><p>前两个策略中，我们是尝试在权重空间中找到一个方向，沿着该方向能降低损失函数的损失值。其实不需要随机寻找方向，因为可以直接计算出最好的方向，这就是从数学上计算出最陡峭的方向。这个方向就是损失函数的<strong>梯度（gradient）</strong>。在蒙眼徒步者的比喻中，这个方法就好比是感受我们脚下山体的倾斜程度，然后向着最陡峭的下降方向下山。</p><p>在一维函数中，斜率是函数在某一点的瞬时变化率。梯度是函数的斜率的一般化表达，它不是一个值，而是一个向量。在输入空间中，梯度是各个维度的斜率组成的向量（或者称为<strong>导数derivatives</strong>）。对一维函数的求导公式如下：</p><p>$$ \displaystyle\frac{df(x)}{dx}=\lim_{h\to 0}\frac{f(x+h)-f(x)}{h} $$</p><p>当函数有多个参数的时候，我们称导数为偏导数。而梯度就是在每个维度上偏导数所形成的向量。</p></font>]]></content>
      
      
      <categories>
          
          <category> cs231n </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs231n </tag>
            
            <tag> 课程笔记 </tag>
            
            <tag> 最优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs231n-线性分类笔记(下)</title>
      <link href="/2022/112016130.html"/>
      <url>/2022/112016130.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、本节大纲"><a href="#一、本节大纲" class="headerlink" title="一、本节大纲"></a>一、本节大纲</h3><blockquote><p>1、线性分类器简介<br>2、线性评分函数<br>3、阐明线性分类器<br>4、损失函数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;多类SVM<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Softmax分类器<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SVM和Softmax的比较<br>5、基于Web的可交互线性分类器原型<br>6、小结</p></blockquote><h3 id="二、Softmax分类器"><a href="#二、Softmax分类器" class="headerlink" title="二、Softmax分类器"></a>二、Softmax分类器</h3><p>SVM是最常用的两个分类器之一，而另一个就是<strong>Softmax分类器</strong>，它的损失函数与SVM的损失函数不同。对于学习过二元逻辑回归分类器的读者来说，Softmax分类器就可以理解为逻辑回归分类器面对多个分类的一般化归纳。SVM将输出作为每个分类的评分（因为无定标，所以难以直接解释）。与SVM不同，Softmax的输出（归一化的分类概率）更加直观，并且从概率上可以解释，这一点后文会讨论。在Softmax分类器中，函数映射保持不变，但将这些评分值视为每个分类的未归一化的对数概率，并且将折叶损失（hinge loss）替换为<strong>交叉熵损失（cross-entropy loss）</strong>。公式如下：</p><p>$$ Li=-log(\frac{e^{f_{y_i}}}{\sum_je^{f_j}}) $$</p><p> 或等价的</p><p>$$ L_i=-f_{y_i}+log(\sum_je^{f_j}) $$</p><p>PPT当中关于softmax的解释<br><img src="/2022/112016130/softmax.png" alt><br>首先，看到原始的分类评分的值，我们将其添加到指数函数当中(这样做有两个好处，第一是将评分数都放在了0以上，第二点是将原始的评分数扩大了)，最后将其进行归一化处理，即每一项除以他们的总和。<br>然后使用交叉熵函数，第一项的计算值为： L_i = -log(e^3.2 / (e^3.2 + e^5.1 + e^-1.7)) = 2.04</p><h3 id="三、SVM和Softmax的比较"><a href="#三、SVM和Softmax的比较" class="headerlink" title="三、SVM和Softmax的比较"></a>三、SVM和Softmax的比较</h3><p><img src="/2022/112016130/svmVSsoftmax.png" alt><br>针对一个数据点，SVM和Softmax分类器的不同处理方式的例子。两个分类器都计算了同样的分值向量f（本节中是通过矩阵乘来实现）。不同之处在于对f中分值的解释：SVM分类器将它们看做是分类评分，它的损失函数鼓励正确的分类（本例中是蓝色的类别2）的分值比其他分类的分值高出至少一个边界值。Softmax分类器将这些数值看做是每个分类没有归一化的对数概率，鼓励正确分类的归一化的对数概率变高，其余的变低。SVM的最终的损失值是1.58，Softmax的最终的损失值是0.452，但要注意这两个数值没有可比性。只在给定同样数据，在同样的分类器的损失值计算中，它们才有意义。</p><p><strong>Softmax分类器为每个分类提供了“可能性”</strong>：SVM的计算是无标定的，而且难以针对所有分类的评分值给出直观解释。Softmax分类器则不同，它允许我们计算出对于所有分类标签的可能性。举个例子，针对给出的图像，SVM分类器可能给你的是一个[12.5, 0.6, -23.0]对应分类“猫”，“狗”，“船”。而softmax分类器可以计算出这三个标签的”可能性“是[0.9, 0.09, 0.01]，这就让你能看出对于不同分类准确性的把握。为什么我们要在”可能性“上面打引号呢？这是因为可能性分布的集中或离散程度是由正则化参数λ直接决定的，λ是你能直接控制的一个输入参数。举个例子，假设3个分类的原始分数是[1, -2, 0]，那么softmax函数就会计算：<br>$$ [1,-2,0]\to[e^1,e^{-2},e^0]=[2.71,0.14,1]\to[0.7,0.04,0.26] $$</p><p>现在，如果正则化参数λ更大，那么权重W就会被惩罚的更多，然后他的权重数值就会更小。这样算出来的分数也会更小，假设小了一半吧[0.5, -1, 0]，那么softmax函数的计算就是：<br>$$ [0.5,-1,0]\to[e^{0.5},e^{-1},e^0]=[1.65,0.73,1]\to[0.55,0.12,0.33] $$</p><p>现在看起来，概率的分布就更加分散了。还有，随着正则化参数λ不断增强，权重数值会越来越小，最后输出的概率会接近于均匀分布。这就是说，softmax分类器算出来的概率最好是看成一种对于分类正确性的自信。和SVM一样，数字间相互比较得出的大小顺序是可以解释的，但其绝对值则难以直观解释。</p><p><strong>在实际使用中，SVM和Softmax经常是相似的</strong>：通常说来，两种分类器的表现差别很小，不同的人对于哪个分类器更好有不同的看法。相对于Softmax分类器，SVM更加“局部目标化（local objective）”，这既可以看做是一个特性，也可以看做是一个劣势。考虑一个评分是[10, -2, 3]的数据，其中第一个分类是正确的。那么一个SVM（delta = 1）会看到正确分类相较于不正确分类，已经得到了比边界值还要高的分数，它就会认为损失值是0。SVM对于数字个体的细节是不关心的：如果分数是[10, -100, -100]或者[10, 9, 9]，对于SVM来说没设么不同，只要满足超过边界值等于1，那么损失值就等于0。</p><p>对于softmax分类器，情况则不同。对于[10, 9, 9]来说，计算出的损失值就远远高于[10, -100, -100]的。换句话来说，softmax分类器对于分数是永远不会满意的：正确分类总能得到更高的可能性，错误分类总能得到更低的可能性，损失值总是能够更小。但是，SVM只要边界值被满足了就满意了，不会超过限制去细微地操作具体分数。这可以被看做是SVM的一种特性。举例说来，一个汽车的分类器应该把他的大量精力放在如何分辨小轿车和大卡车上，而不应该纠结于如何与青蛙进行区分，因为区分青蛙得到的评分已经足够低了。</p><h3 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h3><blockquote><ul><li>定义了从图像像素映射到不同类别的分类评分的评分函数。在本节中，评分函数是一个基于权重W和偏差b的线性函数。</li><li>与kNN分类器不同，参数方法的优势在于一旦通过训练学习到了参数，就可以将训练数据丢弃了。同时该方法对于新的测试数据的预测非常快，因为只需要与权重W进行一个矩阵乘法运算。</li><li>介绍了偏差技巧，让我们能够将偏差向量和权重矩阵合二为一，然后就可以只跟踪一个矩阵。</li><li>定义了损失函数（介绍了SVM和Softmax线性分类器最常用的2个损失函数）。损失函数能够衡量给出的参数集与训练集数据真实类别情况之间的一致性。在损失函数的定义中可以看到，对训练集数据做出良好预测与得到一个足够低的损失值这两件事是等价的。<br>现在我们知道了如何基于参数，将数据集中的图像映射成为分类的评分，也知道了两种不同的损失函数，它们都能用来衡量算法分类预测的质量。但是，如何高效地得到能够使损失值最小的参数呢？这个求得最优参数的过程被称为最优化，将在下节课中进行介绍。</li></ul></blockquote></font>]]></content>
      
      
      <categories>
          
          <category> cs231n </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs231n </tag>
            
            <tag> 课程笔记 </tag>
            
            <tag> 线性分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs231n-线性分类笔记(中)</title>
      <link href="/2022/111816129.html"/>
      <url>/2022/111816129.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、本节大纲"><a href="#一、本节大纲" class="headerlink" title="一、本节大纲"></a>一、本节大纲</h3><blockquote><p>1、线性分类器简介<br>2、线性评分函数<br>3、阐明线性分类器<br>4、损失函数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;多类SVM<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Softmax分类器<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SVM和Softmax的比较<br>5、基于Web的可交互线性分类器原型<br>6、小结</p></blockquote><h3 id="二、损失函数-Loss-function"><a href="#二、损失函数-Loss-function" class="headerlink" title="二、损失函数 Loss function"></a>二、损失函数 Loss function</h3><p>在上一节定义了从图像像素值到所属类别的评分函数（score function），该函数的参数是权重矩阵W。在函数中，数据(x_i, y_i)是给定的，不能修改。但是我们可以调整权重矩阵这个参数，使得评分函数的结果与训练数据集中图像的真实类别一致，即评分函数在正确的分类的位置应当得到最高的评分（score）。</p><p>回到之前那张猫的图像分类例子，它有针对“猫”，“狗”，“船”三个类别的分数。我们看到例子中权重值非常差，因为猫分类的得分非常低（-96.8），而狗（437.9）和船（61.95）比较高。我们将使用<strong>损失函数（Loss Function）</strong>（有时也叫<strong>代价函数Cost Function或目标函数Objective</strong>）来衡量我们对结果的不满意程度。直观地讲，当评分函数输出结果与真实结果之间差异越大，损失函数输出越大，反之越小。</p><h3 id="三、多类支持向量机SVM损失-Multiclass-Support-Vector-Machine-Loss"><a href="#三、多类支持向量机SVM损失-Multiclass-Support-Vector-Machine-Loss" class="headerlink" title="三、多类支持向量机SVM损失 Multiclass Support Vector Machine Loss"></a>三、多类支持向量机SVM损失 Multiclass Support Vector Machine Loss</h3><p>损失函数的具体形式多种多样。首先，介绍常用的多类支持向量机（SVM）损失函数。SVM的损失函数想要SVM在正确分类上的得分始终比不正确分类上的得分高出一个边界值德尔塔。我们可以把损失函数想象成一个人，这位SVM先生（或者女士）对于结果有自己的品位，如果某个结果能使得损失值更低，那么SVM就更加喜欢它。</p><p><img src="/2022/111816129/Li.png" alt></p><p><img src="/2022/111816129/Li2.png" alt></p><p>PPT当中的损失函数表示方式<br><img src="/2022/111816129/svm1.png" alt></p><p><img src="/2022/111816129/svm2.png" alt></p><p>损失函数的计算方式：<br><img src="/2022/111816129/svm3.png" alt></p><p><img src="/2022/111816129/svm4.png" alt></p><h6 id="还必须提一下的属于是关于0的阀值：max-0-函数，它常被称为折叶损失（hinge-loss）。有时候会听到人们使用平方折叶损失SVM（即L2-SVM），它使用的是max-0-2，将更强烈（平方地而不是线性地）地惩罚过界的边界值。不使用平方是更标准的版本，但是在某些数据集中，平方折叶损失会工作得更好。可以通过交叉验证来决定到底使用哪个。"><a href="#还必须提一下的属于是关于0的阀值：max-0-函数，它常被称为折叶损失（hinge-loss）。有时候会听到人们使用平方折叶损失SVM（即L2-SVM），它使用的是max-0-2，将更强烈（平方地而不是线性地）地惩罚过界的边界值。不使用平方是更标准的版本，但是在某些数据集中，平方折叶损失会工作得更好。可以通过交叉验证来决定到底使用哪个。" class="headerlink" title="还必须提一下的属于是关于0的阀值：max(0, -)函数，它常被称为折叶损失（hinge loss）。有时候会听到人们使用平方折叶损失SVM（即L2-SVM），它使用的是max(0, -) ^ 2，将更强烈（平方地而不是线性地）地惩罚过界的边界值。不使用平方是更标准的版本，但是在某些数据集中，平方折叶损失会工作得更好。可以通过交叉验证来决定到底使用哪个。"></a>还必须提一下的属于是关于0的阀值：max(0, -)函数，它常被称为<strong>折叶损失（hinge loss）</strong>。有时候会听到人们使用平方折叶损失SVM（即L2-SVM），它使用的是max(0, -) ^ 2，将更强烈（平方地而不是线性地）地惩罚过界的边界值。不使用平方是更标准的版本，但是在某些数据集中，平方折叶损失会工作得更好。可以通过交叉验证来决定到底使用哪个。</h6><blockquote><p>我们对于预测训练集数据分类标签的情况总有一些不满意的，而损失函数就能将这些不满意的程度量化。</p></blockquote><p><img src="/2022/111816129/delta.png" alt><br>多类SVM“想要”正确类别的分类分数比其他不正确分类类别的分数要高，而且至少高出delta的边界值。如果其他分类分数进入了红色的区域，甚至更高，那么就开始计算损失。如果没有这些情况，损失值为0。我们的目标是找到一些权重，它们既能够让训练集中的数据样例满足这些限制，也能让总的损失值尽可能地低。</p><p><strong>正则化（Regularization）</strong>：上面损失函数有一个问题。假设有一个数据集和一个<strong>权重集W</strong>能够正确地分类每个数据（即所有的边界都满足，对于所有的i都有L_i=0）。问题在于这个W并不唯一：可能有很多相似的W都能正确地分类所有的数据。一个简单的例子：如果W能够正确分类所有数据，即对于每个数据，损失值都是0。那么当λ &gt; 1时，任何数乘 λW 都能使得损失值为0，因为这个变化将所有分值的大小都均等地扩大了，所以它们之间的绝对差值也扩大了。举个例子，如果一个正确分类的分值和举例它最近的错误分类的分值的差距是15，对W乘以2将使得差距变成30。</p><p>换句话说，我们希望能向某些特定的权重W添加一些偏好，对其他权重则不添加，以此来消除模糊性。这一点是能够实现的，方法是向损失函数增加一个<strong>正则化惩罚（regularization penalty）</strong> R（W）部分。最常用的正则化惩罚是L2范式，L2范式通过对所有参数进行逐元素的平方惩罚来抑制大数值的权重：</p><p><img src="/2022/111816129/rw.png" alt></p><p>其中，N是训练集的数据量。现在正则化惩罚添加到了损失函数里面，并用超参数λ来计算其权重。该超参数无法简单确定，需要通过交叉验证来获取。</p><p>除了上述理由外，引入正则化惩罚还带来很多良好的性质，这些性质大多会在后续章节介绍。比如引入了L2惩罚后，SVM们就有了<strong>最大边界（max margin）</strong>这一良好性质。（如果感兴趣，可以查看CS229课程）。</p><p>其中最好的性质就是对大数值权重进行惩罚，可以提升其泛化能力，因为这就意味着没有哪个维度能够独自对于整体分值有过大的影响。举个例子，假设输入向量x = [1, 1, 1, 1]，两个权重向量W1 = [1, 0, 0, 0]，w2 = [0.25, 0.25, 0.25, 0.25]。那么w1^T x = w2^T = 1，两个权重向量都得到同样的内积，但是w1的L2惩罚是1.0，而w2的L2惩罚是0.25。因此，根据L2惩罚来看，w2更好，因为它的正则化损失更小。从直观上来看，这是因为w2的权重值更小且更分散。既然L2惩罚倾向于更小更分散的权重向量，这就会鼓励分类器最终将所有维度上的特征都用起来，而不是强烈依赖其中少数几个维度。在后面的课程中可以看到，这一效果将会提升分类器的泛化能力，并避免过拟合。</p><p>需要注意的是，和权重不同，偏差没有这样的效果，因为它们并不控制输入维度上的影响强度。因此通常只对权重W正则化，而不正则化偏差b。在实际操作中，可发现这一操作的影响可忽略不计。最后，因为正则化惩罚的存在，不可能在所有的例子中得到0的损失值，这是因为只有当W = 0的特殊情况下，才能得到损失值为0。</p><p>代码：下面是一个无正则化部分的损失函数的Python实现，有非向量化和半向量化两个形式：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">L_i</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> W<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">"""  unvectorized version. Compute the multiclass svm loss for a single example (x,y)  - x is a column vector representing an image (e.g. 3073 x 1 in CIFAR-10)    with an appended bias dimension in the 3073-rd position (i.e. bias trick)  - y is an integer giving index of correct class (e.g. between 0 and 9 in CIFAR-10)  - W is the weight matrix (e.g. 10 x 3073 in CIFAR-10)  """</span>  delta <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token comment"># see notes about delta later in this section</span>  scores <span class="token operator">=</span> W<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># scores becomes of size 10 x 1, the scores for each class</span>  correct_class_score <span class="token operator">=</span> scores<span class="token punctuation">[</span>y<span class="token punctuation">]</span>  D <span class="token operator">=</span> W<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># number of classes, e.g. 10</span>  loss_i <span class="token operator">=</span> <span class="token number">0.0</span>  <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># iterate over all wrong classes</span>    <span class="token keyword">if</span> j <span class="token operator">==</span> y<span class="token punctuation">:</span>      <span class="token comment"># skip for the true class to only loop over incorrect classes</span>      <span class="token keyword">continue</span>    <span class="token comment"># accumulate loss for the i-th example</span>    loss_i <span class="token operator">+=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> scores<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> correct_class_score <span class="token operator">+</span> delta<span class="token punctuation">)</span>  <span class="token keyword">return</span> loss_i<span class="token keyword">def</span> <span class="token function">L_i_vectorized</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> W<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">"""  A faster half-vectorized implementation. half-vectorized  refers to the fact that for a single example the implementation contains  no for loops, but there is still one loop over the examples (outside this function)  """</span>  delta <span class="token operator">=</span> <span class="token number">1.0</span>  scores <span class="token operator">=</span> W<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># compute the margins for all classes in one vector operation</span>  margins <span class="token operator">=</span> np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> scores <span class="token operator">-</span> scores<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">+</span> delta<span class="token punctuation">)</span>  <span class="token comment"># on y-th position scores[y] - scores[y] canceled and gave delta. We want</span>  <span class="token comment"># to ignore the y-th position and only consider margin on max wrong class</span>  margins<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  loss_i <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>margins<span class="token punctuation">)</span>  <span class="token keyword">return</span> loss_i<span class="token keyword">def</span> <span class="token function">L</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> W<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">"""  fully-vectorized implementation :  - X holds all the training examples as columns (e.g. 3073 x 50,000 in CIFAR-10)  - y is array of integers specifying correct class (e.g. 50,000-D array)  - W are weights (e.g. 10 x 3073)  """</span>  <span class="token comment"># evaluate loss over all examples in X without using any for loops</span>  <span class="token comment"># left as exercise to reader in the assignment</span></code></pre><p>在本小节的学习中，一定要记得SVM损失采取了一种特殊的方法，使得能够衡量对于训练数据预测分类和实际分类标签的一致性。还有，对训练集中数据做出准确分类预测和让损失值最小化这两件事是等价的。</p><blockquote><p>接下来要做的，就是找到能够使损失值最小化的权重了。</p></blockquote><h3 id="四、实际考虑"><a href="#四、实际考虑" class="headerlink" title="四、实际考虑"></a>四、实际考虑</h3><p><img src="/2022/111816129/delta2.png" alt></p><p>备注：在初始形式中进行最优化。如果在本课程之前学习过SVM，那么对kernels，duals，SMO算法等将有所耳闻。在本课程（主要是神经网络相关）中，损失函数的最优化的始终在非限制初始形式下进行。很多这些损失函数从技术上来说是不可微的（比如当时x = y，max(x, y)函数就不可微分），但是在实际操作中并不存在问题，因为通常可以使用次梯度。</p><p>备注：其他多类SVM公式。需要指出的是，本课中展示的多类SVM只是多种SVM公式中的一种。另一种常用的公式是One-Vs-All（OVA）SVM，它针对每个类和其他类训练一个独立的二元分类器。还有另一种更少用的叫做All-Vs-All（AVA）策略。我们的公式是按照Weston and Watkins 1999 (pdf)版本，比OVA性能更强（在构建有一个多类数据集的情况下，这个版本可以在损失值上取到0，而OVA就不行。感兴趣的话在论文中查阅细节）。最后一个需要知道的公式是Structured SVM，它将正确分类的分类分值和非正确分类中的最高分值的边界最大化。理解这些公式的差异超出了本课程的范围。本课程笔记介绍的版本可以在实践中安全使用，而被论证为最简单的OVA策略在实践中看起来也能工作的同样出色（在 Rikin等人2004年的论文<a href="http://www.jmlr.org/papers/volume5/rifkin04a/rifkin04a.pdf">In Defense of One-Vs-All Classification (pdf)</a>中可查）。</p><h3 id="五、相关问题的解决"><a href="#五、相关问题的解决" class="headerlink" title="五、相关问题的解决"></a>五、相关问题的解决</h3><p><img src="/2022/111816129/qa1.png" alt><br>1、如果车辆的识别评分值发生一点变化，最终的结果会如何？<br>看中间的车的图片的各类别识别率，如果4.9发生一点点变化，则最终的结果不会发生变化，也是0。</p><p><img src="/2022/111816129/qa2.png" alt><br>2、损失函数的最大值/最小值可能是多少？<br>最大值为正无穷大，最小值为0</p><p><img src="/2022/111816129/qa3.png" alt><br>3、如果所有的权重值均W为随机产生的，以至于所有的s均为0，那么最终的损失值为多少？<br>答案为 [类别-1] 看公式计算，也就是说每一个类别的计算都是max(0, 0-0+1) + max(0, 0-0+1) = 2。</p><p><img src="/2022/111816129/qa4.png" alt><br>4、如果是计算所有的类别(注意：原来的公式在计算损失值时不计算自己的)，即在原来的公式的基础之上，加上j = y+j 那么这样的话，最终的结果会发生什么变化？<br>带入到公式之中会发现，添加的是max(0, s_j - s_j + 1) 即最终的结果会加上一个常数1。</p><p><img src="/2022/111816129/qa6.png" alt><br>5、如果使用平方再进行求和计算，会发生什么？<br>这两种公式是可以进行替换的，只是会将误差较大的值进一步的放大。</p></font>]]></content>
      
      
      <categories>
          
          <category> cs231n </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs231n </tag>
            
            <tag> 课程笔记 </tag>
            
            <tag> 线性分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs231n-线性分类笔记(上)</title>
      <link href="/2022/111816128.html"/>
      <url>/2022/111816128.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、本节大纲"><a href="#一、本节大纲" class="headerlink" title="一、本节大纲"></a>一、本节大纲</h3><blockquote><p>1、线性分类器简介<br>2、线性评分函数<br>3、阐明线性分类器<br>4、损失函数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;多类SVM<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Softmax分类器<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SVM和Softmax的比较<br>5、基于Web的可交互线性分类器原型<br>6、小结</p></blockquote><h3 id="二、上节图像分类的缺点"><a href="#二、上节图像分类的缺点" class="headerlink" title="二、上节图像分类的缺点"></a>二、上节图像分类的缺点</h3><p>上一篇笔记介绍了图像分类问题。图像分类的任务，就是从已有的固定分类标签集合中选择一个并分配给一张图像。我们还介绍了k-Nearest Neighbor （k-NN）分类器，该分类器的基本思想是通过将测试图像与训练集带标签的图像进行比较，来给测试图像打上分类标签。k-Nearest Neighbor分类器存在以下不足：</p><blockquote><ul><li>分类器必须记住所有训练数据并将其存储起来，以便于未来测试数据用于比较。这在存储空间上是低效的，数据集的大小很容易就以GB计。</li><li>对一个测试图像进行分类需要和所有训练图像作比较，算法计算资源耗费高。</li></ul></blockquote><h3 id="三、线性分类"><a href="#三、线性分类" class="headerlink" title="三、线性分类"></a>三、线性分类</h3><p><strong>概述</strong>：我们将要实现一种更强大的方法来解决图像分类问题，该方法可以自然地延伸到神经网络和卷积神经网络上。这种方法主要有两部分组成：一个是<strong>评分函数（score function）</strong>，它是原始图像数据到类别分值的映射。另一个是<strong>损失函数（loss function）</strong>，它是用来量化预测分类标签的得分与真实标签之间一致性的。该方法可转化为一个最优化问题，在最优化过程中，将通过更新评分函数的参数来最小化损失函数值。</p><h3 id="四、从图像到标签分值的参数化映射"><a href="#四、从图像到标签分值的参数化映射" class="headerlink" title="四、从图像到标签分值的参数化映射"></a>四、从图像到标签分值的参数化映射</h3><p><img src="/2022/111816128/weigth.png" alt></p><p><img src="/2022/111816128/classifier.png" alt></p><p>在上面的公式中，假设每个图像数据都被拉长为一个长度为D的列向量，大小为[D x 1]。其中大小为[K x D]的矩阵<strong>W</strong>和大小为[K x 1]列向量<strong>b</strong>为该函数的<strong>参数（parameters）</strong>。还是以CIFAR-10为例，x_i就包含了第i个图像的所有像素信息，这些信息被拉成为一个[3072 x 1]的列向量，<strong>W</strong>大小为[10 x 3072]，<strong>b</strong>的大小为[10 x 1]。因此，3072个数字（原始像素数值）输入函数，函数输出10个数字（不同分类得到的分值）。参数<strong>W</strong>被称为<strong>权重（weights）</strong>。<strong>b</strong>被称为<strong>偏差向量（bias vector）</strong>，这是因为它影响输出数值，但是并不和原始数据x_i产生关联。在实际情况中，人们常常混用权重和参数这两个术语。</p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><blockquote><ul><li>首先，一个单独的矩阵乘法W * x_i就高效地并行评估10个不同的分类器（每个分类器针对一个分类），其中每个类的分类器就是W的一个行向量。</li><li>注意我们认为输入数据(x_i, y_i)是给定且不可改变的，但参数<strong>W和b</strong>是可控制改变的。我们的目标就是通过设置这些参数，使得计算出来的分类分值情况和训练集中图像数据的真实类别标签相符。在接下来的课程中，我们将详细介绍如何做到这一点，但是目前只需要直观地让正确分类的分值比错误分类的分值高即可。</li><li>该方法的一个优势是训练数据是用来学习到参数W和b的，一旦训练完成，训练数据就可以丢弃，留下学习到的参数即可。这是因为一个测试图像可以简单地输入函数，并基于计算出的分类分值来进行分类。</li><li>最后，注意只需要做一个矩阵乘法和一个矩阵加法就能对一个测试数据分类，这比k-NN中将测试图像和所有训练数据做比较的方法快多了。</li></ul></blockquote><p><font color="#ff0000">预告：卷积神经网络映射图像像素值到分类分值的方法和上面一样，但是映射(f)就要复杂多了，其包含的参数也更多。</font></p><h3 id="五、理解线性分类器"><a href="#五、理解线性分类器" class="headerlink" title="五、理解线性分类器"></a>五、理解线性分类器</h3><p>线性分类器计算图像中3个颜色通道中所有像素的值与权重的矩阵乘，从而得到分类分值。根据我们对权重设置的值，对于图像中的某些位置的某些颜色，函数表现出喜好或者厌恶（根据每个权重的符号而定）。举个例子，可以想象“船”分类就是被大量的蓝色所包围（对应的就是水）。那么“船”分类器在蓝色通道上的权重就有很多的正权重（它们的出现提高了“船”分类的分值），而在绿色和红色通道上的权重为负的就比较多（它们的出现降低了“船”分类的分值）。</p><p><img src="/2022/111816128/liexiangliang.png" alt><br>一个将图像映射到分类分值的例子。为了便于可视化，假设图像只有4个像素（都是黑白像素，这里不考虑RGB通道），有3个分类（红色代表猫，绿色代表狗，蓝色代表船，注意，这里的红、绿和蓝3种颜色仅代表分类，和RGB通道没有关系）。首先将图像像素拉伸为一个列向量，与W进行矩阵乘，然后得到各个分类的分值。需要注意的是，这个W一点也不好：猫分类的分值非常低。从上图来看，算法倒是觉得这个图像是一只狗。</p><p><strong>将图像看做高维度的点</strong>：既然图像被伸展成为了一个高维度的列向量，那么我们可以把图像看做这个高维度空间中的一个点（即每张图像是3072维空间中的一个点）。整个数据集就是一个点的集合，每个点都带有1个分类标签。</p><p>既然定义每个分类类别的分值是权重和图像的矩阵乘，那么每个分类类别的分数就是这个空间中的一个线性函数的函数值。我们没办法可视化3072维空间中的线性函数，但假设把这些维度挤压到二维，那么就可以看看这些分类器在做什么了：</p><p><img src="/2022/111816128/Geometric%20Viewpoint.png" alt><br>图像空间的示意图。其中每个图像是一个点，有3个分类器。以红色的汽车分类器为例，红线表示空间中汽车分类分数为0的点的集合，红色的箭头表示分值上升的方向。所有红线右边的点的分数值均为正，且线性升高。红线左边的点分值为负，且线性降低。</p><p>从上面可以看到，<strong>W</strong>的每一行都是一个分类类别的分类器。对于这些数字的几何解释是：如果改变其中一行的数字，会看见分类器在空间中对应的直线开始向着不同方向旋转。而偏差<strong>b</strong>，则允许分类器对应的直线平移。需要注意的是，如果没有偏差，无论权重如何，在<strong>x_i = 0</strong>时分类分值始终为0。这样所有分类器的线都不得不穿过原点。</p><p><strong>将线性分类器看做模板匹配</strong>：关于<strong>权重W</strong>的另一个解释是它的每一行对应着一个分类的模板（有时候也叫作原型）。一张图像对应不同分类的得分，是通过使用内积（也叫点积）来比较图像和模板，然后找到和哪个模板最相似。从这个角度来看，线性分类器就是在利用学习到的模板，针对图像做模板匹配。从另一个角度来看，可以认为还是在高效地使用k-NN，不同的是我们没有使用所有的训练集的图像来比较，而是每个类别只用了一张图片（这张图片是我们学习到的，而不是训练集中的某一张），而且我们会使用（负）内积来计算向量间的距离，而不是使用L1或者L2距离。</p><p><img src="/2022/111816128/cifar10.png" alt></p><p>可以看到马的模板看起来似乎是两个头的马，这是因为训练集中的马的图像中马头朝向各有左右造成的。线性分类器将这两种情况融合到一起了。类似的，汽车的模板看起来也是将几个不同的模型融合到了一个模板中，并以此来分辨不同方向不同颜色的汽车。这个模板上的车是红色的，这是因为CIFAR-10中训练集的车大多是红色的。线性分类器对于不同颜色的车的分类能力是很弱的，但是后面可以看到神经网络是可以完成这一任务的。神经网络可以在它的隐藏层中实现中间神经元来探测不同种类的车（比如绿色车头向左，蓝色车头向前等）。而下一层的神经元通过计算不同的汽车探测器的权重和，将这些合并为一个更精确的汽车分类分值。</p><h5 id="偏差和权重的合并技巧"><a href="#偏差和权重的合并技巧" class="headerlink" title="偏差和权重的合并技巧"></a>偏差和权重的合并技巧</h5><p><img src="/2022/111816128/piancha.png" alt></p><p><img src="/2022/111816128/piancha2.png" alt><br>偏差技巧的示意图。左边是先做矩阵乘法然后做加法，右边是将所有输入向量的维度增加1个含常量1的维度，并且在权重矩阵中增加一个偏差列，最后做一个矩阵乘法即可。左右是等价的。通过右边这样做，我们就只需要学习一个权重矩阵，<strong>而不用去学习两个分别装着权重和偏差的矩阵了</strong>。</p><p><strong>图像数据预处理</strong>：在上面的例子中，所有图像都是使用的原始像素值（从0到255）。在机器学习中，对于输入的特征做<strong>归一化（normalization）</strong>处理是常见的套路。而在图像分类的例子中，图像上的每个像素可以看做一个特征。在实践中，对每个特征减去平均值来<strong>中心化</strong>数据是非常重要的。在这些图片的例子中，该步骤意味着根据训练集中所有的图像计算出一个平均图像值，然后每个图像都减去这个平均值，这样图像的像素值就大约分布在[-127, 127]之间了。下一个常见步骤是，让所有数值分布的区间变为[-1, 1]。<strong>零均值的中心化</strong>是很重要的，等我们理解了梯度下降后再来详细解释。</p></font>]]></content>
      
      
      <categories>
          
          <category> cs231n </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs231n </tag>
            
            <tag> 课程笔记 </tag>
            
            <tag> 线性分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs231n-图像分类笔记(下)</title>
      <link href="/2022/111616127.html"/>
      <url>/2022/111616127.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、本节大纲"><a href="#一、本节大纲" class="headerlink" title="一、本节大纲"></a>一、本节大纲</h3><blockquote><ul><li>1、图像分类、数据驱动方法和流程<br>2、Nearest Neighbor分类器<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k-Nearest Neighbor<br>3、验证集、交叉验证集和超参数调优 译者注：下篇翻译起始处</li></ul><p>4.Nearest Neighbor的优劣<br>5、小结：应用kNN实践<br>6、拓展阅读</p></blockquote><h3 id="二、用于超参数调优的验证集"><a href="#二、用于超参数调优的验证集" class="headerlink" title="二、用于超参数调优的验证集"></a>二、用于超参数调优的验证集</h3><p>k-NN分类器需要设定k值，那么选择哪个k值最合适的呢？我们可以选择不同的距离函数，比如L1范数和L2范数等，那么选哪个好？还有不少选择我们甚至连考虑都没有考虑到（比如：点积）。所有这些选择，被称为<strong>超参数（hyperparameter）</strong>。在基于数据进行学习的机器学习算法设计中，超参数是很常见的。一般说来，这些超参数具体怎么设置或取值并不是显而易见的。</p><p>你可能会建议尝试不同的值，看哪个值表现最好就选哪个。好主意！我们就是这么做的，但这样做的时候要非常细心。特别注意：<strong>决不能使用测试集来进行调优</strong>。当你在设计机器学习算法的时候，应该把测试集看做非常珍贵的资源，不到最后一步，绝不使用它。如果你使用测试集来调优，而且算法看起来效果不错，那么真正的危险在于：算法实际部署后，性能可能会远低于预期。这种情况，称之为算法对测试集<strong>过拟合</strong>。从另一个角度来说，如果使用测试集来调优，实际上就是把测试集当做训练集，由测试集训练出来的算法再跑测试集，自然性能看起来会很好。这其实是过于乐观了，实际部署起来效果就会差很多。所以，最终测试的时候再使用测试集，可以很好地近似度量你所设计的分类器的泛化性能（在接下来的课程中会有很多关于泛化性能的讨论）。</p><blockquote><p>测试数据集只使用一次，即在训练完成后评价最终的模型时使用。</p></blockquote><p>好在我们有不用测试集调优的方法。其思路是：从训练集中取出一部分数据用来调优，我们称之为<strong>验证集（validation set）</strong>。以CIFAR-10为例，我们可以用49000个图像作为训练集，用1000个图像作为验证集。验证集其实就是作为假的测试集来调优。下面就是代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 下列代码的意思：把原来用来训练的数据集分出一部分来进行验证，以找到最好的参数，完成超参数hyperparameters的最好表现的数据</span><span class="token comment"># assume we have Xtr_rows, Ytr, Xte_rows, Yte as before</span><span class="token comment"># recall Xtr_rows is 50,000 x 3072 matrix</span>Xval_rows <span class="token operator">=</span> Xtr_rows<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment"># take first 1000 for validation</span>Yval <span class="token operator">=</span> Ytr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1000</span><span class="token punctuation">]</span>Xtr_rows <span class="token operator">=</span> Xtr_rows<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment"># keep last 49,000 for train</span>Ytr <span class="token operator">=</span> Ytr<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment"># find hyperparameters that work best on the validation set</span>validation_accuracies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># use a particular value of k and evaluation on validation data</span>  nn <span class="token operator">=</span> NearestNeighbor<span class="token punctuation">(</span><span class="token punctuation">)</span>  nn<span class="token punctuation">.</span>train<span class="token punctuation">(</span>Xtr_rows<span class="token punctuation">,</span> Ytr<span class="token punctuation">)</span>  <span class="token comment"># here we assume a modified NearestNeighbor class that can take a k as input</span>  Yval_predict <span class="token operator">=</span> nn<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>Xval_rows<span class="token punctuation">,</span> k <span class="token operator">=</span> k<span class="token punctuation">)</span>  acc <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>Yval_predict <span class="token operator">==</span> Yval<span class="token punctuation">)</span>  <span class="token keyword">print</span> <span class="token string">'accuracy: %f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>acc<span class="token punctuation">,</span><span class="token punctuation">)</span>  <span class="token comment"># keep track of what works on the validation set</span>  validation_accuracies<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="/2022/111616127/validate1.png" alt></p><h5 id="程序结束后，我们会作图分析出哪个k值表现最好，然后用这个k值来跑真正的测试集，并作出对算法的评价。"><a href="#程序结束后，我们会作图分析出哪个k值表现最好，然后用这个k值来跑真正的测试集，并作出对算法的评价。" class="headerlink" title="程序结束后，我们会作图分析出哪个k值表现最好，然后用这个k值来跑真正的测试集，并作出对算法的评价。"></a>程序结束后，我们会作图分析出哪个k值表现最好，然后用这个k值来跑真正的测试集，并作出对算法的评价。</h5><blockquote><p>把训练集分成训练集和验证集。使用验证集来对所有超参数调优。最后只在测试集上跑一次并报告结果。</p></blockquote><p><strong>交叉验证</strong>。有时候，训练集数量较小（因此验证集的数量更小），人们会使用一种被称为<strong>交叉验证</strong>的方法，这种方法更加复杂些。还是用刚才的例子，如果是交叉验证集，我们就不是取1000个图像，而是将训练集平均分成5份，其中4份用来训练，1份用来验证。然后我们循环着取其中4份来训练，其中1份来验证，最后取所有5次验证结果的平均值作为算法验证结果。</p><p><img src="/2022/111616127/validate2.png" alt></p><p><img src="/2022/111616127/k.png" alt><br>这就是5份交叉验证对k值调优的例子。针对每个k值，得到5个准确率结果，取其平均值，然后对不同k值的平均表现画线连接。本例中，当k=7的时算法表现最好（对应图中的准确率峰值）。如果我们将训练集分成更多份数，直线一般会更加平滑（噪音更少）。</p><p><strong>实际应用</strong>。在实际情况下，人们不是很喜欢用交叉验证，主要是因为它会耗费较多的计算资源。一般直接把训练集按照50%-90%的比例分成训练集和验证集。但这也是根据具体情况来定的：如果超参数数量多，你可能就想用更大的验证集，而验证集的数量不够，那么最好还是用交叉验证吧。至于分成几份比较好，一般都是分成3、5和10份。</p><h3 id="三、Nearest-Neighbor分类器的优劣"><a href="#三、Nearest-Neighbor分类器的优劣" class="headerlink" title="三、Nearest Neighbor分类器的优劣"></a>三、Nearest Neighbor分类器的优劣</h3><p>现在对Nearest Neighbor分类器的优缺点进行思考。首先，Nearest Neighbor分类器易于理解，实现简单。其次，算法的训练不需要花时间，因为其训练过程只是将训练集数据存储起来。然而测试要花费大量时间计算，因为每个测试图像需要和所有存储的训练图像进行比较，这显然是一个缺点。在实际应用中，我们关注测试效率远远高于训练效率。其实，我们后续要学习的卷积神经网络在这个权衡上走到了另一个极端：虽然训练花费很多时间，但是一旦训练完成，对新的测试数据进行分类非常快。这样的模式就符合实际使用需求。</p><p>Nearest Neighbor分类器的计算复杂度研究是一个活跃的研究领域，若干Approximate Nearest Neighbor (ANN)算法和库的使用可以提升Nearest Neighbor分类器在数据上的计算速度（比如：FLANN）。这些算法可以在准确率和时空复杂度之间进行权衡，并通常依赖一个预处理/索引过程，这个过程中一般包含kd树的创建和k-means算法的运用。</p><h5 id="以下两个方面表示使用像素进行图像的比较是不够的"><a href="#以下两个方面表示使用像素进行图像的比较是不够的" class="headerlink" title="以下两个方面表示使用像素进行图像的比较是不够的"></a>以下两个方面表示使用像素进行图像的比较是不够的</h5><p>Nearest Neighbor分类器在某些特定情况（比如数据维度较低）下，可能是不错的选择。但是在实际的图像分类工作中，很少使用。因为图像都是高维度数据（他们通常包含很多像素），而高维度向量之间的距离通常是反直觉的。下面的图片展示了基于像素的相似和基于感官的相似是有很大不同的：<br><img src="/2022/111616127/l2same.png" alt><br>上图当中，后面三张图片与第一张图片的L2距离是相同的。</p><p>在高维度数据上，基于像素的的距离和感官上的非常不同。上图中，右边3张图片和左边第1张原始图片的L2距离是一样的。很显然，基于像素比较的相似和感官上以及语义上的相似是不同的。</p><p>这里还有个视觉化证据，可以证明使用像素差异来比较图像是不够的。z这是一个叫做t-SNE的可视化技术，它将CIFAR-10中的图片按照二维方式排布，这样能很好展示图片之间的像素差异值。在这张图片中，排列相邻的图片L2距离就小。<br><img src="/2022/111616127/L2low.png" alt></p><p>上图使用t-SNE的可视化技术将CIFAR-10的图片进行了二维排列。排列相近的图片L2距离小。可以看出，图片的排列是被背景主导而不是图片语义内容本身主导。</p><p>具体说来，这些图片的排布更像是一种颜色分布函数，或者说是基于背景的，而不是图片的语义主体。比如，狗的图片可能和青蛙的图片非常接近，这是因为两张图片都是白色背景。从理想效果上来说，我们肯定是希望同类的图片能够聚集在一起，而不被背景或其他不相关因素干扰。为了达到这个目的，我们不能止步于原始像素比较，得继续前进。<br>In other words: 使用像素之间的比较不得行，上述举了两个例子：1、只做图像之间的部分变换，其L2距离是相同的(但他们不一样), 2、t-SNE可视化表示背景类似但图像内容不同也会产生分为同一类的现象。</p><h3 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h3><blockquote><ul><li>介绍了<strong>图像分类</strong>问题。在该问题中，给出一个由被标注了分类标签的图像组成的集合，要求算法能预测没有标签的图像的分类标签，并根据算法预测准确率进行评价。</li><li>介绍了一个简单的图像分类器：<strong>最近邻分类器(Nearest Neighbor classifier)</strong>。分类器中存在不同的超参数(比如k值或距离类型的选取)，要想选取好的超参数不是一件轻而易举的事。</li><li>选取超参数的正确方法是：将原始训练集分为训练集和<strong>验证集</strong>，我们在验证集上尝试不同的超参数，最后保留表现最好那个。</li><li>如果训练数据量不够，使用<strong>交叉验证</strong>方法，它能帮助我们在选取最优超参数的时候减少噪音。</li><li>一旦找到最优的超参数，就让算法以该参数在测试集跑且只跑一次，并根据测试结果评价算法。</li><li>最近邻分类器能够在CIFAR-10上得到将近40%的准确率。该算法简单易实现，但需要存储所有训练数据，并且在测试的时候过于耗费计算能力。</li><li>最后，我们知道了仅仅使用L1和L2范数来进行像素比较是不够的，图像更多的是按照背景和颜色被分类，而不是语义主体分身。</li></ul></blockquote><h5 id="在接下来的课程中，我们将专注于解决这些问题和挑战，并最终能够得到超过90-准确率的解决方案。该方案能够在完成学习就丢掉训练集，并在一毫秒之内就完成一张图片的分类。"><a href="#在接下来的课程中，我们将专注于解决这些问题和挑战，并最终能够得到超过90-准确率的解决方案。该方案能够在完成学习就丢掉训练集，并在一毫秒之内就完成一张图片的分类。" class="headerlink" title="在接下来的课程中，我们将专注于解决这些问题和挑战，并最终能够得到超过90%准确率的解决方案。该方案能够在完成学习就丢掉训练集，并在一毫秒之内就完成一张图片的分类。"></a>在接下来的课程中，我们将专注于解决这些问题和挑战，并最终能够得到超过90%准确率的解决方案。该方案能够在完成学习就丢掉训练集，并在一毫秒之内就完成一张图片的分类。</h5><p>实际应用K-NN<br>如果你希望将k-NN分类器用到实处（最好别用到图像上，若是仅仅作为练手还可以接受），那么可以按照以下流程：</p><p>1、预处理你的数据：对你数据中的特征进行归一化（normalize），让其具有零平均值（zero mean）和单位方差（unit variance）。在后面的小节我们会讨论这些细节。本小节不讨论，是因为图像中的像素都是同质的，不会表现出较大的差异分布，也就不需要标准化处理了。</p><p>2、如果数据是高维数据，考虑使用降维方法，比如PCA(wiki ref, CS229ref, blog ref)或随机投影。</p><p>3、将数据随机分入训练集和验证集。按照一般规律，70%-90% 数据作为训练集。这个比例根据算法中有多少超参数，以及这些超参数对于算法的预期影响来决定。如果需要预测的超参数很多，那么就应该使用更大的验证集来有效地估计它们。如果担心验证集数量不够，那么就尝试交叉验证方法。如果计算资源足够，使用交叉验证总是更加安全的（份数越多，效果越好，也更耗费计算资源）。</p><p>4、在验证集上调优，尝试足够多的k值，尝试L1和L2两种范数计算方式。</p><p>5、如果分类器跑得太慢，尝试使用Approximate Nearest Neighbor库（比如FLANN）来加速这个过程，其代价是降低一些准确率。</p><p>6、对最优的超参数做记录。记录最优参数后，是否应该让使用最优参数的算法在完整的训练集上运行并再次训练呢？因为如果把验证集重新放回到训练集中（自然训练集的数据量就又变大了），有可能最优参数又会有所变化。在实践中，不要这样做。千万不要在最终的分类器中使用验证集数据，这样做会破坏对于最优参数的估计。直接使用测试集来测试用最优参数设置好的最优模型，得到测试集数据的分类准确率，并以此作为你的kNN分类器在该数据上的性能表现。</p><h3 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><p>下面是一些你可能感兴趣的拓展阅读链接：</p><p><a href="http://homes.cs.washington.edu/%7Epedrod/papers/cacm12.pdf">A Few Useful Things to Know about Machine Learning</a>，文中第6节与本节相关，但是整篇文章都强烈推荐。<br><a href="http://people.csail.mit.edu/torralba/shortCourseRLOC/index.html">Recognizing and Learning Object Categories</a>，ICCV 2005上的一节关于物体分类的课程。</p></font>]]></content>
      
      
      <categories>
          
          <category> cs231n </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs231n </tag>
            
            <tag> 课程笔记 </tag>
            
            <tag> 图像分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs231n-图像分类笔记(上)</title>
      <link href="/2022/111616126.html"/>
      <url>/2022/111616126.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、本节大纲"><a href="#一、本节大纲" class="headerlink" title="一、本节大纲"></a>一、本节大纲</h3><blockquote><p>1、图像分类、数据驱动方法和流程<br>2、Nearest Neighbor分类器<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k-Nearest Neighbor(k最临近算法)<br>3、验证集、交叉验证集和超参数调参<br>4、Nearest Neighbor的优劣<br>5、小结：应用kNN实践<br>6、拓展阅读</p></blockquote><h3 id="二、图像分类"><a href="#二、图像分类" class="headerlink" title="二、图像分类"></a>二、图像分类</h3><p><strong>目标：</strong> 这一节我们将介绍图像分类问题。所谓图像分类问题，就是已有固定的分类标签集合，然后对于输入的图像，从分类标签集合中找出一个分类标签，最后把分类标签分配给该输入图像。虽然看起来挺简单的，但这可是计算机视觉领域的核心问题之一，并且有着各种各样的实际应用。在后面的课程中，我们可以看到计算机视觉领域中很多看似不同的问题（比如物体检测和分割），都可以被归结为图像分类问题。</p><p><strong>例子：</strong> 以下图为例，图像分类模型读取该图片，并生成该图片属于集合 {cat, dog, hat, mug}中各个标签的概率。需要注意的是，对于计算机来说，图像是一个由数字组成的巨大的3维数组。在这个例子中，猫的图像大小是宽248像素，高400像素，有3个颜色通道，分别是红、绿和蓝（简称RGB）。如此，该图像就包含了248X400X3=297600个数字，每个数字都是在范围0-255之间的整型，其中0表示全黑，255表示全白。我们的任务就是把这些上百万的数字变成一个简单的标签，比如“猫”。</p><p><img src="/2022/111616126/rgb.png" alt></p><p>Lecture2-9</p><p><strong>图像分类的任务:</strong> 就是对于一个给定的图像，预测它属于的那个分类标签（或者给出属于一系列不同标签的可能性）。图像是3维数组，数组元素是取值范围从0到255的整数。数组的尺寸是 [宽度 * 高度 * 3]，其中这个3代表的是红、绿和蓝3个颜色通道。</p><p><img src="/2022/111616126/rgbdemo.png" alt></p><p>Lecture2-8</p><p><strong>困难和挑战：</strong> 对于人来说，识别出一个像“猫”一样视觉概念是简单至极的，然而从计算机视觉算法的角度来看就值得深思了。我们在下面列举了计算机视觉算法在图像识别方面遇到的一些困难，要记住图像是以3维数组来表示的，数组中的元素是亮度值。</p><blockquote><ul><li>视角变化（Viewpoint variation）：同一个物体，摄像机可以从多个角度来展现。</li><li>大小变化（Scale variation）：物体可视的大小通常是会变化的（不仅是在图片中，在真实世界中大小也是变化的）。</li><li>形变（Deformation）：很多东西的形状并非一成不变，会有很大变化。</li><li>遮挡（Occlusion）：目标物体可能被挡住。有时候只有物体的一小部分（可以小到几个像素）是可见的。</li><li>光照条件（Illumination conditions）：在像素层面上，光照的影响非常大。</li><li>背景干扰（Background clutter）：物体可能混入背景之中，使之难以被辨认。</li><li>类内差异（Intra-class variation）：一类物体的个体之间的外形差异很大，比如椅子。这一类物体有许多不同的对象，每个都有自己的外形。</li></ul></blockquote><p><img src="/2022/111616126/%E5%9B%B0%E9%9A%BE%E4%B8%8E%E6%8C%91%E6%88%98.png" alt></p><p><strong>数据驱动方法：</strong> 如何写一个图像分类的算法呢？这和写个排序算法可是大不一样。怎么写一个从图像中认出猫的算法？搞不清楚。因此，与其在代码中直接写明各类物体到底看起来是什么样的，倒不如说我们采取的方法和教小孩儿看图识物类似：给计算机很多数据，然后实现学习算法，让计算机学习到每个类的外形。这种方法，就是数据驱动方法。既然该方法的第一步就是收集已经做好分类标注的图片来作为训练集，那么下面就看看数据库到底长什么样：<br><img src="/2022/111616126/dataset.png" alt></p><p><strong>图像分类流程:</strong> 在课程视频中已经学习过，图像分类就是输入一个元素为像素值的数组，然后给它分配一个分类标签。完整流程如下：</p><blockquote><ul><li><strong>输入：</strong> 输入是包含N个图像的集合，每个图像的标签是K种分类标签中的一种。这个集合称为训练集。</li><li><strong>学习：</strong>这一步的任务是使用训练集来学习每个类到底长什么样。一般该步骤叫做训练分类器或者学习一个模型。</li><li><strong>评价：</strong>让分类器来预测它未曾见过的图像的分类标签，并以此来评价分类器的质量。我们会把分类器预测的标签和图像真正的分类标签对比。毫无疑问，分类器预测的分类标签和图像真正的分类标签如果一致，那就是好事，这样的情况越多越好。</li></ul></blockquote><h3 id="三、Nearest-Neighbor-最邻近算法-分类器"><a href="#三、Nearest-Neighbor-最邻近算法-分类器" class="headerlink" title="三、Nearest Neighbor(最邻近算法)分类器"></a>三、Nearest Neighbor(最邻近算法)分类器</h3><p>作为课程介绍的第一个方法，我们来实现一个<strong>Nearest Neighbor分类器</strong>。虽然这个分类器和卷积神经网络没有任何关系，实际中也极少使用，但通过实现它，可以让读者对于解决图像分类问题的方法有个基本的认识。</p><p><strong>图像分类数据集：CIFAR-10</strong> 一个非常流行的图像分类数据集是<a href="http://www.cs.toronto.edu/~kriz/cifar.html">CIFAR-10</a>。这个数据集包含了60000张32X32的小图像。每张图像都有10种分类标签中的一种。这60000张图像被分为包含50000张图像的训练集和包含10000张图像的测试集。在下图中你可以看见10个类的10张随机图片。<br><img src="/2022/111616126/cifar.png" alt></p><p>假设现在我们有CIFAR-10的50000张图片（每种分类5000张）作为训练集，我们希望将余下的10000作为测试集并给他们打上标签。Nearest Neighbor算法将会拿着测试图片和训练集中每一张图片去比较，然后将它认为最相似的那个训练集图片的标签赋给这张测试图片。上面右边的图片就展示了这样的结果。请注意上面10个分类中，只有3个是准确的。比如第8行中，马头被分类为一个红色的跑车，原因在于红色跑车的黑色背景非常强烈，所以这匹马就被错误分类为跑车了。</p><p>那么具体如何比较两张图片呢？在本例中，就是比较32x32x3的像素块。最简单的方法就是逐个像素比较，最后将差异值全部加起来。换句话说，就是将两张图片先转化为两个向量I1和，然后计算他们的L1距离：<br><img src="/2022/111616126/l1.png" alt></p><p>下面，让我们看看如何用代码来实现这个分类器。首先，我们将CIFAR-10的数据加载到内存中，并分成4个数组：训练数据和标签，测试数据和标签。在下面的代码中，Xtr（大小是50000x32x32x3）存有训练集中所有的图像，Ytr是对应的长度为50000的1维数组，存有图像对应的分类标签（从0到9）：</p><pre class="language-python" data-language="python"><code class="language-python">Xtr<span class="token punctuation">,</span> Ytr<span class="token punctuation">,</span> Xte<span class="token punctuation">,</span> Yte <span class="token operator">=</span> load_CIFAR10<span class="token punctuation">(</span><span class="token string">'data/cifar10/'</span><span class="token punctuation">)</span> <span class="token comment"># a magic function we provide</span><span class="token comment"># flatten out all images to be one-dimensional</span><span class="token comment"># 将原始的width * height * 3的数据reshape为1维的数据</span>Xtr_rows <span class="token operator">=</span> Xtr<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>Xtr<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">32</span> <span class="token operator">*</span> <span class="token number">32</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># Xtr_rows becomes 50000 x 3072</span>Xte_rows <span class="token operator">=</span> Xte<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>Xte<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">32</span> <span class="token operator">*</span> <span class="token number">32</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># Xte_rows becomes 10000 x 3072</span></code></pre><p>现在我们得到所有的图像数据，并且把他们拉长成为行向量了。接下来展示如何训练并评价一个分类器：</p><pre class="language-python" data-language="python"><code class="language-python">nn <span class="token operator">=</span> NearestNeighbor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># create a Nearest Neighbor classifier class</span>nn<span class="token punctuation">.</span>train<span class="token punctuation">(</span>Xtr_rows<span class="token punctuation">,</span> Ytr<span class="token punctuation">)</span> <span class="token comment"># train the classifier on the training images and labels</span>Yte_predict <span class="token operator">=</span> nn<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>Xte_rows<span class="token punctuation">)</span> <span class="token comment"># predict labels on the test images</span><span class="token comment"># and now print the classification accuracy, which is the average number</span><span class="token comment"># of examples that are correctly predicted (i.e. label matches)</span><span class="token keyword">print</span> <span class="token string">'accuracy: %f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>Yte_predict <span class="token operator">==</span> Yte<span class="token punctuation">)</span> <span class="token punctuation">)</span></code></pre><p>作为评价标准，我们常常使用准确率，它描述了我们预测正确的得分。请注意以后我们实现的所有分类器都需要有这个API：train(X, y)函数。该函数使用训练集的数据和标签来进行训练。从其内部来看，类应该实现一些关于标签和标签如何被预测的模型。这里还有个predict(X)函数，它的作用是预测输入的新数据的分类标签。现在还没介绍分类器的实现，下面就是使用L1距离的Nearest Neighbor分类器的实现套路：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">class</span> <span class="token class-name">NearestNeighbor</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>  <span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" X is N x D where each row is an example. Y is 1-dimension of size N """</span>    <span class="token comment"># the nearest neighbor classifier simply remembers all the training data</span>    self<span class="token punctuation">.</span>Xtr <span class="token operator">=</span> X    self<span class="token punctuation">.</span>ytr <span class="token operator">=</span> y  <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" X is N x D where each row is an example we wish to predict label for """</span>    num_test <span class="token operator">=</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment"># lets make sure that the output type matches the input type</span>    Ypred <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>num_test<span class="token punctuation">,</span> dtype <span class="token operator">=</span> self<span class="token punctuation">.</span>ytr<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>    <span class="token comment"># loop over all test rows</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>num_test<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># find the nearest training image to the i'th test image</span>      <span class="token comment"># using the L1 distance (sum of absolute value differences)</span>      distances <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>Xtr <span class="token operator">-</span> X<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>      min_index <span class="token operator">=</span> np<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span>distances<span class="token punctuation">)</span> <span class="token comment"># get the index with smallest distance</span>      Ypred<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>ytr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token comment"># predict the label of the nearest example</span>    <span class="token keyword">return</span> Ypred</code></pre><p><img src="/2022/111616126/testFast.png" alt></p><p>如果你用这段代码跑CIFAR-10，你会发现准确率能达到38.6%。这比随机猜测的10%要好，但是比人类识别的<a href="http://karpathy.github.io/2011/04/27/manually-classifying-cifar10/">水平（据研究推测是94%）</a>和卷积神经网络能达到的95%还是差多了。点击查看基于CIFAR-10数据的<a href="https://www.kaggle.com/c/cifar-10/leaderboard">Kaggle算法竞赛排行榜</a>。</p><p><strong>距离选择：</strong> 计算向量间的距离有很多种方法，另一个常用的方法是L2距离，从几何学的角度，可以理解为它在计算两个向量间的欧式距离。L2距离的公式如下：<br><img src="/2022/111616126/l2.png" alt></p><p>换句话说，我们依旧是在计算像素间的差值，只是先求其平方，然后把这些平方全部加起来，最后对这个和开方。在Numpy中，我们只需要替换上面代码中的1行代码就行：</p><pre class="language-python" data-language="python"><code class="language-python">distances <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>self<span class="token punctuation">.</span>Xtr <span class="token operator">-</span> X<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>注意在这里使用了np.sqrt，但是在实际中可能不用。因为求平方根函数是一个单调函数，它对不同距离的绝对值求平方根虽然改变了数值大小，但依然保持了不同距离大小的顺序。所以用不用它，都能够对像素差异的大小进行正确比较。如果你在CIFAR-10上面跑这个模型，正确率是35.4%，比刚才低了一点。</p><p><strong>L1和L2比较</strong> 比较这两个度量方式是挺有意思的。在面对两个向量之间的差异时，L2比L1更加不能容忍这些差异。也就是说，相对于1个巨大的差异，L2距离更倾向于接受多个中等程度的差异。L1和L2都是在p-norm常用的特殊形式。</p><h3 id="四、k-Nearest-Neighbor分类器"><a href="#四、k-Nearest-Neighbor分类器" class="headerlink" title="四、k-Nearest Neighbor分类器"></a>四、k-Nearest Neighbor分类器</h3><p>你可能注意到了，为什么只用最相似的1张图片的标签来作为测试图像的标签呢？这不是很奇怪吗！是的，使用k-Nearest Neighbor分类器就能做得更好。它的思想很简单：与其只找最相近的那1个图片的标签，我们找最相似的k个图片的标签，然后让他们针对测试图片进行投票，最后把票数最高的标签作为对测试图片的预测。所以当k=1的时候，k-Nearest Neighbor分类器就是Nearest Neighbor分类器。从直观感受上就可以看到，更高的k值可以让分类的效果更平滑，使得分类器对于异常值更有抵抗力。</p><p><img src="/2022/111616126/k.png" alt></p><p>上面示例展示了Nearest Neighbor分类器和5-Nearest Neighbor分类器的区别。例子使用了2维的点来表示，分成3类（红、蓝和绿）。不同颜色区域代表的是使用L2距离的分类器的决策边界。白色的区域是分类模糊的例子（即图像与两个以上的分类标签绑定）。需要注意的是，在NN分类器中，异常的数据点（比如：在蓝色区域中的绿点）制造出一个不正确预测的孤岛。5-NN分类器将这些不规则都平滑了，使得它针对测试数据的泛化（generalization）能力更好（例子中未展示）。注意，5-NN中也存在一些灰色区域，这些区域是因为近邻标签的最高票数相同导致的（比如：2个邻居是红色，2个邻居是蓝色，还有1个是绿色）。</p><p>在实际中，大多使用k-NN分类器。但是k值如何确定呢？接下来就讨论这个问题。</p></font>]]></content>
      
      
      <categories>
          
          <category> cs231n </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs231n </tag>
            
            <tag> 课程笔记 </tag>
            
            <tag> 图像分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发挥你的奇思妙想，提出一些idea</title>
      <link href="/2022/111516128.html"/>
      <url>/2022/111516128.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="毕设"><a href="#毕设" class="headerlink" title="毕设"></a>毕设</h3><p>1、添加注意力机制进SSD或者YOLO的方法当中，完成行人识别的效果<br>2、使用UESTC的数据集完成行人的目标检测<br>3、完成实验<br>4、论文</p><p>一、行人检测常用方法<br>1、基于运动检测的方法<br>1) 思路<br>通过前面的帧学习得到一个背景模型，然后用当前帧与背景帧进行比较，得到运动的目标，即图像中变化的区域</p><p>2) 存在问题<br>只能检测运动的目标，对于静止的目标无法处理；受光照变化、阴影的影响很大；如果目标的颜色和背景很接近，会造成漏检和断裂；容易受到恶劣天气如雨雪，以及树叶晃动等干扰物的影响；如果多个目标粘连，重叠，则无法处理</p><p>3) 原因<br>只利用了像素级的信息，没有利用图像中更高层的语义信息<br><font color="#ff0000">两者方法的相结合？ 在创新的方法上加入这种像素级别的检测</font></p><p>2、基于传统机器学习的方法<br>1) 思路<br>特征提取+分类器</p><p>2) 特征提取<br>a) 底层特征<br>优点：单一特征，计算速度快<br>缺点：只从某一方面描述行人特征，判别力较差<br>b) 基于学习的特征<br>优点：能从大量的样本中选择去判别能力较强的特征<br>缺点：特征的选择质量与训练样本密切相关，若训练集代表性差则很难选出好的特征<br>c) 混合特征<br>优点：从不同方向描述图像特征<br>缺点：特征维度增加，训练与预测的时间长，部分终端设备无法满足其算力要求</p><h3 id="交通流"><a href="#交通流" class="headerlink" title="交通流"></a>交通流</h3><p>1、添加注意力机制 进LSTM的一种模型当中，完成数据的校验</p><p>idea：<br>1、放弃局部，保持全局最优<br>–在局部做算法的同时，考虑到一定的局部损失，从而保证全局的最优化</p></font>]]></content>
      
      
      <categories>
          
          <category> 科研er </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研er </tag>
            
            <tag> 打脑壳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs231n-认识cs231n</title>
      <link href="/2022/111516125.html"/>
      <url>/2022/111516125.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、CS231N课程笔记学习"><a href="#一、CS231N课程笔记学习" class="headerlink" title="一、CS231N课程笔记学习"></a>一、CS231N课程笔记学习</h3><h4 id="1、cs231n简介"><a href="#1、cs231n简介" class="headerlink" title="1、cs231n简介"></a>1、cs231n简介</h4><p>CS231n的全称是CS231n: <a href="http://vision.stanford.edu/teaching/cs231n/index.html">Convolutional Neural Networks for Visual Recognition</a>，即面向视觉识别的卷积神经网络。该课程是斯坦福大学计算机视觉实验室推出的课程。需要注意的是，目前大家说CS231n，大都指的是2016年冬季学期（一月到三月）的最新版本。</p><h4 id="2、课程描述：请允许我们引用课程主页上的官方描述如下。"><a href="#2、课程描述：请允许我们引用课程主页上的官方描述如下。" class="headerlink" title="2、课程描述：请允许我们引用课程主页上的官方描述如下。"></a>2、课程描述：请允许我们引用课程主页上的官方描述如下。</h4><blockquote><p>计算机视觉在社会中已经逐渐普及，并广泛运用于搜索检索、图像理解、手机应用、地图导航、医疗制药、无人机和无人驾驶汽车等领域。而这些应用的核心技术就是图像分类、图像定位和图像探测等视觉识别任务。近期神经网络（也就是“深度学习”）方法上的进展极大地提升了这些代表当前发展水平的视觉识别系统的性能。</p></blockquote><blockquote><p>本课程将深入讲解深度学习框架的细节问题，聚焦面向视觉识别任务（尤其是图像分类任务）的端到端学习模型。在10周的课程中，学生们将会学习如何实现、训练和调试他们自己的神经网络，并建立起对计算机视觉领域的前沿研究方向的细节理解。最终的作业将包括训练一个有几百万参数的卷积神经网络，并将其应用到最大的图像分类数据库（ImageNet）上。我们将会聚焦于教授如何确定图像识别问题，学习算法（比如反向传播算法），对网络的训练和精细调整（fine-tuning）中的工程实践技巧，指导学生动手完成课程作业和最终的课程项目。本课程的大部分背景知识和素材都来源于ImageNet Challenge竞赛。</p></blockquote><h4 id="3、课程的内容"><a href="#3、课程的内容" class="headerlink" title="3、课程的内容"></a>3、课程的内容</h4><blockquote><ul><li>授课视频15课。每节课时约1小时左右，每节课一份PPT。</li><li>授课知识详解笔记共9份。光看课程视频是不够的，深入理解课程笔记才能比较扎实地学习到知识。</li><li>课程作业3次。其中每次作业中又包含多个小作业，完成作业能确保对于课程关键知识的深入理解和实现。</li><li>课程项目1个。这个更多是面向斯坦福的学生，组队实现课程项目。</li><li>拓展阅读若干。课程推荐的拓展阅读大多是领域内的经典著作节选或论文，推荐想要深入学习的同学阅读。</li></ul></blockquote><h4 id="4、课程大纲"><a href="#4、课程大纲" class="headerlink" title="4、课程大纲"></a>4、课程大纲</h4><h6 id="Lecture-1：引言（Introduction）"><a href="#Lecture-1：引言（Introduction）" class="headerlink" title="Lecture 1：引言（Introduction）"></a>Lecture 1：引言（Introduction）</h6><p>计算机视觉的概述、历史背景以及课程计划</p><h6 id="Lecture-2：图像分类（Image-Classification-pipeline）"><a href="#Lecture-2：图像分类（Image-Classification-pipeline）" class="headerlink" title="Lecture 2：图像分类（Image Classification pipeline）"></a>Lecture 2：图像分类（Image Classification pipeline）</h6><p>数据驱动（data-driven）方法<br>最邻近、K近邻方法（KNN）、L1距离、L2距离<br>线性分类（linear classification）方法，线性分类器f-评分函数s</p><h6 id="Lecture-3：损失函数和优化（loss-Function-and-optimization）"><a href="#Lecture-3：损失函数和优化（loss-Function-and-optimization）" class="headerlink" title="Lecture 3：损失函数和优化（loss Function and optimization）"></a>Lecture 3：损失函数和优化（loss Function and optimization）</h6><p>损失函数（SVM、Softmax）、正则化<br>最优化（梯度计算、梯度下降-BGD\SGD\MBGD）<br>图像的特征表示</p><h6 id="Lecture-4：反向传播与神经网络（Backpropagation-and-Neural-Networks）"><a href="#Lecture-4：反向传播与神经网络（Backpropagation-and-Neural-Networks）" class="headerlink" title="Lecture 4：反向传播与神经网络（Backpropagation and Neural Networks）"></a>Lecture 4：反向传播与神经网络（Backpropagation and Neural Networks）</h6><p>反向传播算法（back-propagation）<br>多层感知机结构（multilayer perceptrons）<br>神将网络（函数和神经元视角）<br>激活函数</p><h6 id="Lecture-5：卷积神经网络（CNN，Convolutional-Neural-Networks）"><a href="#Lecture-5：卷积神经网络（CNN，Convolutional-Neural-Networks）" class="headerlink" title="Lecture 5：卷积神经网络（CNN，Convolutional Neural Networks）"></a>Lecture 5：卷积神经网络（CNN，Convolutional Neural Networks）</h6><p>卷积神经网络的历史背景及发展；<br>卷积与池化（convolution and pooling）;<br>ConvNets 的效果</p><h6 id="Lecture-6：如何训练神经网络-I（Training-Neural-Networks-Part-I）"><a href="#Lecture-6：如何训练神经网络-I（Training-Neural-Networks-Part-I）" class="headerlink" title="Lecture 6：如何训练神经网络 I（Training Neural Networks,Part I）"></a>Lecture 6：如何训练神经网络 I（Training Neural Networks,Part I）</h6><p>各类激活函数，数据预处理，权重初始化，分批归一化（batch normalization）以及超参优化（hyper-parameter optimization）。</p><h6 id="Lecture-7：如何训练神经网络-II（Training-Neural-Networks-Part-2）"><a href="#Lecture-7：如何训练神经网络-II（Training-Neural-Networks-Part-2）" class="headerlink" title="Lecture 7：如何训练神经网络 II（Training Neural Networks,Part 2）"></a>Lecture 7：如何训练神经网络 II（Training Neural Networks,Part 2）</h6><p>优化方法（optimization）、模型集成（model ensembles）、正则化（regularization）、数据扩张（data-augmentation）和迁移学习（transfer learning）。</p><h6 id="Lecture-8-深度学习软件（Deep-Learning-Software）"><a href="#Lecture-8-深度学习软件（Deep-Learning-Software）" class="headerlink" title="Lecture 8: 深度学习软件（Deep Learning Software）"></a>Lecture 8: 深度学习软件（Deep Learning Software）</h6><p>详细对比了 CPU 和 GPU；<br>TensorFlow、Theano、PyTorch、Torch、Caffe 实例的具体说明；<br>各类框架的对比及用途分析。</p><h6 id="Lecture-9：卷积神经网络架构（CNN-Architectures）"><a href="#Lecture-9：卷积神经网络架构（CNN-Architectures）" class="headerlink" title="Lecture 9：卷积神经网络架构（CNN Architectures）"></a>Lecture 9：卷积神经网络架构（CNN Architectures）</h6><p>从 LeNet-5 开始到 AlexNet、VGG、GoogLeNet、ResNet 等由理论到实例详细描述了卷积神经网络的架构与原理。</p><h6 id="Lecture-10：循环神经网络（Recurrent-Neural-Networks）"><a href="#Lecture-10：循环神经网络（Recurrent-Neural-Networks）" class="headerlink" title="Lecture 10：循环神经网络（Recurrent Neural Networks）"></a>Lecture 10：循环神经网络（Recurrent Neural Networks）</h6><p>先详细介绍了 RNN、LSTM 和 GRU 的架构与原理，再从语言建模、图像描述、视觉问答系统等对这些模型进行进一步的描述。</p><h6 id="Lecture-11：检测与分割（Detection-and-Segmentation）"><a href="#Lecture-11：检测与分割（Detection-and-Segmentation）" class="headerlink" title="Lecture 11：检测与分割（Detection and Segmentation）"></a>Lecture 11：检测与分割（Detection and Segmentation）</h6><p>该课程在图像分类的基础上介绍了其他的计算机视觉任务，如语义分割、目标检测和实例分割等，同时还详细介绍了其它如 R-CNN、Fast R-CNN、Mask R-CNN 等架构。</p><h6 id="Lecture-12：可视化和理解（Visualizing-and-Understanding）"><a href="#Lecture-12：可视化和理解（Visualizing-and-Understanding）" class="headerlink" title="Lecture 12：可视化和理解（Visualizing and Understanding）"></a>Lecture 12：可视化和理解（Visualizing and Understanding）</h6><p>该部分不仅讲述了特征可视化和转置，同时还描述了对抗性样本和像 DeepDream 那样的风格迁移系统。</p><h6 id="Lecture-13：生成模型（Generative-Models）"><a href="#Lecture-13：生成模型（Generative-Models）" class="headerlink" title="Lecture 13：生成模型（Generative Models）"></a>Lecture 13：生成模型（Generative Models）</h6><p>该章节从 PixelRNN 和 PixelCNN 开始，再到变分自编码器和生成对抗网络详细地讲解了生成模型。</p><h6 id="Lecture-14：强化学习（Reinforcement-Learning）"><a href="#Lecture-14：强化学习（Reinforcement-Learning）" class="headerlink" title="Lecture 14：强化学习（Reinforcement Learning）"></a>Lecture 14：强化学习（Reinforcement Learning）</h6><p>该章节先从基本概念解释了什么是强化学习，再解释了马尔可夫决策过程如何形式化强化学习的基本概念。最后对 Q 学习和策略梯度进行了详细的刻画，包括架构、优化策略和训练方案等等。</p><h6 id="Lecture-15：深度学习高效的方法和硬件（Efficient-Methods-and-Hardware-for-Deep-Learning）"><a href="#Lecture-15：深度学习高效的方法和硬件（Efficient-Methods-and-Hardware-for-Deep-Learning）" class="headerlink" title="Lecture 15：深度学习高效的方法和硬件（Efficient Methods and Hardware for Deep Learning）"></a>Lecture 15：深度学习高效的方法和硬件（Efficient Methods and Hardware for Deep Learning）</h6><p>该章节首先展示了深度学习的三大挑战：即模型规模、训练速度和能源效率。而解决方案可以通过联合设计算法 - 硬件以提高深度学习效率，构建更高效的推断算法等，</p><h6 id="Lecture-16：对抗性样本和对抗性训练（Adversarial-Examples-and-Adversarial-Training）"><a href="#Lecture-16：对抗性样本和对抗性训练（Adversarial-Examples-and-Adversarial-Training）" class="headerlink" title="Lecture 16：对抗性样本和对抗性训练（Adversarial Examples and Adversarial Training）"></a>Lecture 16：对抗性样本和对抗性训练（Adversarial Examples and Adversarial Training）</h6><p>讲了主要从什么事对抗性样本、对抗性样本产生的原因、如何将对抗性样本应用到企业机器学习系统中、及对抗性样本会如何提升机器学习的性能等方面详细描述对抗性样本和对抗性训练。</p><h4 id="5、课程学习"><a href="#5、课程学习" class="headerlink" title="5、课程学习"></a>5、课程学习</h4><p><img src="/2022/111516125/%E5%AD%A6%E4%B9%A0%E8%BF%9B%E5%BA%A6.png" alt></p><h3 id="二、笔记汇总"><a href="#二、笔记汇总" class="headerlink" title="二、笔记汇总"></a>二、笔记汇总</h3><h5 id="python-numpy："><a href="#python-numpy：" class="headerlink" title="python numpy："></a>python numpy：</h5><p><a href="https://cs231n.github.io/python-numpy-tutorial/">笔记原文</a><br><a href="https://zhuanlan.zhihu.com/p/20878530?refer=intelligentunit">翻译</a></p><blockquote><p>我们将使用Python编程语言来完成本课程的所有作业。Python是一门伟大的通用编程语言，在一些常用库（numpy, scipy, matplotlib）的帮助下，它又会变成一个强大的科学计算环境。我们期望你们中大多数人对于Python语言和Numpy库比较熟悉，而对于没有Python经验的同学，这篇教程可以帮助你们快速了解Python编程环境和如何使用Python作为科学计算工具。</p></blockquote><h5 id="图像分类："><a href="#图像分类：" class="headerlink" title="图像分类："></a>图像分类：</h5><p><a href="https://cs231n.github.io/classification/">笔记原文</a><br><a href="https://zhuanlan.zhihu.com/p/20878530?refer=intelligentunit">翻译</a></p><blockquote><p>该笔记是一篇介绍性教程，面向非计算机视觉领域的同学。教程将向同学们介绍图像分类问题和数据驱动方法，内容列表：<br>1、图像分类、数据驱动方法和流程<br>2、Nearest Neighbor分类器<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k-Nearest Neighbor<br>3、验证集、交叉验证集和超参数调参<br>4、Nearest Neighbor的优劣<br>5、小结：应用kNN实践<br>拓展阅读</p></blockquote><h5 id="线性分类："><a href="#线性分类：" class="headerlink" title="线性分类："></a>线性分类：</h5><p><a href="https://cs231n.github.io/linear-classify/">笔记原文</a><br><a href="https://zhuanlan.zhihu.com/p/20878530?refer=intelligentunit">翻译</a></p><blockquote><p>我们将要实现一种更强大的方法来解决图像分类问题，该方法可以自然地延伸到神经网络和卷积神经网络上。这种方法主要有两部分组成：一个是评分函数（score function），它是原始图像数据到类别分值的映射。另一个是损失函数（loss function），它是用来量化预测分类标签的得分与真实标签之间一致性的。该方法可转化为一个最优化问题，在最优化过程中，将通过更新评分函数的参数来最小化损失函数值。内容列表：<br>1、线性分类器简介<br>2、线性评分函数<br>3、阐明线性分类器 译者注：上篇翻译截止处<br>4、损失函数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;多类SVM<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Softmax分类器<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SVM和Softmax的比较<br>5、基于Web的可交互线性分类器原型<br>小结</p></blockquote><h5 id="最优化："><a href="#最优化：" class="headerlink" title="最优化："></a>最优化：</h5><p><a href="https://cs231n.github.io/optimization-1/">笔记原文</a><br><a href="https://zhuanlan.zhihu.com/p/20878530?refer=intelligentunit">翻译</a></p><blockquote><p>1、损失函数可视化<br>2、最优化<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;策略#1：随机搜索<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;策略#2：随机局部搜索<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;策略#3：跟随梯度 译者注：上篇截止处<br>3、梯度计算<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用有限差值进行数值计算<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;微分计算梯度<br>4、梯度下降<br>小结</p></blockquote><h5 id="反向传播："><a href="#反向传播：" class="headerlink" title="反向传播："></a>反向传播：</h5><p><a href="https://cs231n.github.io/optimization-2/">笔记原文</a><br><a href="https://zhuanlan.zhihu.com/p/20878530?refer=intelligentunit">翻译</a></p><blockquote><p>该笔记本将帮助读者对反向传播形成直观而专业的理解。反向传播是利用链式法则递归计算表达式的梯度的方法。理解反向传播过程及其精妙之处，对于理解、实现、设计和调试神经网络非常关键。内容里列表如下：<br>1、简介<br>2、简单表达式和理解梯度<br>3、复合表达式，链式法则，反向传播<br>4、直观理解反向传播<br>5、模块：Sigmoid例子<br>6、反向传播实践：分段计算<br>7、回传流中的模式<br>8、用户向量化操作的梯度</p></blockquote><h5 id="神经网络笔记1"><a href="#神经网络笔记1" class="headerlink" title="神经网络笔记1"></a>神经网络笔记1</h5><p><a href="https://cs231n.github.io/neural-networks-1/">笔记原文</a><br><a href="https://zhuanlan.zhihu.com/p/20878530?refer=intelligentunit">翻译</a></p><blockquote><p>1、不用大脑做类比的快速简介<br>2、单个神经元建模<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;生物动机和连接<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;作为线性分类器的单个神经元<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;常用的激活函数<br>3、神经网络结构<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;层组织<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前向传播计算例子<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表达能力<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设置层的数量和尺寸<br>小结<br>参考文献</p></blockquote><h5 id="神经网络笔记2"><a href="#神经网络笔记2" class="headerlink" title="神经网络笔记2"></a>神经网络笔记2</h5><p><a href="https://cs231n.github.io/neural-networks-2/">笔记原文</a><br><a href="https://zhuanlan.zhihu.com/p/20878530?refer=intelligentunit">翻译</a></p><blockquote><p>该笔记介绍了数据的预处理，正则化和损失函数，内容列表如下：<br>1、设置数据和模型<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据预处理<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;权重初始化<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;批量归一化（Batch Normalization）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;正则化（L2/L1/Maxnorm/Dropout）<br>2、损失函数<br>小结</p></blockquote><h5 id="神经网络笔记3"><a href="#神经网络笔记3" class="headerlink" title="神经网络笔记3"></a>神经网络笔记3</h5><p><a href="https://cs231n.github.io/neural-networks-3/">笔记原文</a><br><a href="https://zhuanlan.zhihu.com/p/20878530?refer=intelligentunit">翻译</a></p><blockquote><p>该笔记讲解了神经网络的动态部分，即神经网络学习参数和搜索最优超参数的过程。内容列表如下：<br>梯度检查<br>合理性（Sanity）检查<br>检查学习过程<br>1、损失函数<br>2、训练集与验证集准确率<br>3、权重：更新比例<br>4、每层的激活数据与梯度分布<br>5.可视化 译者注：上篇翻译截止处<br>参数更新<br>1、一阶（随机梯度下降）方法，动量方法，Nesterov动量方法<br>2、学习率退火<br>3、二阶方法<br>4、逐参数适应学习率方法（Adagrad，RMSProp）<br>超参数调优<br>评价<br>模型集成<br>总结<br>拓展引用</p></blockquote><h5 id="卷积神经网络笔记"><a href="#卷积神经网络笔记" class="headerlink" title="卷积神经网络笔记"></a>卷积神经网络笔记</h5><p><a href="http://cs231n.github.io/convolutional-networks/">笔记原文</a><br><a href="https://zhuanlan.zhihu.com/p/20878530?refer=intelligentunit">翻译</a></p><blockquote><p>内容列表：<br>1、结构概述<br>2、用来构建卷积神经网络的各种层<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;卷积层<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;汇聚层<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;归一化层<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;全连接层<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将全连接层转化成卷积层<br>3、卷积神经网络的结构<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;层的排列规律<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;层的尺寸设置规律<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;案例学习（LeNet / AlexNet / ZFNet / GoogLeNet / VGGNet）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;计算上的考量<br>拓展资源</p></blockquote><h5 id="作业一"><a href="#作业一" class="headerlink" title="作业一"></a>作业一</h5><p><a href="http://cs231n.github.io/assignments2016/assignment1/">笔记原文</a><br><a href="https://zhuanlan.zhihu.com/p/20878530?refer=intelligentunit">翻译</a></p><blockquote><p>作业内容：实现k-NN，SVM分类器，Softmax分类器和两层神经网络，实践一个简单的图像分类流程。</p></blockquote><h5 id="作业二"><a href="#作业二" class="headerlink" title="作业二"></a>作业二</h5><p><a href="http://cs231n.github.io/assignments2016/assignment2/">笔记原文</a><br><a href="https://zhuanlan.zhihu.com/p/20878530?refer=intelligentunit">翻译</a></p><blockquote><p>作业内容：练习编写反向传播代码，训练神经网络和卷积神经网络。</p></blockquote><h5 id="作业三"><a href="#作业三" class="headerlink" title="作业三"></a>作业三</h5><p><a href="http://cs231n.github.io/assignments2016/assignment3/">笔记原文</a><br><a href="https://zhuanlan.zhihu.com/p/20878530?refer=intelligentunit">翻译</a></p><blockquote><p>作业内容：实现循环网络，并将其应用于在微软的COCO数据库上进行图像标注。实现DeepDream等有趣应用。</p></blockquote><h3 id="三、相关地址"><a href="#三、相关地址" class="headerlink" title="三、相关地址"></a>三、相关地址</h3><p><a href="https://zhuanlan.zhihu.com/p/21930884">笔记参考</a><br>学习目录：[H:\cs231n]</p></font>]]></content>
      
      
      <categories>
          
          <category> cs231n </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs231n </tag>
            
            <tag> 课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VGG-VGG源代码及结构解析和训练</title>
      <link href="/2022/111316124.html"/>
      <url>/2022/111316124.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><p><img src="/2022/111316124/vgg16%E6%AF%8F%E4%B8%80%E5%B1%82%E5%8F%98%E5%8C%96%E5%9B%BE.png" alt></p><h3 id="一、VGG16的结构"><a href="#一、VGG16的结构" class="headerlink" title="一、VGG16的结构"></a>一、VGG16的结构</h3><p>可以看到，输入的图片大小为224 x 224，通道数为3<br>第一层(卷积层)：224 x 224 x 64<br>第二层(卷积层)：224 x 224 x 64<br>最大池化层：112 x 112 x 128<br>第三层(卷积层)：112 x 112 x 128<br>第四层(卷积层)：112 x 112 x 128<br>最大池化层：56 x 56 x 256<br>第五层(卷积层): 56 x 56 x 256<br>第六层(卷积层): 56 x 56 x 256<br>第七层(卷积层): 56 x 56 x 256<br>最大池化层：28 x 28 x 512<br>第八层(卷积层): 28 x 28 x 512<br>第九层(卷积层): 28 x 28 x 512<br>第十层(卷积层): 28 x 28 x 512<br>最大池化层：14 x 14 x 512<br>第十一层(卷积层): 14 x 14 x 512<br>第十二层(卷积层): 14 x 14 x 512<br>第十三层(卷积层): 14 x 14 x 512<br>最大池化层：7 x 7 x 512<br>第十四层(全连接层): 1 x 1 x 4096<br>第十五层(全连接层): 1 x 1 x 4096<br>第十六层(全连接层): 1 x 1 x 1000<br>softmax函数</p><p>通过不断卷积、池化来提取特征，通过全连接层以及softmax函数可实现分类。下面根据结构来写代码，其中M代表最大池化，base里面定义了每一层通道数：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">vgg</span><span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> i<span class="token punctuation">,</span> batch_norm<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    layers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    in_channels <span class="token operator">=</span> i    <span class="token keyword">for</span> v <span class="token keyword">in</span> cfg<span class="token punctuation">:</span>        <span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token string">'M'</span><span class="token punctuation">:</span>            layers <span class="token operator">+=</span> <span class="token punctuation">[</span>nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            conv2d <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> v<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> batch_norm<span class="token punctuation">:</span>                layers <span class="token operator">+=</span> <span class="token punctuation">[</span>conv2d<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                layers <span class="token operator">+=</span> <span class="token punctuation">[</span>conv2d<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            in_channels <span class="token operator">=</span> v    pool5 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    conv6 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">4096</span><span class="token punctuation">)</span>    conv7 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span><span class="token number">4096</span><span class="token punctuation">)</span>    conv8 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>    layers <span class="token operator">+=</span> <span class="token punctuation">[</span>pool5<span class="token punctuation">,</span> conv6<span class="token punctuation">,</span>               nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> conv7<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>， conv8<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> layersbase <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span>   <span class="token string">'M'</span><span class="token punctuation">,</span>        <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">]</span></code></pre><h3 id="二、使用CIFAR-10数据集实现分类"><a href="#二、使用CIFAR-10数据集实现分类" class="headerlink" title="二、使用CIFAR-10数据集实现分类"></a>二、使用CIFAR-10数据集实现分类</h3><p>看源代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> torch <span class="token keyword">import</span> optim<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token triple-quoted-string string">'''定义超参数'''</span>batch_size <span class="token operator">=</span> <span class="token number">256</span>        <span class="token comment"># 批的大小</span>learning_rate <span class="token operator">=</span> <span class="token number">1e-3</span>    <span class="token comment"># 学习率</span>num_epoches <span class="token operator">=</span> <span class="token number">100</span>       <span class="token comment"># 遍历训练集的次数</span><span class="token triple-quoted-string string">'''transform = transforms.Compose([    transforms.RandomSizedCrop(224),    transforms.RandomHorizontalFlip(),    transforms.ToTensor(),    transforms.Normalize(mean = [ 0.485, 0.456, 0.406 ],                         std  = [ 0.229, 0.224, 0.225 ]),    ])'''</span><span class="token triple-quoted-string string">'''下载训练集 CIFAR-10 10分类训练集'''</span>train_dataset <span class="token operator">=</span> datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">'./data'</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_dataset <span class="token operator">=</span> datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">'./data'</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''定义网络模型'''</span><span class="token keyword">class</span> <span class="token class-name">VGG16</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>VGG16<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>features <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            <span class="token comment">#1</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">#2</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">#3</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">#4</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">#5</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">#6</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">#7</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">#8</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">#9</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">#10</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">#11</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">#12</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">#13</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>AvgPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>classifier <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            <span class="token comment">#14</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">#15</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">#16</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span>num_classes<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>        <span class="token comment">#self.classifier = nn.Linear(512, 10)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>features<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment">#        print(out.shape)</span>        out <span class="token operator">=</span> out<span class="token punctuation">.</span>view<span class="token punctuation">(</span>out<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">#        print(out.shape)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>classifier<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token comment">#        print(out.shape)</span>        <span class="token keyword">return</span> out<span class="token triple-quoted-string string">'''创建model实例对象，并检测是否支持使用GPU'''</span>model <span class="token operator">=</span> VGG16<span class="token punctuation">(</span><span class="token punctuation">)</span>use_gpu <span class="token operator">=</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 判断是否有GPU加速</span><span class="token keyword">if</span> use_gpu<span class="token punctuation">:</span>    model <span class="token operator">=</span> model<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''定义loss和optimizer'''</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''训练模型'''</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_epoches<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'epoch &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'*'</span> <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span>  <span class="token comment"># .format为输出格式，formet括号里的即为左边花括号的输出</span>    running_loss <span class="token operator">=</span> <span class="token number">0.0</span>    running_acc <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        img<span class="token punctuation">,</span> label <span class="token operator">=</span> data        <span class="token comment"># cuda</span>        <span class="token keyword">if</span> use_gpu<span class="token punctuation">:</span>            img <span class="token operator">=</span> img<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            label <span class="token operator">=</span> label<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        img <span class="token operator">=</span> Variable<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        label <span class="token operator">=</span> Variable<span class="token punctuation">(</span>label<span class="token punctuation">)</span>        <span class="token comment"># 向前传播</span>        out <span class="token operator">=</span> model<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>out<span class="token punctuation">,</span> label<span class="token punctuation">)</span>        running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> label<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        _<span class="token punctuation">,</span> pred <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 预测最大值所在的位置标签</span>        num_correct <span class="token operator">=</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> label<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        accuracy <span class="token operator">=</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> label<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>        running_acc <span class="token operator">+=</span> num_correct<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 向后传播</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Finish &#123;&#125; epoch, Loss: &#123;:.6f&#125;, Acc: &#123;:.6f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>        epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> running_loss <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>train_dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> running_acc <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>train_dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 模型评估</span>    eval_loss <span class="token operator">=</span> <span class="token number">0</span>    eval_acc <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> test_loader<span class="token punctuation">:</span>  <span class="token comment"># 测试模型</span>        img<span class="token punctuation">,</span> label <span class="token operator">=</span> data        <span class="token keyword">if</span> use_gpu<span class="token punctuation">:</span>            img <span class="token operator">=</span> Variable<span class="token punctuation">(</span>img<span class="token punctuation">,</span> volatile<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            label <span class="token operator">=</span> Variable<span class="token punctuation">(</span>label<span class="token punctuation">,</span> volatile<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            img <span class="token operator">=</span> Variable<span class="token punctuation">(</span>img<span class="token punctuation">,</span> volatile<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            label <span class="token operator">=</span> Variable<span class="token punctuation">(</span>label<span class="token punctuation">,</span> volatile<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        out <span class="token operator">=</span> model<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>out<span class="token punctuation">,</span> label<span class="token punctuation">)</span>        eval_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> label<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        _<span class="token punctuation">,</span> pred <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        num_correct <span class="token operator">=</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> label<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        eval_acc <span class="token operator">+=</span> num_correct<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Test Loss: &#123;:.6f&#125;, Acc: &#123;:.6f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>eval_loss <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>        test_dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eval_acc <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>test_dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 保存模型</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'./cnn.pth'</span><span class="token punctuation">)</span></code></pre><h5 id="本地运行的结果-代码是循环100轮，我这里循环训练了10轮"><a href="#本地运行的结果-代码是循环100轮，我这里循环训练了10轮" class="headerlink" title="本地运行的结果(代码是循环100轮，我这里循环训练了10轮)"></a>本地运行的结果(代码是循环100轮，我这里循环训练了10轮)</h5><p><img src="/2022/111316124/vgg%E4%BB%A3%E7%A0%81.png" alt></p><p>代码位置：[H:\DeepLeaning\VGG16\BinCode_VGG16_test]</p><pre class="language-none"><code class="language-none">Files already downloaded and verifiedFiles already downloaded and verified************************* epoch 1 *************************782it [01:04, 12.06it&#x2F;s]Finish 1 epoch, Loss: 2.018649, Acc: 0.232720H:&#x2F;DeepLeaning&#x2F;VGG16&#x2F;BinCode_VGG16_test&#x2F;model_vgg16.py:173: UserWarning: volatile was removed and now has no effect. Use &#96;with torch.no_grad():&#96; instead.  img &#x3D; Variable(img, volatile&#x3D;True).cuda()H:&#x2F;DeepLeaning&#x2F;VGG16&#x2F;BinCode_VGG16_test&#x2F;model_vgg16.py:174: UserWarning: volatile was removed and now has no effect. Use &#96;with torch.no_grad():&#96; instead.  label &#x3D; Variable(label, volatile&#x3D;True).cuda()0it [00:00, ?it&#x2F;s]Test Loss: 1.663675, Acc: 0.372400************************* epoch 2 *************************782it [00:53, 14.48it&#x2F;s]Finish 2 epoch, Loss: 1.557236, Acc: 0.4247200it [00:00, ?it&#x2F;s]Test Loss: 1.381207, Acc: 0.480700************************* epoch 3 *************************780it [00:53, 14.57it&#x2F;s]Finish 3 epoch, Loss: 1.298277, Acc: 0.527260782it [00:53, 14.61it&#x2F;s]Test Loss: 1.947313, Acc: 0.3378000it [00:00, ?it&#x2F;s]************************* epoch 4 *************************780it [00:53, 14.60it&#x2F;s]Finish 4 epoch, Loss: 1.138745, Acc: 0.587800782it [00:53, 14.63it&#x2F;s]0it [00:00, ?it&#x2F;s]Test Loss: 1.258211, Acc: 0.546900************************* epoch 5 *************************782it [00:53, 14.61it&#x2F;s]Finish 5 epoch, Loss: 1.007957, Acc: 0.638740Test Loss: 1.670562, Acc: 0.4797000it [00:00, ?it&#x2F;s]************************* epoch 6 *************************782it [00:53, 14.61it&#x2F;s]Finish 6 epoch, Loss: 0.893314, Acc: 0.681300Test Loss: 1.739359, Acc: 0.4664000it [00:00, ?it&#x2F;s]************************* epoch 7 *************************780it [00:53, 14.65it&#x2F;s]Finish 7 epoch, Loss: 0.788152, Acc: 0.720340782it [00:53, 14.59it&#x2F;s]Test Loss: 1.002697, Acc: 0.644000************************* epoch 8 *************************780it [00:54, 14.60it&#x2F;s]Finish 8 epoch, Loss: 0.693792, Acc: 0.754800782it [00:54, 14.42it&#x2F;s]Test Loss: 1.139021, Acc: 0.6193000it [00:00, ?it&#x2F;s]************************* epoch 9 *************************782it [00:53, 14.59it&#x2F;s]Finish 9 epoch, Loss: 0.606799, Acc: 0.7844400it [00:00, ?it&#x2F;s]Test Loss: 1.706122, Acc: 0.503600************************* epoch 10 *************************782it [00:56, 13.96it&#x2F;s]Finish 10 epoch, Loss: 0.517089, Acc: 0.817000Test Loss: 1.253111, Acc: 0.611100</code></pre><p>训练100轮会出现最终的结果正确率为100% ，从上述结果当中可以看到：正确率每一轮都在上升！</p><h3 id="三、VGG网络实现-详细"><a href="#三、VGG网络实现-详细" class="headerlink" title="三、VGG网络实现(详细)"></a>三、VGG网络实现(详细)</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Vgg16_net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Vgg16_net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>layer1<span class="token operator">=</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">#(32-3+2)/1+1=32   32*32*64</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">#inplace-选择是否进行覆盖运算</span>            <span class="token comment">#意思是是否将计算得到的值覆盖之前的值，比如</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">#意思就是对从上层网络Conv2d中传递下来的tensor直接进行修改，</span>            <span class="token comment">#这样能够节省运算内存，不用多存储其他变量</span>             nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">#(32-3+2)/1+1=32    32*32*64</span>            <span class="token comment">#Batch Normalization强行将数据拉回到均值为0，方差为1的正太分布上，</span>            <span class="token comment"># 一方面使得数据分布一致，另一方面避免梯度消失。</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">#(32-2)/2+1=16         16*16*64</span>        <span class="token punctuation">)</span>          self<span class="token punctuation">.</span>layer2<span class="token operator">=</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">#(16-3+2)/1+1=16  16*16*128</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">#(16-3+2)/1+1=16   16*16*128</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">#(16-2)/2+1=8     8*8*128</span>        <span class="token punctuation">)</span>         self<span class="token punctuation">.</span>layer3<span class="token operator">=</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">#(8-3+2)/1+1=8   8*8*256</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">#(8-3+2)/1+1=8   8*8*256</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">#(8-3+2)/1+1=8   8*8*256</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment">#(8-2)/2+1=4      4*4*256</span>        <span class="token punctuation">)</span>         self<span class="token punctuation">.</span>layer4<span class="token operator">=</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">#(4-3+2)/1+1=4    4*4*512</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment">#(4-3+2)/1+1=4    4*4*512</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment">#(4-3+2)/1+1=4    4*4*512</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">#(4-2)/2+1=2     2*2*512</span>        <span class="token punctuation">)</span>         self<span class="token punctuation">.</span>layer5<span class="token operator">=</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment">#(2-3+2)/1+1=2    2*2*512</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">#(2-3+2)/1+1=2     2*2*512</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>out_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">#(2-3+2)/1+1=2      2*2*512</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">#(2-2)/2+1=1      1*1*512</span>        <span class="token punctuation">)</span>          self<span class="token punctuation">.</span>conv<span class="token operator">=</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            self<span class="token punctuation">.</span>layer1<span class="token punctuation">,</span>            self<span class="token punctuation">.</span>layer2<span class="token punctuation">,</span>            self<span class="token punctuation">.</span>layer3<span class="token punctuation">,</span>            self<span class="token punctuation">.</span>layer4<span class="token punctuation">,</span>            self<span class="token punctuation">.</span>layer5        <span class="token punctuation">)</span>         self<span class="token punctuation">.</span>fc<span class="token operator">=</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            <span class="token comment">#y=xA^T+b  x是输入,A是权值,b是偏执,y是输出</span>            <span class="token comment">#nn.Liner(in_features,out_features,bias)</span>            <span class="token comment">#in_features:输入x的列数  输入数据:[batchsize,in_features]</span>            <span class="token comment">#out_freatures:线性变换后输出的y的列数,输出数据的大小是:[batchsize,out_features]</span>            <span class="token comment">#bias: bool  默认为True</span>            <span class="token comment">#线性变换不改变输入矩阵x的行数,仅改变列数</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>      <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment">#这里-1表示一个不确定的数，就是你如果不确定你想要reshape成几行，但是你很肯定要reshape成512列</span>        <span class="token comment"># 那不确定的地方就可以写成-1</span>         <span class="token comment">#如果出现x.size(0)表示的是batchsize的值</span>        <span class="token comment"># x=x.view(x.size(0),-1)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x</code></pre></font>]]></content>
      
      
      <categories>
          
          <category> VGG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> 网络模型 </tag>
            
            <tag> VGG </tag>
            
            <tag> 模型实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VGG-图像分类实现猫狗分类</title>
      <link href="/2022/111316122.html"/>
      <url>/2022/111316122.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、项目目录结构及相关代码解析"><a href="#一、项目目录结构及相关代码解析" class="headerlink" title="一、项目目录结构及相关代码解析"></a>一、项目目录结构及相关代码解析</h3><h5 id="使用pytorch框架利用VGG16网络实现猫狗分类的目录结构"><a href="#使用pytorch框架利用VGG16网络实现猫狗分类的目录结构" class="headerlink" title="使用pytorch框架利用VGG16网络实现猫狗分类的目录结构"></a>使用pytorch框架利用VGG16网络实现猫狗分类的目录结构</h5><p><img src="/2022/111316122/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt></p><p>├── data.py：进行图像数据的整理(原始给定的数据集当中的图像是不规范的数据，需要对其完成数据的规范化处理)–对数据集进行大小的调整/翻转，使得数据具备更强的鲁棒性</p><p>├── net.py: 编写的VGG16网络的代码，这里的代码可以去pytorch官网上找到<a href="https://pytorch.org/vision/stable/_modules/torchvision/models/vgg.html#vgg16">源代码</a>，并做出相关的修改</p><p>├── txt.py: 将训练的图像的地址进行输出，输出为：cls_train.txt中</p><p>├── main.py: 进行训练的源代码，包括：数据的加载、创建模型网络、优化器编写、开始训练、保存模型等</p><p>├── predict.py: 进行训练出来的模型的效果验证，</p><h6 id="data-py"><a href="#data-py" class="headerlink" title="data.py"></a>data.py</h6><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> data<span class="token keyword">from</span> PIL <span class="token keyword">import</span>  Image<span class="token keyword">def</span> <span class="token function">preprocess_input</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token operator">/=</span><span class="token number">127.5</span>    x<span class="token operator">-=</span><span class="token number">1.</span>    <span class="token keyword">return</span> x<span class="token keyword">def</span> <span class="token function">cvtColor</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span> <span class="token keyword">and</span> np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> image    <span class="token keyword">else</span><span class="token punctuation">:</span>        image<span class="token operator">=</span>image<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> image<span class="token keyword">class</span> <span class="token class-name">DataGenerator</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>annotation_lines<span class="token punctuation">,</span>inpt_shape<span class="token punctuation">,</span>random<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>annotation_lines<span class="token operator">=</span>annotation_lines        self<span class="token punctuation">.</span>input_shape<span class="token operator">=</span>inpt_shape        self<span class="token punctuation">.</span>random<span class="token operator">=</span>random    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>annotation_lines<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        annotation_path<span class="token operator">=</span>self<span class="token punctuation">.</span>annotation_lines<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        image<span class="token operator">=</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>annotation_path<span class="token punctuation">)</span>        image<span class="token operator">=</span>self<span class="token punctuation">.</span>get_random_data<span class="token punctuation">(</span>image<span class="token punctuation">,</span>self<span class="token punctuation">.</span>input_shape<span class="token punctuation">,</span>random<span class="token operator">=</span>self<span class="token punctuation">.</span>random<span class="token punctuation">)</span>        image<span class="token operator">=</span>np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>preprocess_input<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        y<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>annotation_lines<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> image<span class="token punctuation">,</span>y    <span class="token keyword">def</span> <span class="token function">rand</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token operator">+</span>a    <span class="token keyword">def</span> <span class="token function">get_random_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>image<span class="token punctuation">,</span>inpt_shape<span class="token punctuation">,</span>jitter<span class="token operator">=</span><span class="token number">.3</span><span class="token punctuation">,</span>hue<span class="token operator">=</span><span class="token number">.1</span><span class="token punctuation">,</span>sat<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">,</span>val<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">,</span>random<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        image<span class="token operator">=</span>cvtColor<span class="token punctuation">(</span>image<span class="token punctuation">)</span>        iw<span class="token punctuation">,</span>ih<span class="token operator">=</span>image<span class="token punctuation">.</span>size        h<span class="token punctuation">,</span>w<span class="token operator">=</span>inpt_shape        <span class="token keyword">if</span> <span class="token keyword">not</span> random<span class="token punctuation">:</span>            scale<span class="token operator">=</span><span class="token builtin">min</span><span class="token punctuation">(</span>w<span class="token operator">/</span>iw<span class="token punctuation">,</span>h<span class="token operator">/</span>ih<span class="token punctuation">)</span>            nw<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>iw<span class="token operator">*</span>scale<span class="token punctuation">)</span>            nh<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>ih<span class="token operator">*</span>scale<span class="token punctuation">)</span>            dx<span class="token operator">=</span><span class="token punctuation">(</span>w<span class="token operator">-</span>nw<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            dy<span class="token operator">=</span><span class="token punctuation">(</span>h<span class="token operator">-</span>nh<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            image<span class="token operator">=</span>image<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span>nw<span class="token punctuation">,</span>nh<span class="token punctuation">)</span><span class="token punctuation">,</span>Image<span class="token punctuation">.</span>BICUBIC<span class="token punctuation">)</span>            new_image<span class="token operator">=</span>Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            new_image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>image<span class="token punctuation">,</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span>dy<span class="token punctuation">)</span><span class="token punctuation">)</span>            image_data<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>new_image<span class="token punctuation">,</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>            <span class="token keyword">return</span> image_data        new_ar<span class="token operator">=</span>w<span class="token operator">/</span>h<span class="token operator">*</span>self<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>jitter<span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">+</span>jitter<span class="token punctuation">)</span><span class="token operator">/</span>self<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>jitter<span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">+</span>jitter<span class="token punctuation">)</span>        scale<span class="token operator">=</span>self<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">.75</span><span class="token punctuation">,</span><span class="token number">1.25</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> new_ar<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">:</span>            nh<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>scale<span class="token operator">*</span>h<span class="token punctuation">)</span>            nw<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>nh<span class="token operator">*</span>new_ar<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            nw<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>scale<span class="token operator">*</span>w<span class="token punctuation">)</span>            nh<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>nw<span class="token operator">/</span>new_ar<span class="token punctuation">)</span>        image<span class="token operator">=</span>image<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span>nw<span class="token punctuation">,</span>nh<span class="token punctuation">)</span><span class="token punctuation">,</span>Image<span class="token punctuation">.</span>BICUBIC<span class="token punctuation">)</span>        <span class="token comment">#将图像多余的部分加上灰条</span>        dx<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>w<span class="token operator">-</span>nw<span class="token punctuation">)</span><span class="token punctuation">)</span>        dy<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>h<span class="token operator">-</span>nh<span class="token punctuation">)</span><span class="token punctuation">)</span>        new_image<span class="token operator">=</span>Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        new_image<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>image<span class="token punctuation">,</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span>dy<span class="token punctuation">)</span><span class="token punctuation">)</span>        image<span class="token operator">=</span>new_image        <span class="token comment">#翻转图像</span>        flip<span class="token operator">=</span>self<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">.5</span>        <span class="token keyword">if</span> flip<span class="token punctuation">:</span> image<span class="token operator">=</span>image<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>FLIP_LEFT_RIGHT<span class="token punctuation">)</span>        rotate<span class="token operator">=</span>self<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">.5</span>        <span class="token keyword">if</span> rotate<span class="token punctuation">:</span>            angle<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span>            a<span class="token punctuation">,</span>b<span class="token operator">=</span>w<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>h<span class="token operator">/</span><span class="token number">2</span>            M<span class="token operator">=</span>cv2<span class="token punctuation">.</span>getRotationMatrix2D<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>angle<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>            image<span class="token operator">=</span>cv2<span class="token punctuation">.</span>warpAffine<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">,</span>M<span class="token punctuation">,</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span>borderValue<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">#色域扭曲</span>        hue<span class="token operator">=</span>self<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token operator">-</span>hue<span class="token punctuation">,</span>hue<span class="token punctuation">)</span>        sat<span class="token operator">=</span>self<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>sat<span class="token punctuation">)</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">.5</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token operator">/</span>self<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>sat<span class="token punctuation">)</span>        val<span class="token operator">=</span>self<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">.5</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token operator">/</span>self<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span>        x<span class="token operator">=</span>cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>image<span class="token punctuation">,</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>COLOR_RGB2HSV<span class="token punctuation">)</span><span class="token comment">#颜色空间转换</span>        x<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*=</span>sat        x<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*=</span>val        x<span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">360</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">360</span>        x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>        x<span class="token punctuation">[</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>        image_data<span class="token operator">=</span>cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>x<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>COLOR_HSV2RGB<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255</span>        <span class="token keyword">return</span> image_data</code></pre><h6 id="net-py"><a href="#net-py" class="headerlink" title="net.py"></a>net.py</h6><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>hub <span class="token keyword">import</span> load_state_dict_from_urlmodel_urls <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"vgg16"</span><span class="token punctuation">:</span> <span class="token string">"https://download.pytorch.org/models/vgg16-397923af.pth"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">VGG</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> features<span class="token punctuation">,</span> num_classes <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> init_weights<span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> dropout <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>VGG<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>features <span class="token operator">=</span> features        self<span class="token punctuation">.</span>avgpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>classifier <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span>dropout<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span>dropout<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token keyword">if</span> init_weights<span class="token punctuation">:</span>            <span class="token keyword">for</span> m <span class="token keyword">in</span> self<span class="token punctuation">.</span>modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">)</span><span class="token punctuation">:</span>                    nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>kaiming_normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"fan_out"</span><span class="token punctuation">,</span> nonlinearity<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> m<span class="token punctuation">.</span>bias <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                        nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">)</span><span class="token punctuation">:</span>                    nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                    nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">)</span><span class="token punctuation">:</span>                    nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>                    nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>features<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>avgpool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>classifier<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token keyword">def</span> <span class="token function">make_layers</span><span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> batch_norm <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    layers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    in_channels <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">for</span> v <span class="token keyword">in</span> cfg<span class="token punctuation">:</span>        <span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token string">"M"</span><span class="token punctuation">:</span>            layers <span class="token operator">+=</span> <span class="token punctuation">[</span>nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            conv2d <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> v<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> batch_norm<span class="token punctuation">:</span>                layers <span class="token operator">+=</span> <span class="token punctuation">[</span>conv2d<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                layers <span class="token operator">+=</span> <span class="token punctuation">[</span>conv2d<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            in_channels <span class="token operator">=</span> v    <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>layers<span class="token punctuation">)</span>cfgs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"D"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token string">"M"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">vgg16</span><span class="token punctuation">(</span>pretrained <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> progress <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> num_classes <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> VGG<span class="token punctuation">(</span>make_layers<span class="token punctuation">(</span>cfgs<span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pretrained<span class="token punctuation">:</span>        state_dict <span class="token operator">=</span> load_state_dict_from_url<span class="token punctuation">(</span>model_urls<span class="token punctuation">[</span><span class="token string">'vgg16'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> model_dir<span class="token operator">=</span><span class="token string">'./model'</span><span class="token punctuation">,</span> progress<span class="token operator">=</span>progress<span class="token punctuation">)</span>        model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>state_dict<span class="token punctuation">)</span>    <span class="token keyword">if</span> num_classes <span class="token operator">!=</span> <span class="token number">1000</span><span class="token punctuation">:</span>        model<span class="token punctuation">.</span>classifier <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token keyword">return</span> model</code></pre><h6 id="main-py-train"><a href="#main-py-train" class="headerlink" title="main.py(train)"></a>main.py(train)</h6><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> net <span class="token keyword">import</span> vgg16<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">from</span> data <span class="token keyword">import</span> <span class="token operator">*</span><span class="token triple-quoted-string string">'''数据集'''</span>annotation_path <span class="token operator">=</span> <span class="token string">'cls_train.txt'</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>annotation_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">10101</span><span class="token punctuation">)</span><span class="token comment"># 打乱数据</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>lines<span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>num_val <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">)</span>num_train <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token operator">-</span>num_val<span class="token comment"># 输入图像大小</span>input_shape <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">]</span>train_data <span class="token operator">=</span> DataGenerator<span class="token punctuation">(</span>lines<span class="token punctuation">[</span><span class="token punctuation">:</span>num_train<span class="token punctuation">]</span><span class="token punctuation">,</span> input_shape<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>val_data <span class="token operator">=</span> DataGenerator<span class="token punctuation">(</span>lines<span class="token punctuation">[</span>num_train<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> input_shape<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>val_len <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>val_data<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""加载数据"""</span>gen_train <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>gen_test <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>val_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''构建网络'''</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>net <span class="token operator">=</span> vgg16<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> progress<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>net<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''选择优化器和学习率的调整方法'''</span><span class="token comment"># 初始的学习率</span>lr <span class="token operator">=</span> <span class="token number">0.0001</span>optim <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr <span class="token operator">=</span> lr<span class="token punctuation">)</span>sculer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>lr_scheduler<span class="token punctuation">.</span>StepLR<span class="token punctuation">(</span>optim<span class="token punctuation">,</span> step_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''训练'''</span>epochs <span class="token operator">=</span> <span class="token number">50</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 一轮下来总的损失</span>    total_train <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> gen_train<span class="token punctuation">:</span>        img<span class="token punctuation">,</span> label <span class="token operator">=</span> data        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            img <span class="token operator">=</span> img<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            label <span class="token operator">=</span> label<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        optim<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 梯度清0</span>        output <span class="token operator">=</span> net<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        train_loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        train_loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optim<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        total_train <span class="token operator">+=</span> train_loss    total_test <span class="token operator">=</span> <span class="token number">0</span>    total_accuracy <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> gen_test<span class="token punctuation">:</span>        img<span class="token punctuation">,</span> label <span class="token operator">=</span> data        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            img <span class="token operator">=</span> img<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            label <span class="token operator">=</span> label<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            optim<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            out <span class="token operator">=</span> net<span class="token punctuation">(</span>img<span class="token punctuation">)</span>            test_loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            total_test <span class="token operator">+=</span> test_loss            <span class="token comment"># out.argmax(1) == label 如果预测的最大值与标签值相等</span>            accuracy <span class="token operator">=</span> <span class="token punctuation">(</span>out<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> label<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            total_accuracy <span class="token operator">+=</span> accuracy    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练集上的损失：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_train<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试集上的损失：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_test<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试集上的精度：&#123;:.1%&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_accuracy<span class="token operator">/</span>val_len<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># torch.save(net,"dogandcat.&#123;&#125;.pt".format(epoch+1)) 保存网络的权重和结构</span>    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Adogandcat.&#123;&#125;.pth"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 只保存网络的结构</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"模型已保存"</span><span class="token punctuation">)</span></code></pre><h6 id="predict-py"><a href="#predict-py" class="headerlink" title="predict.py"></a>predict.py</h6><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">from</span> net <span class="token keyword">import</span> vgg16img_pth<span class="token operator">=</span><span class="token string">'./img/66.jpeg'</span>img<span class="token operator">=</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>img_pth<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''处理图片'''</span>transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>image<span class="token operator">=</span>transform<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''加载网络'''</span>device<span class="token operator">=</span>torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>net <span class="token operator">=</span>vgg16<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token operator">=</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"./Adogandcat.14.pth"</span><span class="token punctuation">,</span> map_location<span class="token operator">=</span>device<span class="token punctuation">)</span>net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>model<span class="token punctuation">)</span>net<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>image<span class="token operator">=</span>torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>image<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 图像是3维的数据，但是模型进行训练需要使用4维的数据，这里进行数据维度的转换</span><span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    out<span class="token operator">=</span>net<span class="token punctuation">(</span>image<span class="token punctuation">)</span>out<span class="token operator">=</span>F<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>out<span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>out<span class="token operator">=</span>out<span class="token punctuation">.</span>data<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>a<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">list</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token string">'dog'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>suptitle<span class="token punctuation">(</span><span class="token string">"Classes:&#123;&#125;:&#123;:.1%&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>out<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>代码地址： H:\DeepLeaning\VGG16\cat_or_dog\BinCode</p><p>注： 运行了17轮的模型，效果一直不怎么好，正确率感觉上不去</p></font>]]></content>
      
      
      <categories>
          
          <category> VGG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> 网络模型 </tag>
            
            <tag> VGG </tag>
            
            <tag> 猫狗分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VGG-图像分类卷积神经网络</title>
      <link href="/2022/111116123.html"/>
      <url>/2022/111116123.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、查看ImageNet图像分类竞赛历年Tops错误率"><a href="#一、查看ImageNet图像分类竞赛历年Tops错误率" class="headerlink" title="一、查看ImageNet图像分类竞赛历年Tops错误率"></a>一、查看ImageNet图像分类竞赛历年Tops错误率</h3><p><a href="https://www.bilibili.com/h5/note-app/view?cvid=14087625&pagefrom=comment">学习笔记</a></p><p><font color="#0000FF">2014年ImageNet图像分类竞赛亚军(谷歌是冠军)，定位赛冠军</font></p><p><img src="/2022/111116123/ImageNet%E7%AB%9E%E8%B5%9B1.png" alt></p><p><img src="/2022/111116123/imagenet%E7%AB%9E%E8%B5%9B2.png" alt></p><h6 id="VGG网络就是：传统意义上的能够做到的将网络深度达到的极致：19层"><a href="#VGG网络就是：传统意义上的能够做到的将网络深度达到的极致：19层" class="headerlink" title="VGG网络就是：传统意义上的能够做到的将网络深度达到的极致：19层"></a>VGG网络就是：传统意义上的能够做到的将网络深度达到的极致：19层</h6><h3 id="二、VGG网络结构对比-VGG16-VGG19"><a href="#二、VGG网络结构对比-VGG16-VGG19" class="headerlink" title="二、VGG网络结构对比 VGG16  VGG19"></a>二、VGG网络结构对比 VGG16  VGG19</h3><p><img src="/2022/111116123/vgg%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt></p><p>如上图所示：<br>1、每一列即为一个层数，D：VGG16 &nbsp;&nbsp;&nbsp;&nbsp; E：VGG19</p><p>2、每一个模型都分为5个block， 并且所有的卷积层都采用的是3*3大小的卷积核</p><p>3、随着模型变深，每一个block的channel个数，或者说是卷积核个数都会翻倍</p><p>4、以D为例，第一个block当中有两个卷积层，每一个卷积层都有64个3 * 3卷积，第二个block当中有两个卷积层，每一个卷积层都有128个3 * 3卷积</p><p>5、D的5个block是 2 - 2 - 3 - 3 - 3 层卷积，加起来是16，而E是22444，加起来是19层</p><p>6、各种模型的单位数量如表2所示，单位：百万，VGG16有1亿3千8百万个参数，参数过多也是一个短板。</p><p>7、五个block完成之后，进行下采样maxPooling, 再完成三个全连接层和softmax分类输出层</p><p>8、输入的是224 * 224 的RGB三通道图像，输出的是1000个类别的概率，并且输出的1000个概率值为[0, 1], 且这1000个概率值相加为1。softmax会调出最大的那个概率作为其预测的结果。</p><p>9、下采样层(maxpooling层)由于没有参数，所以它并不包含在这16或者19层当中的一层</p><p><img src="/2022/111116123/vgg16%2619.png" alt></p><h5 id="注意看的是这里的VGG16-19网络的结构图-以及-每一块代表什么处理"><a href="#注意看的是这里的VGG16-19网络的结构图-以及-每一块代表什么处理" class="headerlink" title="注意看的是这里的VGG16 19网络的结构图 以及 每一块代表什么处理"></a>注意看的是这里的VGG16 19网络的结构图 以及 每一块代表什么处理</h5><h5 id="像素层面上的长宽越来越少"><a href="#像素层面上的长宽越来越少" class="headerlink" title="像素层面上的长宽越来越少"></a><font color="#0000FF">像素层面上的长宽越来越少</font></h5><h5 id="语义层面上的通道数越来越深"><a href="#语义层面上的通道数越来越深" class="headerlink" title="语义层面上的通道数越来越深"></a><font color="#0000FF">语义层面上的通道数越来越深</font></h5><p>最后得到的是1000个类别的概率值</p><h3 id="二、重点研究VGG16"><a href="#二、重点研究VGG16" class="headerlink" title="二、重点研究VGG16"></a>二、重点研究VGG16</h3><h5 id="1、VGG16-从输入到输出的每一层含义"><a href="#1、VGG16-从输入到输出的每一层含义" class="headerlink" title="1、VGG16 从输入到输出的每一层含义"></a>1、VGG16 从输入到输出的每一层含义</h5><p><img src="/2022/111116123/vgg16%E6%A6%82%E5%BF%B5%E5%9B%BE.png" alt></p><p>在卷积层1（conv3-64）,卷积层2（conv3-128）,卷积层3（conv3-256）,卷积层4（conv3-512）分别有64个，128个，256个，512个3X3卷积核，在每两层之间有池化层为移动步长为2的2X2池化矩阵（maxpool）。在卷积层5（conv3-512）后有全连接层，再之后是soft-max预测层。</p><blockquote><ul><li>最常用的迁移学习的骨干模型</li><li>输入时224<em>224</em>3的RGB彩色图像</li><li>第一个block输出的feature map是224<em>224</em>64，有64个卷积核，每一个卷积核生成一个channel，每一个channel还是224*224</li><li>下采样后长宽减半，然后继续用128个卷积核进行卷积，得到128个channel</li><li>第五个block输出的feature map是7<em>7</em>512，经过下采样将它展平成为一个长向量，再经过3个全连接层（第一二层有4096个神经元，第三层有1000个神经元）</li><li>经过最后一个全连接层输出1000个类别的logic分数，这1000个分数经过softmax处理，得到1000个类别的后验概率</li><li>长宽信息逐渐减小，通道信息逐渐增加（将像素空间的信息转化成语义信息）</li></ul></blockquote><h5 id="2、数据的输入过程"><a href="#2、数据的输入过程" class="headerlink" title="2、数据的输入过程"></a>2、数据的输入过程</h5><p><img src="/2022/111116123/vgg16%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt><br>1、输入处理<br>如果要使用224x224的图作为训练的输入，用S表示图片最小边的值，当S=224时这个图就直接使用，直接将多余的部分减掉；对于S远大于224的，模型将对图像进行单尺度和多尺度的剪裁，通过剪切这个图片中包含object的子图作为训练数据。</p><p>2、训练方式<br>采用带动量的小批量梯度下降法，来优化目标函数，并且当学习效果较为满意时，最初加入的学习率权重衰减系数会起作用，会减小学习率，缓慢达到最优解。</p><h5 id="3、VGG16-在每一层当中的参数数量以及内存消耗"><a href="#3、VGG16-在每一层当中的参数数量以及内存消耗" class="headerlink" title="3、VGG16 在每一层当中的参数数量以及内存消耗"></a>3、VGG16 在每一层当中的参数数量以及内存消耗</h5><p><img src="/2022/111116123/vgg16%E7%9A%84%E5%8F%82%E6%95%B0%E5%8F%8A%E5%86%85%E5%AD%98.png" alt></p><p>从上图当中可以看出：<br>前两层卷积占据了巨大部分的内存<br>第一层全连接占据了绝大部分的参数</p><h5 id="4、VGG16-在每一层当中层数变化过程！！！重点看这个！！！"><a href="#4、VGG16-在每一层当中层数变化过程！！！重点看这个！！！" class="headerlink" title="4、VGG16 在每一层当中层数变化过程！！！重点看这个！！！"></a>4、VGG16 在每一层当中层数变化过程！！！重点看这个！！！</h5><p><img src="/2022/111116123/vgg16%E6%AF%8F%E4%B8%80%E5%B1%82%E5%8F%98%E5%8C%96%E5%9B%BE.png" alt></p><h5 id="5、使用3-3作为卷积核的作用"><a href="#5、使用3-3作为卷积核的作用" class="headerlink" title="5、使用3 * 3作为卷积核的作用"></a>5、使用3 * 3作为卷积核的作用</h5><p><img src="/2022/111116123/33%E5%8D%B7%E7%A7%AF%E6%A0%B8%E7%9A%84%E4%BD%9C%E7%94%A8.png" alt></p><p><img src="/2022/111116123/%E4%B8%A4%E6%AC%A133%E5%8D%B7%E7%A7%AF.png" alt></p><p>两次33卷积，可以等同于一次的55卷积<br>好处：模型变深了、非线性次数变多了、学习能力变得更好、表示空间变得更大，两次33卷积的参数数量要远小于一次5 * 5卷积</p><p>进而可以推断：3个3 * 3的卷积的过程，可以替代一次7 * 7的卷积的过程</p><p>还有一个原因就是：3 * 3是最小的能够表示上下左右的所有因素的一个单元</p><h5 id="6、VGG16模型的特点"><a href="#6、VGG16模型的特点" class="headerlink" title="6、VGG16模型的特点"></a>6、VGG16模型的特点</h5><p>在效果上，vgg16的效果并不是很好，在后续有resNet等优秀的模型更优秀</p><p><img src="/2022/111116123/vgg%E6%95%88%E6%9E%9C%E5%B9%B6%E4%B8%8D%E5%A5%BD.png" alt><br>从上图当中可以看到，左图准确率为中游的水平,右图可以看出计算量和处理的流程都非常的臃肿！</p><h3 id="三、VGG网络相关问题"><a href="#三、VGG网络相关问题" class="headerlink" title="三、VGG网络相关问题"></a>三、VGG网络相关问题</h3><p>1、VGG16的全称</p><pre class="language-none"><code class="language-none">VGG是Visual Geometry Group Network的缩写，视觉几何群网络。</code></pre><p>2、预处理</p><pre class="language-none"><code class="language-none">图片的预处理就是每一个像素减去了均值。</code></pre><p>3、VGG16中数字“16”的缘由？</p><pre class="language-none"><code class="language-none">VGG结构中有13个卷积层和3个全链接层。 下采样是maxPooling没有参数，所以不算</code></pre><p>4、为什么卷积没有考虑正则，全连接考虑了正则？</p><pre class="language-none"><code class="language-none">因为卷积层的w个数相对少，在一定程度上可以防止过拟合，而全连接层所需计算的w参数多，故需要考虑正则以防止过拟合。</code></pre><p>5、VGG可以用来做什么？</p><pre class="language-none"><code class="language-none">可以用来做迁移学习。</code></pre><p>6、什么是迁移学习？</p><pre class="language-none"><code class="language-none">将一个领域的已经成熟的知识应用到其他的场景中。</code></pre><p>7、所用卷积核和池化核的大小是多少？</p><pre class="language-none"><code class="language-none">卷积核大小为(3,3)，池化核大小为(2,2)。</code></pre></font>]]></content>
      
      
      <categories>
          
          <category> VGG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> 网络模型 </tag>
            
            <tag> VGG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标检测--利用yoloV5训练自己的目标检测模型</title>
      <link href="/2022/111116121.html"/>
      <url>/2022/111116121.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、项目的克隆以及必要的环境依赖"><a href="#一、项目的克隆以及必要的环境依赖" class="headerlink" title="一、项目的克隆以及必要的环境依赖"></a>一、项目的克隆以及必要的环境依赖</h3><p>YOLOv5的代码是开源的，因此我们可以从github上克隆其源码。不得不说GitHub的确是全球最大的男性交友网站，里面的人个个都是人才，yolov5发布才一年左右的时间，YOLOv5就已经更新了5个分支了，分别是yolov5.1-yolov5.5分支。该项目就是利用的yolov5.5分支来作为讲解。</p><p><a href="https://github.com/ultralytics/yolov5/tree/v5.0">官网</a></p><h5 id="1、注意的是：需要在Tags上选择V5-0版本"><a href="#1、注意的是：需要在Tags上选择V5-0版本" class="headerlink" title="1、注意的是：需要在Tags上选择V5.0版本"></a>1、注意的是：需要在Tags上选择V5.0版本</h5><p>个开源的项目通过大家的不断的完善和修复已经到了第5个分支，因此我们选择第五个版本来实验，首先点击左上角的master这个图标来选择项目的第5个分支，如下图所示，然后将版本选择好以后，点击右上角的code那个按键，将代码下载下来。至此整个项目就已经准备好了。</p><p><img src="/2022/111116121/yolov5%E5%9C%B0%E5%9D%80.png" alt></p><h5 id="2、项目的代码结构"><a href="#2、项目的代码结构" class="headerlink" title="2、项目的代码结构"></a>2、项目的代码结构</h5><p><img src="/2022/111116121/YOLO%E7%9B%AE%E5%BD%95.png" alt></p><p>├── data：主要是存放一些超参数的配置文件（这些文件（yaml文件）是用来配置训练集和测试集还有验证集的路径的，其中还包括目标检测的种类数和种类的名称）；还有一些官方提供测试的图片。如果是训练自己的数据集的话，那么就需要修改其中的yaml文件。但是自己的数据集不建议放在这个路径下面，而是建议把数据集放到yolov5项目的同级目录下面。</p><p>├── models：里面主要是一些网络构建的配置文件和函数，其中包含了该项目的四个不同的版本，分别为是s、m、l、x。从名字就可以看出，这几个版本的大小。他们的检测测度分别都是从快到慢，但是精确度分别是从低到高。这就是所谓的鱼和熊掌不可兼得。如果训练自己的数据集的话，就需要修改这里面相对应的yaml文件来训练自己模型。</p><p>├── utils：存放的是工具类的函数，里面有loss函数，metrics函数，plots函数等等。</p><p>├── weights：放置训练好的权重参数。</p><p>├── detect.py：利用训练好的权重参数进行目标检测，可以进行图像、视频和摄像头的检测。</p><p>├── train.py：训练自己的数据集的函数。</p><p>├── test.py：测试训练的结果的函数。</p><p>├──requirements.txt：这是一个文本文件，里面写着使用yolov5项目的环境依赖包的一些版本，可以利用该文本导入相应版本的包。</p><p>以上就是yolov5项目代码的整体介绍。我们训练和测试自己的数据集基本就是利用到如上的代码。</p><h5 id="3、环境依赖安装"><a href="#3、环境依赖安装" class="headerlink" title="3、环境依赖安装"></a>3、环境依赖安装</h5><p>打开requirements.txt这个文件，可以看到里面有很多的依赖库和其对应的版本要求。我们打开pycharm的命令终端，在中输入如下的命令，就可以安装了。</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">pip install -r requirements.txt</code></pre><h3 id="二、数据集的准备和预训练权重的准备"><a href="#二、数据集的准备和预训练权重的准备" class="headerlink" title="二、数据集的准备和预训练权重的准备"></a>二、数据集的准备和预训练权重的准备</h3><p>数据最好放在最外一级目录中，然后数据集的目录格式如下图所示。大家一定要严格按我的格式来，否则非常容易出问题。<br><font color="#0000FF">目录结构当中的VOCdevkit就是我的数据集</font></p><p><img src="/2022/111116121/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9B%AE%E5%BD%95.png" alt></p><h5 id="预训练权重"><a href="#预训练权重" class="headerlink" title="预训练权重"></a>预训练权重</h5><p>一般为了缩短网络的训练时间，并达到更好的精度，我们一般加载预训练权重进行网络的训练。而yolov5的5.0版本给我们提供了几个预训练权重，我们可以对应我们不同的需求选择不同的版本的预训练权重。通过如下的图可以获得权重的名字和大小信息，可以预料的到，预训练权重越大，训练出来的精度就会相对来说越高，但是其检测的速度就会越慢。预训练权重可以通过这个网址进行下载，本次训练自己的数据集用的预训练权重为yolov5s.pt。</p><p><a href="https://github.com/ultralytics/yolov5/releases">网址的底部</a></p><h3 id="三、训练自己的模型"><a href="#三、训练自己的模型" class="headerlink" title="三、训练自己的模型"></a>三、训练自己的模型</h3><h5 id="1、修改数据配置文件"><a href="#1、修改数据配置文件" class="headerlink" title="1、修改数据配置文件"></a>1、修改数据配置文件</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;预训练模型和数据集都准备好了，就可以开始训练自己的yolov5目标检测模型了，训练目标检测模型需要修改两个yaml文件中的参数。一个是data目录下的相应的yaml文件，一个是model目录文件下的相应的yaml文件。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;修改data目录下的相应的yaml文件。找到目录下的voc.yaml文件，将该文件复制一份，将复制的文件重命名，最好和项目相关，这样方便后面操作。我这里修改为hat.yaml。该项目是对安全帽的识别。</p><p><img src="/2022/111116121/%E7%9B%AE%E5%BD%95%E6%9B%B4%E6%94%B9.png" alt></p><h6 id="data文件夹下hat-yaml文件的修改"><a href="#data文件夹下hat-yaml文件的修改" class="headerlink" title="data文件夹下hat.yaml文件的修改"></a>data文件夹下hat.yaml文件的修改</h6><p>打开这个文件夹修改其中的参数，首先将箭头1中的那一行代码注释掉（我已经注释掉了），如果不注释这行代码训练的时候会报错；箭头2中需要将训练和测试的数据集的路径填上（最好要填绝对路径，有时候由目录结构的问题会莫名奇妙的报错）；箭头3中需要检测的类别数，我这里是识别安全帽和人，所以这里填写2；最后箭头4中填写需要识别的类别的名字（必须是英文，否则会乱码识别不出来）。到这里和data目录下的yaml文件就修改好了。</p><p><img src="/2022/111116121/data%E4%B8%8Byaml%E6%96%87%E4%BB%B6.png" alt></p><h6 id="models文件夹下hat-yaml文件的修改"><a href="#models文件夹下hat-yaml文件的修改" class="headerlink" title="models文件夹下hat.yaml文件的修改"></a>models文件夹下hat.yaml文件的修改</h6><p>由于该项目使用的是yolov5s.pt这个预训练权重，所以要使用models目录下的yolov5s.yaml文件中的相应参数（因为不同的预训练权重对应着不同的网络层数，所以用错预训练权重会报错）。同上修改data目录下的yaml文件一样，我们最好将yolov5s.yaml文件复制一份，然后将其重命名，我将其重命名为hat.yaml。</p><p>打开yolov5_hat.yaml文件只需要修改如图中的数字就好了，这里是识别两个类别。</p><p><img src="/2022/111116121/models%E4%B8%8Byaml%E6%96%87%E4%BB%B6.png" alt></p><h6 id="train-py文件的相关参数的修改"><a href="#train-py文件的相关参数的修改" class="headerlink" title="train.py文件的相关参数的修改"></a>train.py文件的相关参数的修改</h6><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""    opt模型主要参数解析：    --weights：初始化的权重文件的路径地址    --cfg：模型yaml文件的路径地址    --data：数据yaml文件的路径地址    --hyp：超参数文件路径地址    --epochs：训练轮次    --batch-size：喂入批次文件的多少    --img-size：输入图片尺寸    --rect:是否采用矩形训练，默认False    --resume:接着打断训练上次的结果接着训练    --nosave:不保存模型，默认False    --notest:不进行test，默认False    --noautoanchor:不自动调整anchor，默认False    --evolve:是否进行超参数进化，默认False    --bucket:谷歌云盘bucket，一般不会用到    --cache-images:是否提前缓存图片到内存，以加快训练速度，默认False    --image-weights：使用加权图像选择进行训练    --device:训练的设备，cpu；0(表示一个gpu设备cuda:0)；0,1,2,3(多个gpu设备)    --multi-scale:是否进行多尺度训练，默认False    --single-cls:数据集是否只有一个类别，默认False    --adam:是否使用adam优化器    --sync-bn:是否使用跨卡同步BN,在DDP模式使用    --local_rank：DDP参数，请勿修改    --workers：最大工作核心数    --project:训练模型的保存位置    --name：模型保存的目录名称    --exist-ok：模型目录是否存在，不存在就创建"""</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--weights'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'yolov5s.pt'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'initial weights path'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--cfg'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'model.yaml path'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--data'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'data/coco128.yaml'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'data.yaml path'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--hyp'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'data/hyp.scratch.yaml'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'hyperparameters path'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--epochs'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--batch-size'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'total batch size for all GPUs'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--img-size'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'[train, test] image sizes'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--rect'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'rectangular training'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--resume'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">'?'</span><span class="token punctuation">,</span> const<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'resume most recent training'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--nosave'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'only save final checkpoint'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--notest'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'only test final epoch'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--noautoanchor'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'disable autoanchor check'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--evolve'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'evolve hyperparameters'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--bucket'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'gsutil bucket'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--cache-images'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'cache images for faster training'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--image-weights'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'use weighted image selection for training'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--device'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'cuda device, i.e. 0 or 0,1,2,3 or cpu'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--multi-scale'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'vary img-size +/- 50%%'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--single-cls'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'train multi-class data as single-class'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--adam'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'use torch.optim.Adam() optimizer'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--sync-bn'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'use SyncBatchNorm, only available in DDP mode'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--local_rank'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'DDP parameter, do not modify'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--workers'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'maximum number of dataloader workers'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--project'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'runs/train'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'save to project/name'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--entity'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'W&amp;B entity'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--name'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'exp'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'save to project/name'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--exist-ok'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'existing project/name ok, do not increment'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--quad'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'quad dataloader'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--linear-lr'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'linear LR'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--label-smoothing'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Label smoothing epsilon'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--upload_dataset'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Upload dataset as W&amp;B artifact table'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--bbox_interval'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Set bounding-box image logging interval for W&amp;B'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--save_period'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Log model after every "save_period" epoch'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--artifact_alias'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"latest"</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'version of dataset artifact to be used'</span><span class="token punctuation">)</span>    opt <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>训练自己的模型需要修改如下几个参数就可以训练了。首先将weights权重的路径填写到对应的参数里面，然后将修好好的models模型的yolov5s.yaml文件路径填写到相应的参数里面，最后将data数据的hat.yaml文件路径填写到相对于的参数里面。这几个参数就必须要修改的参数。</p><pre class="language-python" data-language="python"><code class="language-python">parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--weights'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'weights/yolov5s.pt'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'initial weights path'</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--cfg'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'models/yolov5s_hat.yaml'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'model.yaml path'</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--data'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'data/hat.yaml'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'data.yaml path'</span><span class="token punctuation">)</span></code></pre><p>还有几个需要根据自己的需求来更改的参数：</p><p>首先是模型的训练轮次，这里是训练的300轮。(我的垃圾戴尔G3[GPU GTX1650]训练40轮，搞了一天,)</p><pre class="language-python" data-language="python"><code class="language-python">parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--epochs'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span></code></pre><p><font color="#FF0000">如果出现 out of memory 表示显存溢出了， 需要下调以下两个参数</font></p><pre class="language-python" data-language="python"><code class="language-python">parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--batch-size'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'total batch size for all GPUs'</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--workers'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'maximum number of dataloader workers'</span><span class="token punctuation">)</span></code></pre><p><font color="#FF0000">如果出现OSError：[WinError 1455] 页面文件太小，无法完成操作</font></p><p>可以根据如下的操作来修改，在utils路径下找到datasets.py这个文件，将里面的第81行里面的参数nw改完0就可以了。</p><p>&#x1F351;<br>&#x1F352;<br>&#x1F353;<br>&#x1F354;<br>&#x1F355;<br>&#x1F356;<br>&#x1F357;<br>&#x1F358;<br>&#x1F359;<br>&#x1F35A;<br>&#x1F35B;</p><p>然后运行train.py就可以训练模型了</p><h3 id="四，使用tensorboard查看参数"><a href="#四，使用tensorboard查看参数" class="headerlink" title="四，使用tensorboard查看参数"></a>四，使用tensorboard查看参数</h3><p>yolov5里面有写好的tensorbord函数，可以运行命令就可以调用tensorbord，然后查看tensorbord了。首先打开pycharm的命令控制终端，输入如下命令，就会出现一个网址地址，将那行网址复制下来到浏览器打开就可以看到训练的过程了</p><p>注意需要切换到pytorch虚拟环境下</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">tensorboard --logdir&#x3D;runs&#x2F;train</code></pre><p><img src="/2022/111116121/tensorboard%E9%9D%A2%E6%9D%BF.png" alt></p><h3 id="五、训练完成之后，会出现一个runs的文件夹"><a href="#五、训练完成之后，会出现一个runs的文件夹" class="headerlink" title="五、训练完成之后，会出现一个runs的文件夹"></a>五、训练完成之后，会出现一个runs的文件夹</h3><p>等到数据训练好了以后，就会在主目录下产生一个run文件夹，在run/train/exp/weights目录下会产生两个权重文件，一个是最后一轮的权重文件，一个是最好的权重文件，一会我们就要利用这个最好的权重文件来做推理测试。除此以外还会产生一些验证文件的图片等一些文件</p><p>找到detect.py文件<br>然后找到主函数的入口，这里面有模型的主要参数。模型的主要参数解析如下所示。</p><pre class="language-python" data-language="python"><code class="language-python">f __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""--weights:权重的路径地址--source:测试数据，可以是图片/视频路径，也可以是'0'(电脑自带摄像头),也可以是rtsp等视频流--output:网络预测之后的图片/视频的保存路径--img-size:网络输入图片大小--conf-thres:置信度阈值--iou-thres:做nms的iou阈值--device:是用GPU还是CPU做推理--view-img:是否展示预测之后的图片/视频，默认False--save-txt:是否将预测的框坐标以txt文件形式保存，默认False--classes:设置只保留某一部分类别，形如0或者0 2 3--agnostic-nms:进行nms是否也去除不同类别之间的框，默认False--augment:推理的时候进行多尺度，翻转等操作(TTA)推理--update:如果为True，则对所有模型进行strip_optimizer操作，去除pt文件中的优化器等信息，默认为False--project：推理的结果保存在runs/detect目录下--name：结果保存的文件夹名称"""</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--weights'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'yolov5s.pt'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'model.pt path(s)'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--source'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'data/images'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'source'</span><span class="token punctuation">)</span>  <span class="token comment"># file/folder, 0 for webcam</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--img-size'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'inference size (pixels)'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--conf-thres'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'object confidence threshold'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--iou-thres'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">0.45</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'IOU threshold for NMS'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--device'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'cuda device, i.e. 0 or 0,1,2,3 or cpu'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--view-img'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'display results'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--save-txt'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'save results to *.txt'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--save-conf'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'save confidences in --save-txt labels'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--nosave'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'do not save images/videos'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--classes'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'filter by class: --class 0, or --class 0 2 3'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--agnostic-nms'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'class-agnostic NMS'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--augment'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'augmented inference'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--update'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'update all models'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--project'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'runs/detect'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'save results to project/name'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--name'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'exp'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'save results to project/name'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--exist-ok'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'existing project/name ok, do not increment'</span><span class="token punctuation">)</span>    opt <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p> 这里需要将刚刚训练好的最好的权重传入到推理函数中去。然后就可以对图像视频进行推理了。<br> <pre class="language-python" data-language="python"><code class="language-python">parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--weights'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'runs/train/exp/weights/best.pt'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'model.pt path(s)'</span><span class="token punctuation">)</span></code></pre></p><p> 对图片进行测试推理，将如下参数修改成图片的路径，然后运行detect.py就可以进行测试了。<br> <pre class="language-python" data-language="python"><code class="language-python">parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--source'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'000295.jpg'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'source'</span><span class="token punctuation">)</span> </code></pre></p><p>在runs下有detect文件夹，即为运行的结果</p><p>对视频进行测试，和如上的图片的测试是一样的，只不过是将图片的路径改为视频的路径而已。利用摄像头进行测试只需将路径改写为0就好了。但是好像还是会报错，这一点卡了我很久。报错如下。</p><p>打开datasets文件，找到第279行代码，给两个url参数加上str就可以了，如图所示，就可以完美运行电脑的摄像头了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token string">'youtube.com/'</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">'youtu.be/'</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><font></font></font>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
          <category> 目标检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 网络模型 </tag>
            
            <tag> 模型训练 </tag>
            
            <tag> 目标检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标检测--利用labelimg制作深度学习数据集</title>
      <link href="/2022/110916121.html"/>
      <url>/2022/110916121.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、使用labelImg标记数据"><a href="#一、使用labelImg标记数据" class="headerlink" title="一、使用labelImg标记数据"></a>一、使用labelImg标记数据</h3><p>Labelimg是一款开源的数据标注工具，可以标注三种格式。</p><pre><code>1  VOC标签格式，保存为xml文件。2  yolo标签格式，保存为txt文件。3 createML标签格式，保存为json格式。</code></pre><h3 id="二、labelimg的安装"><a href="#二、labelimg的安装" class="headerlink" title="二、labelimg的安装"></a>二、labelimg的安装</h3><p>这里主要讲的是在window系统中的安装，首先打开cmd命令行（快捷键：win+R）。进入cmd命令行控制台。输入如下的命令：</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">pip install labelimg -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</code></pre><p>行如上命令后，系统就会自动下载labelimg相关的依赖。由于这是一个很轻量的工具，所以下载起来很快，当出现如下红色框框中的告诉我们成功安装的时候，说明labelimg安装成功了。<br><img src="/2022/110916121/%E5%AE%89%E8%A3%85labelimg.png" alt></p><h3 id="三、数据准备"><a href="#三、数据准备" class="headerlink" title="三、数据准备"></a>三、数据准备</h3><p>首先这里需要准备我们需要打标注的数据集。这里我建议新建一个名为VOC2007的文件夹（这个是约定俗成，不这么做也行），里面创建一个名为JPEGImages的文件夹存放我们需要打标签的图片文件；再创建一个名为Annotations存放标注的标签文件；最后创建一个名为 predefined_classes.txt 的txt文件来存放所要标注的类别名称。</p><p>VOC2007的目录结构为：</p><p>├── VOC2007<br>│├── JPEGImages  存放需要打标签的图片文件<br>│├── Annotations  存放标注的标签文件<br>│├── predefined_classes.txt  定义自己要标注的所有类别（这个文件可有可无，但是在我们定义类别比较多的时候，最好有这个创建一个这样的txt文件来存放类别）</p><p>具体查看：E:\DeepLearning\BinCode\VOCdevkit\VOC2007</p><p><img src="/2022/110916121/%E6%A0%87%E6%B3%A8%E8%AE%BE%E7%BD%AE.png" alt></p><p>打开cmd命令终端（快捷键：win+R）。进入到刚刚创建的这个VOC2007路径（这个很重要，涉及到能不能利用predefined_classes.txt 这个txt文件中定义的类别，我在这里卡了很久，一度以为不能显示txt文件中定义的类别是我安装有问题）。执行如图中的命令进入到VOC2007路径下（每个人的路径都不一样，按个人的路径去写）如下图所示：可以看到进入到相应的目录了。</p><p><img src="/2022/110916121/%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.png" alt></p><p>输入如下的命令打开labelimg。这个命令的意思是打开labelimg工具；打开JPEGImage文件夹，初始化predefined_classes.txt里面定义的类。</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">labelimg JPEGImages predefined_classes.txt</code></pre><p><a href="https://blog.csdn.net/didiaopao/article/details/119808973">学习路径</a></p></font>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 网络模型 </tag>
            
            <tag> 模型训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch学习4-使用GPU训练模型</title>
      <link href="/2022/110816121.html"/>
      <url>/2022/110816121.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h4 id="一、第一种方式使用GPU训练模型"><a href="#一、第一种方式使用GPU训练模型" class="headerlink" title="一、第一种方式使用GPU训练模型"></a>一、第一种方式使用GPU训练模型</h4><h5 id="方法：在损失函数，网络模型，数据-imgs-targets-上添加-cuda"><a href="#方法：在损失函数，网络模型，数据-imgs-targets-上添加-cuda" class="headerlink" title="方法：在损失函数，网络模型，数据(imgs, targets) 上添加 .cuda()"></a>方法：在损失函数，网络模型，数据(imgs, targets) 上添加 .cuda()</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> time<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token comment"># 1、准备数据集(参数当中需要将其转换为tensor类型)</span><span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoadertrain_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                          download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 2、查看训练数据集 测试数据集的大小</span>train_data_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_data<span class="token punctuation">)</span>test_data_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_data<span class="token punctuation">)</span><span class="token comment"># 下面是字符串的替换方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练数据集的大小为：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>train_data_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试数据集的大小为：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>test_data_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 训练数据集的大小为：50000</span><span class="token comment"># 测试数据集的大小为：10000</span><span class="token comment"># 3、使用DataLoader加载数据集</span>train_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>test_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token comment"># 4、引入搭建好的神经网络： model.py</span><span class="token comment"># 使用了 from model import *</span><span class="token keyword">class</span> <span class="token class-name">Bin</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Bin<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>model <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token builtin">bin</span> <span class="token operator">=</span> Bin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将网络模型转移到cuda上去</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">bin</span> <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 5、构建损失函数</span>loss_fn <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    loss_fn <span class="token operator">=</span> loss_fn<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 6、构建优化器</span><span class="token comment"># 学习速率</span><span class="token comment"># learning_rate = 0.01</span><span class="token comment"># 也有下面的写法</span><span class="token comment"># 1e-2 = (10) ^ (-2) = 0.01</span>learning_rate <span class="token operator">=</span> <span class="token number">1e-2</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span><span class="token comment"># 7、设置训练网络当中的一些参数</span><span class="token comment"># 训练的次数</span>total_train_step <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 测试的次数</span>total_test_step <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 训练的轮数</span>epoch <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 8、循环进行训练</span><span class="token comment"># 在训练的过程当中添加tensorboard</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"./logs_train"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第 &#123;&#125; 轮训练开始"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 训练步骤开始</span>    <span class="token builtin">bin</span><span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> train_dataloader<span class="token punctuation">:</span>        imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data        <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            imgs <span class="token operator">=</span> imgs<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            targets <span class="token operator">=</span> targets<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>        loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>output<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>        <span class="token comment"># 优化器优化模型</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        total_train_step <span class="token operator">=</span> total_train_step <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span> total_train_step <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练次数: &#123;&#125; ， loss: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_train_step<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 将训练过程当中的额loss添加到tensorboard上</span>            writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"train_loss"</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> total_train_step<span class="token punctuation">)</span>    <span class="token comment"># 测试步骤开始</span>    <span class="token builtin">bin</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    total_test_loss <span class="token operator">=</span> <span class="token number">0</span>    total_accuracy <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 不需要进行梯度处理</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> data <span class="token keyword">in</span> test_dataloader<span class="token punctuation">:</span>            imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data            <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                imgs <span class="token operator">=</span> imgs<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>                targets <span class="token operator">=</span> targets<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            outputs <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>            loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>            total_test_loss <span class="token operator">=</span> total_test_loss <span class="token operator">+</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            accuracy <span class="token operator">=</span> <span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> targets<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            total_accuracy <span class="token operator">=</span> total_accuracy <span class="token operator">+</span> accuracy    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"整体测试集上的loss: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_test_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"整体测试集上的正确率： &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_accuracy<span class="token operator">/</span>test_data_size<span class="token punctuation">)</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"test_loss"</span><span class="token punctuation">,</span> total_test_loss<span class="token punctuation">,</span> total_test_step<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"test_accuracy"</span><span class="token punctuation">,</span> total_accuracy<span class="token operator">/</span>test_data_size<span class="token punctuation">,</span> total_test_step<span class="token punctuation">)</span>    total_test_step <span class="token operator">=</span> total_test_step <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment"># 在这里保存每一轮训练的结果</span>    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">,</span> <span class="token string">"bin_&#123;&#125;.pth"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"模型已保存"</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="一、第二种方式使用GPU训练模型"><a href="#一、第二种方式使用GPU训练模型" class="headerlink" title="一、第二种方式使用GPU训练模型"></a>一、第二种方式使用GPU训练模型</h4><h5 id="方法：添加"><a href="#方法：添加" class="headerlink" title="方法：添加"></a>方法：添加</h5><p>.to(device)<br>Device = torch.device(“cpu”)<br>Torch.device(“cuda”)<br>Torch.device(“cuda:0”)<br>Torch.device(“cuda:1”)</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> time<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token comment"># 1、准备数据集(参数当中需要将其转换为tensor类型)</span><span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token comment"># 定义训练的设备</span><span class="token comment"># device = torch.device("cpu")</span><span class="token comment"># device = torch.device("cuda:0")</span><span class="token comment"># device = torch.device("cude" if torch.cuda.is_available() else "cpu") 语法糖的格式</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span><span class="token punctuation">)</span>train_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                          download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 2、查看训练数据集 测试数据集的大小</span>train_data_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_data<span class="token punctuation">)</span>test_data_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_data<span class="token punctuation">)</span><span class="token comment"># 下面是字符串的替换方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练数据集的大小为：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>train_data_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试数据集的大小为：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>test_data_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 训练数据集的大小为：50000</span><span class="token comment"># 测试数据集的大小为：10000</span><span class="token comment"># 3、使用DataLoader加载数据集</span>train_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>test_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token comment"># 4、引入搭建好的神经网络： model.py</span><span class="token comment"># 使用了 from model import *</span><span class="token keyword">class</span> <span class="token class-name">Bin</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Bin<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>model <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token builtin">bin</span> <span class="token operator">=</span> Bin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将网络模型转移到设备上去</span><span class="token builtin">bin</span> <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token comment"># 5、构建损失函数</span>loss_fn <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_fn <span class="token operator">=</span> loss_fn<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token comment"># 6、构建优化器</span><span class="token comment"># 学习速率</span><span class="token comment"># learning_rate = 0.01</span><span class="token comment"># 也有下面的写法</span><span class="token comment"># 1e-2 = (10) ^ (-2) = 0.01</span>learning_rate <span class="token operator">=</span> <span class="token number">1e-2</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span><span class="token comment"># 7、设置训练网络当中的一些参数</span><span class="token comment"># 训练的次数</span>total_train_step <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 测试的次数</span>total_test_step <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 训练的轮数</span>epoch <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 8、循环进行训练</span><span class="token comment"># 在训练的过程当中添加tensorboard</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"./logs_train"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第 &#123;&#125; 轮训练开始"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 训练步骤开始</span>    <span class="token builtin">bin</span><span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> train_dataloader<span class="token punctuation">:</span>        imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data        imgs <span class="token operator">=</span> imgs<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        targets <span class="token operator">=</span> targets<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        output <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>        loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>output<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>        <span class="token comment"># 优化器优化模型</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        total_train_step <span class="token operator">=</span> total_train_step <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span> total_train_step <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练次数: &#123;&#125; ， loss: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_train_step<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 将训练过程当中的额loss添加到tensorboard上</span>            writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"train_loss"</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> total_train_step<span class="token punctuation">)</span>    <span class="token comment"># 测试步骤开始</span>    <span class="token builtin">bin</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    total_test_loss <span class="token operator">=</span> <span class="token number">0</span>    total_accuracy <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 不需要进行梯度处理</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> data <span class="token keyword">in</span> test_dataloader<span class="token punctuation">:</span>            imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data            imgs <span class="token operator">=</span> imgs<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            targets <span class="token operator">=</span> targets<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            outputs <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>            loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>            total_test_loss <span class="token operator">=</span> total_test_loss <span class="token operator">+</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            accuracy <span class="token operator">=</span> <span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> targets<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            total_accuracy <span class="token operator">=</span> total_accuracy <span class="token operator">+</span> accuracy    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"整体测试集上的loss: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_test_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"整体测试集上的正确率： &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_accuracy<span class="token operator">/</span>test_data_size<span class="token punctuation">)</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"test_loss"</span><span class="token punctuation">,</span> total_test_loss<span class="token punctuation">,</span> total_test_step<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"test_accuracy"</span><span class="token punctuation">,</span> total_accuracy<span class="token operator">/</span>test_data_size<span class="token punctuation">,</span> total_test_step<span class="token punctuation">)</span>    total_test_step <span class="token operator">=</span> total_test_step <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment"># 在这里保存每一轮训练的结果</span>    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">,</span> <span class="token string">"bin_&#123;&#125;.pth"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"模型已保存"</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></font>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 网络模型 </tag>
            
            <tag> 模型训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch学习6-完整的模型训练塔路</title>
      <link href="/2022/110816120.html"/>
      <url>/2022/110816120.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、模型的使用"><a href="#一、模型的使用" class="headerlink" title="一、模型的使用"></a>一、模型的使用</h3><p>首先创建模型的py文件</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token comment"># 搭建神经网络</span><span class="token keyword">class</span> <span class="token class-name">Bin</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Bin<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>model <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token builtin">bin</span> <span class="token operator">=</span> Bin<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    output <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><h5 id="一套完整的模型训练过程"><a href="#一套完整的模型训练过程" class="headerlink" title="一套完整的模型训练过程"></a>一套完整的模型训练过程</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token keyword">from</span> model <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 1、准备数据集(参数当中需要将其转换为tensor类型)</span><span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoadertrain_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                          download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 2、查看训练数据集 测试数据集的大小</span>train_data_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_data<span class="token punctuation">)</span>test_data_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_data<span class="token punctuation">)</span><span class="token comment"># 下面是字符串的替换方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练数据集的大小为：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>train_data_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试数据集的大小为：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>test_data_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 训练数据集的大小为：50000</span><span class="token comment"># 测试数据集的大小为：10000</span><span class="token comment"># 3、使用DataLoader加载数据集</span>train_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>test_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token comment"># 4、引入搭建好的神经网络： model.py</span><span class="token comment"># 使用了 from model import *</span><span class="token builtin">bin</span> <span class="token operator">=</span> Bin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 5、构建损失函数</span>loss_fn <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 6、构建优化器</span><span class="token comment"># 学习速率</span><span class="token comment"># learning_rate = 0.01</span><span class="token comment"># 也有下面的写法</span><span class="token comment"># 1e-2 = (10) ^ (-2) = 0.01</span>learning_rate <span class="token operator">=</span> <span class="token number">1e-2</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span><span class="token comment"># 7、设置训练网络当中的一些参数</span><span class="token comment"># 训练的次数</span>total_train_step <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 测试的次数</span>total_test_step <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 训练的轮数</span>epoch <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 8、循环进行训练</span><span class="token comment"># 在训练的过程当中添加tensorboard</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"./logs_train"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第 &#123;&#125; 轮训练开始"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 训练步骤开始</span>    <span class="token builtin">bin</span><span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> train_dataloader<span class="token punctuation">:</span>        imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data        output <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>        loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>output<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>        <span class="token comment"># 优化器优化模型</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        total_train_step <span class="token operator">=</span> total_train_step <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span> total_train_step <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练次数: &#123;&#125; ， loss: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_train_step<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 将训练过程当中的额loss添加到tensorboard上</span>            writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"train_loss"</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> total_train_step<span class="token punctuation">)</span>    <span class="token comment"># 测试步骤开始</span>    <span class="token builtin">bin</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    total_test_loss <span class="token operator">=</span> <span class="token number">0</span>    total_accuracy <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 不需要进行梯度处理</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> data <span class="token keyword">in</span> test_dataloader<span class="token punctuation">:</span>            imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data            outputs <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>            loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>            total_test_loss <span class="token operator">=</span> total_test_loss <span class="token operator">+</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            accuracy <span class="token operator">=</span> <span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> targets<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            total_accuracy <span class="token operator">=</span> total_accuracy <span class="token operator">+</span> accuracy    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"整体测试集上的loss: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_test_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"整体测试集上的正确率： &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_accuracy<span class="token operator">/</span>test_data_size<span class="token punctuation">)</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"test_loss"</span><span class="token punctuation">,</span> total_test_loss<span class="token punctuation">,</span> total_test_step<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"test_accuracy"</span><span class="token punctuation">,</span> total_accuracy<span class="token operator">/</span>test_data_size<span class="token punctuation">,</span> total_test_step<span class="token punctuation">)</span>    total_test_step <span class="token operator">=</span> total_test_step <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment"># 在这里保存每一轮训练的结果</span>    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">,</span> <span class="token string">"bin_&#123;&#125;.pth"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"模型已保存"</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="在tensorboard上的效果如图"><a href="#在tensorboard上的效果如图" class="headerlink" title="在tensorboard上的效果如图"></a>在tensorboard上的效果如图</h5><p><img src="/2022/110816120/%E5%AE%8C%E6%95%B4%E7%9A%84%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E6%B5%81%E7%A8%8B.png" alt></p></font>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 网络模型 </tag>
            
            <tag> 模型训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch学习5-现有模型的修改</title>
      <link href="/2022/110816119.html"/>
      <url>/2022/110816119.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、模型的使用"><a href="#一、模型的使用" class="headerlink" title="一、模型的使用"></a>一、模型的使用</h3><h5 id="查看vgg16的模型结构"><a href="#查看vgg16的模型结构" class="headerlink" title="查看vgg16的模型结构"></a>查看vgg16的模型结构</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchvision<span class="token comment"># train_data = torchvision.dataset.ImageNet("./data_image_net", split='train', download=True,</span><span class="token comment">#                                           transform=torchvision.transforms.ToTensor())</span><span class="token keyword">from</span> torch <span class="token keyword">import</span> nnvgg16_false <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>vgg16<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>vgg16_true <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>vgg16<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># vgg16是已经训练好了网络模型架构，相比于nn_module文件当中的模型架构，他本身已经封装了模型的结构</span><span class="token keyword">print</span><span class="token punctuation">(</span>vgg16_true<span class="token punctuation">)</span><span class="token comment"># 打印输出VGG的模型结构</span><span class="token comment"># VGG(</span><span class="token comment">#   (features): Sequential(</span><span class="token comment">#     (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (1): ReLU(inplace=True)</span><span class="token comment">#     (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (3): ReLU(inplace=True)</span><span class="token comment">#     (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (6): ReLU(inplace=True)</span><span class="token comment">#     (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (8): ReLU(inplace=True)</span><span class="token comment">#     (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (11): ReLU(inplace=True)</span><span class="token comment">#     (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (13): ReLU(inplace=True)</span><span class="token comment">#     (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (15): ReLU(inplace=True)</span><span class="token comment">#     (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (18): ReLU(inplace=True)</span><span class="token comment">#     (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (20): ReLU(inplace=True)</span><span class="token comment">#     (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (22): ReLU(inplace=True)</span><span class="token comment">#     (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (25): ReLU(inplace=True)</span><span class="token comment">#     (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (27): ReLU(inplace=True)</span><span class="token comment">#     (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (29): ReLU(inplace=True)</span><span class="token comment">#     (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#   )</span><span class="token comment">#   (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))</span><span class="token comment">#   (classifier): Sequential(</span><span class="token comment">#     (0): Linear(in_features=25088, out_features=4096, bias=True)</span><span class="token comment">#     (1): ReLU(inplace=True)</span><span class="token comment">#     (2): Dropout(p=0.5, inplace=False)</span><span class="token comment">#     (3): Linear(in_features=4096, out_features=4096, bias=True)</span><span class="token comment">#     (4): ReLU(inplace=True)</span><span class="token comment">#     (5): Dropout(p=0.5, inplace=False)</span><span class="token comment">#     (6): Linear(in_features=4096, out_features=1000, bias=True)</span><span class="token comment">#   )</span><span class="token comment"># )</span>train_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                          transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                          download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 对vgg16网络模型进行修改</span>vgg16_true<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"add_linear"</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>vgg16_true<span class="token punctuation">.</span>classifier<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"add_linear"</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>vgg16_true<span class="token punctuation">)</span><span class="token comment"># VGG(</span><span class="token comment">#   (features): Sequential(</span><span class="token comment">#     (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (1): ReLU(inplace=True)</span><span class="token comment">#     (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (3): ReLU(inplace=True)</span><span class="token comment">#     (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (6): ReLU(inplace=True)</span><span class="token comment">#     (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (8): ReLU(inplace=True)</span><span class="token comment">#     (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (11): ReLU(inplace=True)</span><span class="token comment">#     (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (13): ReLU(inplace=True)</span><span class="token comment">#     (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (15): ReLU(inplace=True)</span><span class="token comment">#     (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (18): ReLU(inplace=True)</span><span class="token comment">#     (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (20): ReLU(inplace=True)</span><span class="token comment">#     (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (22): ReLU(inplace=True)</span><span class="token comment">#     (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (25): ReLU(inplace=True)</span><span class="token comment">#     (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (27): ReLU(inplace=True)</span><span class="token comment">#     (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (29): ReLU(inplace=True)</span><span class="token comment">#     (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#   )</span><span class="token comment">#   (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))</span><span class="token comment">#   (classifier): Sequential(</span><span class="token comment">#     (0): Linear(in_features=25088, out_features=4096, bias=True)</span><span class="token comment">#     (1): ReLU(inplace=True)</span><span class="token comment">#     (2): Dropout(p=0.5, inplace=False)</span><span class="token comment">#     (3): Linear(in_features=4096, out_features=4096, bias=True)</span><span class="token comment">#     (4): ReLU(inplace=True)</span><span class="token comment">#     (5): Dropout(p=0.5, inplace=False)</span><span class="token comment">#     (6): Linear(in_features=4096, out_features=1000, bias=True)</span><span class="token comment"># 在原有模型的基础上添加的步骤</span><span class="token comment">#     (add_linear): Linear(in_features=1000, out_features=10, bias=True)</span><span class="token comment">#   )</span><span class="token comment"># 在原有模型的基础上添加的步骤</span><span class="token comment">#   (add_linear): Linear(in_features=1000, out_features=10, bias=True)</span><span class="token comment"># )</span></code></pre><h3 id="二、模型的保存与加载"><a href="#二、模型的保存与加载" class="headerlink" title="二、模型的保存与加载"></a>二、模型的保存与加载</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">################################## 模型的保存 #################################</span><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvisionvgg16 <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>vgg16<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 保存的方式1</span><span class="token comment"># 直接保存到当前目录下，保存的有模型的结构/参数/</span><span class="token comment"># 然后在model_save_load当中进行模型的加载</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>vgg16<span class="token punctuation">,</span> <span class="token string">"vgg16_method1.pth"</span><span class="token punctuation">)</span><span class="token comment"># 保存方式2</span><span class="token comment"># 保留了模型的参数到字典当中（官网推荐）</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>vgg16<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"vgg16_method2.pth"</span><span class="token punctuation">)</span><span class="token comment">################################## 模型的加载###################################</span><span class="token keyword">import</span> torch<span class="token comment"># 方式1-->模型的加载</span><span class="token keyword">import</span> torchvisionmodel <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"vgg16_method1.pth"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token comment"># 方式2</span>vgg16 <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>vgg16<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>vgg16<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"vgg_method2.pth"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>vgg16<span class="token punctuation">)</span></code></pre></font>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 网络模型 </tag>
            
            <tag> VGG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch学习3-神经网络的搭建</title>
      <link href="/2022/110716118.html"/>
      <url>/2022/110716118.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h4 id="一、相关地址"><a href="#一、相关地址" class="headerlink" title="一、相关地址"></a>一、相关地址</h4><h5 id="神经网络NN-Neural-Network"><a href="#神经网络NN-Neural-Network" class="headerlink" title="神经网络NN[Neural Network]"></a>神经网络NN[Neural Network]</h5><p><a href="https://pytorch.org/docs/stable/nn.html">PyTorch的nn Api</a></p><h4 id="二、torch-nn-Module-对所有的神经网络构成最基本的类"><a href="#二、torch-nn-Module-对所有的神经网络构成最基本的类" class="headerlink" title="二、torch.nn.Module 对所有的神经网络构成最基本的类"></a>二、torch.nn.Module 对所有的神经网络构成最基本的类</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>上述代码当中的神经网络包括两个过程：forward函数对x首先进行卷积1，卷积1的处理过程在<strong>init</strong>函数当中定义nn.Conv2d(1, 20, 5)，然后对其进行非线性的处理relu，再来一次卷积2和非线性relu，最后返回结果。</p><p><img src="/2022/110716118/forward%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8.png" alt></p><h4 id="三、卷积操作"><a href="#三、卷积操作" class="headerlink" title="三、卷积操作"></a>三、卷积操作</h4><p><img src="/2022/110716118/%E5%8D%B7%E7%A7%AF%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 可以手动算一算</span><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>kernel <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>kernel<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment"># torch.Size([5, 5])</span><span class="token comment"># torch.Size([3, 3])</span><span class="token comment"># 进行变换为四维的矩阵</span><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>kernel <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>kernel<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>kernel<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment"># torch.Size([1, 1, 5, 5])</span><span class="token comment"># torch.Size([1, 1, 3, 3])</span><span class="token comment"># conv2d：表示2维卷积     conv3d：表示3维卷积</span><span class="token comment"># conv2d表示进行卷积操作 stride为步进值</span>output <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> kernel<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token comment"># tensor([[[[10, 12, 12],</span><span class="token comment">#           [18, 16, 16],</span><span class="token comment">#           [13,  9,  3]]]])</span>output2 <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> kernel<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output2<span class="token punctuation">)</span><span class="token comment"># tensor([[[[10, 12],</span><span class="token comment">#           [13,  3]]]])</span><span class="token comment"># padding 表示在输入矩阵的外围填充一圈,默认填充的是0</span>output3 <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> kernel<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output3<span class="token punctuation">)</span><span class="token comment"># tensor([[[[ 1,  3,  4, 10,  8],</span><span class="token comment">#           [ 5, 10, 12, 12,  6],</span><span class="token comment">#           [ 7, 18, 16, 16,  8],</span><span class="token comment">#           [11, 13,  9,  3,  4],</span><span class="token comment">#           [14, 13,  9,  7,  4]]]])</span></code></pre><p><img src="/2022/110716118/%E5%8D%B7%E7%A7%AF%E6%93%8D%E4%BD%9C1.png" alt></p><p><a href="https://github.com/vdumoulin/conv_arithmetic/blob/master/README.md">官网上的卷积流程</a></p><p>卷积流程如下：<br><img src="/2022/110716118/%E5%8D%B7%E7%A7%AF%E5%8A%A8%E7%94%BB.png" alt></p><p><img src="/2022/110716118/%E5%8D%B7%E7%A7%AF%E5%8F%82%E6%95%B0.png" alt></p><h4 id="四、卷积数据集"><a href="#四、卷积数据集" class="headerlink" title="四、卷积数据集"></a>四、卷积数据集</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Conv2d<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriterdataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">BinConv2d</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>BinConv2d<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> xbinConv2d <span class="token operator">=</span> BinConv2d<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>binConv2d<span class="token punctuation">)</span>step <span class="token operator">=</span> <span class="token number">0</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">)</span><span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>    imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data    output <span class="token operator">=</span> binConv2d<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>    <span class="token comment"># 将图像放入到定义好的卷积处理流程当中进行处理</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>imgs<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>targets<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment"># torch.Size([64, 3, 32, 32])</span>    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> imgs<span class="token punctuation">,</span> step<span class="token punctuation">)</span>    <span class="token comment"># torch.Size([64, 6, 30, 30]) -> [xxx, 3, 30, 30]</span>    <span class="token comment"># 原始的output格式torch.Size([64, 6, 30, 30])，但是需要转化为[xxx, 3, 30, 30]</span>    output <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span> step<span class="token punctuation">)</span>    step <span class="token operator">=</span> step <span class="token operator">+</span> <span class="token number">1</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>卷积后的效果图：<br><img src="/2022/110716118/%E5%8D%B7%E7%A7%AF%E5%90%8E%E7%9A%84tensorboard.png" alt></p><h4 id="五、池化层Pooling-layers"><a href="#五、池化层Pooling-layers" class="headerlink" title="五、池化层Pooling layers"></a>五、池化层Pooling layers</h4><p>maxpooling: 最大池化的作用：保留原始的特征的同时，也需要降低维度。换而言之就是对其进行压缩，我们看的视频是1080P的，池化之后是720p也可以满足对视频的需求，但是其降低了数据的计算量。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> MaxPool2d<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriterdataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                       transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token comment"># input = torch.tensor([[1, 2, 0, 3, 1],</span><span class="token comment">#                       [0, 1, 2, 3, 1],</span><span class="token comment">#                       [1, 2, 1, 0, 0],</span><span class="token comment">#                       [5, 2, 3, 1, 1],</span><span class="token comment">#                       [2, 1, 0, 1, 1]], dtype=torch.float32)</span><span class="token comment">#</span><span class="token comment"># input = torch.reshape(input, (-1, 1, 5, 5))</span><span class="token comment"># print(input.shape)</span><span class="token keyword">class</span> <span class="token class-name">BinMaxPool</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>BinMaxPool<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># ceil_mode 表示：如果匹配的过程中有空洞的地方，是否需要跳过</span>        <span class="token comment"># kernel_size 表示： 每一次池化核走的时候，走3步</span>        self<span class="token punctuation">.</span>maxpool1 <span class="token operator">=</span> MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> ceil_mode<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>maxpool1<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> outputbinmaxpool <span class="token operator">=</span> BinMaxPool<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># output = binmaxpool(input)</span><span class="token comment"># print(output)</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"./logs_maxpool"</span><span class="token punctuation">)</span>step <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>    imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data    <span class="token comment"># setp对应上每一步的输入和输出图像</span>    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> imgs<span class="token punctuation">,</span> step<span class="token punctuation">)</span>    output <span class="token operator">=</span> binmaxpool<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span> step<span class="token punctuation">)</span>    step <span class="token operator">=</span> step <span class="token operator">+</span> <span class="token number">1</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/2022/110716118/%E6%9C%80%E5%A4%A7%E6%B1%A0%E5%8C%96%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt></p><h4 id="六、非线性激活relu处理和sigmoid处理"><a href="#六、非线性激活relu处理和sigmoid处理" class="headerlink" title="六、非线性激活relu处理和sigmoid处理"></a>六、非线性激活relu处理和sigmoid处理</h4><p>非线性激活函数实际上是给模型增强非线性的表达能力或者因素，有了非线性函数模型的表达能力就会更强。整个模型就像活了一样，而不是像机器一样只会做一些单一的线性操作。<br>没有激活函数的神经网络实际上是线性可加的，那么多线性层其实可以归为一层，只具有线性的神经网络表达能力及其有限。</p><p><img src="/2022/110716118/relu%E6%95%88%E6%9E%9C.png" alt></p><p>注意：批的大小就是batch_size，每取一次就是一个step，step与batch_size是有关系的，因为通常数据集都很大，没有办法一次性全部取出来，单个单个的取浪费时间（与IO操作有关系），所有按照批处理的方式进行。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> ReLU<span class="token punctuation">,</span> Sigmoid<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>   <span class="token comment"># 将数据转化为满足格式的</span>dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                       transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">BinReLU</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>BinReLU<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu1 <span class="token operator">=</span> ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>sigmoid11 <span class="token operator">=</span> Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>sigmoid11<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> outputbinRelu <span class="token operator">=</span> BinReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>output <span class="token operator">=</span> binRelu<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"./logs_relu"</span><span class="token punctuation">)</span>step <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>    imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">,</span> global_step<span class="token operator">=</span>step<span class="token punctuation">)</span>    output <span class="token operator">=</span> binRelu<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span> step<span class="token punctuation">)</span>    step <span class="token operator">+=</span> <span class="token number">1</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="七、CIFAR10-model结构"><a href="#七、CIFAR10-model结构" class="headerlink" title="七、CIFAR10 model结构"></a>七、CIFAR10 model结构</h4><p><img src="/2022/110716118/CIFAR10model%E7%BB%93%E6%9E%84.png" alt></p><p><img src="/2022/110716118/stride-padding%E7%9A%84%E8%AE%A1%E7%AE%97.png" alt></p><h5 id="网络的处理流程："><a href="#网络的处理流程：" class="headerlink" title="网络的处理流程："></a>网络的处理流程：</h5><pre><code>卷积---池化---卷积---池化---卷积---池化---展开---线性层---线性层</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Conv2d<span class="token punctuation">,</span> MaxPool2d<span class="token punctuation">,</span> Flatten<span class="token punctuation">,</span> Linear<span class="token punctuation">,</span> Sequential<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token keyword">class</span> <span class="token class-name">BinSeq</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>BinSeq<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># self.conv1 = Conv2d(3, 32, 5, padding=2)</span>        <span class="token comment"># self.maxpool1 = MaxPool2d(2)</span>        <span class="token comment"># self.conv2 = Conv2d(32, 32, 5, padding=2)</span>        <span class="token comment"># self.maxpool2 = MaxPool2d(2)</span>        <span class="token comment"># self.conv3 = Conv2d(32, 64, 5, padding=2)</span>        <span class="token comment"># self.maxpool3 = MaxPool2d(2)</span>        <span class="token comment"># self.flatten = Flatten()</span>        <span class="token comment"># self.linear1 = Linear(1024, 64)</span>        <span class="token comment"># self.linear2 = Linear(64, 10)</span>        <span class="token comment"># 模型的包装  Sequential的使用</span>        self<span class="token punctuation">.</span>model1 <span class="token operator">=</span> Sequential<span class="token punctuation">(</span>            Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Linear<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># x = self.conv1(x)</span>        <span class="token comment"># x = self.maxpool1(x)</span>        <span class="token comment"># x = self.conv2(x)</span>        <span class="token comment"># x = self.maxpool2(x)</span>        <span class="token comment"># x = self.conv3(x)</span>        <span class="token comment"># x = self.maxpool3(x)</span>        <span class="token comment"># x = self.flatten(x)</span>        <span class="token comment"># x = self.linear1(x)</span>        <span class="token comment"># x = self.linear2(x)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>model1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> xbinseq <span class="token operator">=</span> BinSeq<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>binseq<span class="token punctuation">)</span><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>output <span class="token operator">=</span> binseq<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"logs_seq"</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span>add_graph<span class="token punctuation">(</span>binseq<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># BinSeq(</span><span class="token comment">#   (model1): Sequential(</span><span class="token comment">#     (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))</span><span class="token comment">#     (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (2): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))</span><span class="token comment">#     (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))</span><span class="token comment">#     (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (6): Flatten(start_dim=1, end_dim=-1)</span><span class="token comment">#     (7): Linear(in_features=1024, out_features=64, bias=True)</span><span class="token comment">#     (8): Linear(in_features=64, out_features=10, bias=True)</span><span class="token comment">#   )</span><span class="token comment"># )</span></code></pre><p>网络搭建在tensorboard当中的效果如下图所示：</p><p><img src="/2022/110716118/seq%E7%9A%84tensorboard%E6%95%88%E6%9E%9C.png" alt></p><h4 id="八、损失函数与反向传播"><a href="#八、损失函数与反向传播" class="headerlink" title="八、损失函数与反向传播"></a>八、损失函数与反向传播</h4><p>损失函数：指的是实际的输出与目标之间的差距<br>方向传播：指为我们更新数据提供了一定的依据</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> L1Loss<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token comment"># 注意的是：这里的[1, 2, 3]是指3个维度，是一维1， 2， 3</span><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>target <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>target <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>loss <span class="token operator">=</span> L1Loss<span class="token punctuation">(</span><span class="token punctuation">)</span>result <span class="token operator">=</span> loss<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token comment"># 计算均方误差</span>loss_mse <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>result_mse <span class="token operator">=</span> loss_mse<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>       <span class="token comment"># tensor(0.6667)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result_mse<span class="token punctuation">)</span>   <span class="token comment"># tensor(1.3333)</span><span class="token comment"># 下面进行交叉熵损失函数的计算</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>loss_cross <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>result_cross <span class="token operator">=</span> loss_cross<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result_cross<span class="token punctuation">)</span>     <span class="token comment"># tensor(1.1019)</span></code></pre><p><img src="/2022/110716118/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0.png" alt></p><h5 id="交叉熵损失函数的计算"><a href="#交叉熵损失函数的计算" class="headerlink" title="交叉熵损失函数的计算"></a>交叉熵损失函数的计算</h5><p>交叉熵损失函数的解读：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;假设：目标为检测左侧的图像，中间的为深度神经网络的模型图，分成三组[person, dog, cat]，其下标分别表示[0, 1, 2]输出的结果为[0.1, 0.2, 0.3], 目标是检测为dog[1]。</p><p>对应于公式中：x表示output，class表示target的值</p><p>则Loss(x, class) = -0.2 * 1  + log(exp(0.1) + exp(0.2) + exp(0.3))</p><p><img src="/2022/110716118/%E4%BA%A4%E5%8F%89%E7%86%B5%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0.png" alt></p></font>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> Pytorch基础代码 </tag>
            
            <tag> Python卷积/池化/非线性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch学习2-基础代码解析</title>
      <link href="/2022/110716117.html"/>
      <url>/2022/110716117.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h4 id="一、数据加载模块"><a href="#一、数据加载模块" class="headerlink" title="一、数据加载模块"></a>一、数据加载模块</h4><p>DataSet: 提供一种方式去获取数据及其label<br>DataLoader: 为后面的网络提供不同的数据形式</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token keyword">import</span> cv2<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">MyData</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root_dir<span class="token punctuation">,</span> label_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>root_dir <span class="token operator">=</span> root_dir        self<span class="token punctuation">.</span>label_dir <span class="token operator">=</span> label_dir        self<span class="token punctuation">.</span>path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root_dir<span class="token punctuation">,</span> self<span class="token punctuation">.</span>label_dir<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>img_path <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>path<span class="token punctuation">)</span>       <span class="token comment"># 获取路径下的所有图片地址</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        img_name <span class="token operator">=</span> self<span class="token punctuation">.</span>img_path<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>               <span class="token comment"># 每一张图片的位置</span>        <span class="token comment"># 每一张图片的加载路径 使用到了os.path.join  root_dir  label_dir img_name</span>        img_item_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root_dir<span class="token punctuation">,</span> self<span class="token punctuation">.</span>label_dir<span class="token punctuation">,</span> img_name<span class="token punctuation">)</span>        img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>img_item_path<span class="token punctuation">)</span>             <span class="token comment"># 返回的是图片，打开</span>        label <span class="token operator">=</span> self<span class="token punctuation">.</span>label_dir                      <span class="token comment"># 返回该图片的label位置</span>        <span class="token keyword">return</span> img<span class="token punctuation">,</span> label    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>img_path<span class="token punctuation">)</span>                   <span class="token comment"># 返回定义的所有照片的list长度</span><span class="token comment"># 创建实例</span>root_dir <span class="token operator">=</span> <span class="token string">"dataset/hymenoptera_data/train"</span>ants_label_dir <span class="token operator">=</span> <span class="token string">"ants"</span>bees_label_dir <span class="token operator">=</span> <span class="token string">"bees"</span>ants_dataset <span class="token operator">=</span> MyData<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span> ants_label_dir<span class="token punctuation">)</span>     <span class="token comment"># 返回的是蚂蚁数据集</span>bees_dataset <span class="token operator">=</span> MyData<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span> bees_label_dir<span class="token punctuation">)</span>train_dataset <span class="token operator">=</span> ants_dataset <span class="token operator">+</span> bees_dataset<span class="token comment"># 输出ants_dataset当中的img, label</span>img<span class="token punctuation">,</span> label <span class="token operator">=</span> ants_dataset<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># img.show(ants_dataset[0])</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token comment"># &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=500x333 at 0x14AE1EC0340> ants</span><span class="token keyword">print</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token comment"># ants</span><span class="token keyword">print</span><span class="token punctuation">(</span>ants_dataset<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 124</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ants_dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 124</span></code></pre><p><img src="/2022/110716117/DataSet%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt></p><h4 id="二、tensorboard数据展示模块"><a href="#二、tensorboard数据展示模块" class="headerlink" title="二、tensorboard数据展示模块"></a>二、tensorboard数据展示模块</h4><p>tensorboard的使用</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token keyword">import</span> cv2<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 将相关的解析文件存放在logs文件夹当中</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">)</span>image_path <span class="token operator">=</span> <span class="token string">"dataset/train/ants_image/0013035.jpg"</span>img_PIL <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>img_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img_PIL<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>img_array<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># &lt;class 'numpy.ndarray'></span><span class="token keyword">print</span><span class="token punctuation">(</span>img_array<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>      <span class="token comment"># (512, 768, 3) 查看通道的数量和位置，即下面的dataformats</span><span class="token comment"># 参数分别表示：名称, 图像，步骤，数据格式</span><span class="token comment"># 这个步骤可以在tensorboard上进行拖动展示，表示每一个步骤的图像结果</span>writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> img_array<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> dataformats<span class="token operator">=</span><span class="token string">"HWC"</span><span class="token punctuation">)</span><span class="token comment"># 绘制一条y=x的线</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"y=2*x"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 这里是会出现多个函数，最后扭在一起是多个函数进行了一个拟合，需要把logs文件夹里面的内容删除即可</span><span class="token comment"># terminal当中编写命令： tensorboard --logdir=logs --port=6007</span></code></pre><p><img src="/2022/110716117/tensorboard%E8%BF%87%E7%A8%8B.png" alt></p><p><img src="/2022/110716117/tensorboard%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt></p><h4 id="三、transforms"><a href="#三、transforms" class="headerlink" title="三、transforms"></a>三、transforms</h4><p>在python当中的用法 —&gt;tensor的数据类型<br>通过transforms.ToTensor去看两个问题：<br>1、transforms该如何使用（python）<br>2、为什么我们需要Tensor数据类型</p><p><img src="/2022/110716117/transforms%E7%BB%93%E6%9E%9C%E5%8F%8A%E7%94%A8%E6%B3%95.png" alt></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> cv2img_path <span class="token operator">=</span> <span class="token string">"dataset/train/ants_image/6240329_72c01e663e.jpg"</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">)</span><span class="token comment"># 1、使用transforms的方法</span>tensor_trans <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>tensor_img <span class="token operator">=</span> tensor_trans<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tensor_img<span class="token punctuation">)</span><span class="token comment"># &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=500x369 at 0x20B7D789640></span><span class="token comment"># tensor([[[0.3725, 0.3725, 0.3725,  ..., 0.7216, 0.7216, 0.7176],</span><span class="token comment">#          [0.3843, 0.3843, 0.3804,  ..., 0.7216, 0.7176, 0.7176],</span><span class="token comment">#          [0.4000, 0.4000, 0.3961,  ..., 0.7176, 0.7176, 0.7176],</span><span class="token comment">#          ...,</span><span class="token comment">#          [0.1176, 0.1176, 0.1176,  ..., 0.3059, 0.3059, 0.3020],</span><span class="token comment">#          [0.1176, 0.1176, 0.1176,  ..., 0.3020, 0.2980, 0.2980],</span><span class="token comment">#          [0.1176, 0.1020, 0.0980,  ..., 0.3020, 0.2980, 0.2941]],</span><span class="token comment">#</span><span class="token comment">#         [[0.3137, 0.3137, 0.3137,  ..., 0.6588, 0.6588, 0.6549],</span><span class="token comment">#          [0.3255, 0.3255, 0.3216,  ..., 0.6588, 0.6549, 0.6549],</span><span class="token comment">#          [0.3412, 0.3412, 0.3373,  ..., 0.6549, 0.6549, 0.6549],</span><span class="token comment">#          ...,</span><span class="token comment">#          [0.0980, 0.0980, 0.0980,  ..., 0.5176, 0.5176, 0.5137],</span><span class="token comment">#          [0.0980, 0.0980, 0.0980,  ..., 0.5137, 0.5098, 0.5098],</span><span class="token comment">#          [0.1020, 0.0863, 0.0824,  ..., 0.5137, 0.5098, 0.5059]],</span><span class="token comment">#</span><span class="token comment">#         [[0.2941, 0.2941, 0.2941,  ..., 0.6588, 0.6588, 0.6549],</span><span class="token comment">#          [0.3059, 0.3059, 0.3020,  ..., 0.6588, 0.6549, 0.6549],</span><span class="token comment">#          [0.3216, 0.3216, 0.3176,  ..., 0.6549, 0.6549, 0.6549],</span><span class="token comment">#          ...,</span><span class="token comment">#          [0.0824, 0.0824, 0.0824,  ..., 0.5647, 0.5647, 0.5608],</span><span class="token comment">#          [0.0824, 0.0824, 0.0824,  ..., 0.5608, 0.5569, 0.5569],</span><span class="token comment">#          [0.0902, 0.0745, 0.0706,  ..., 0.5608, 0.5569, 0.5529]]])</span><span class="token comment"># 2、为什么使用tensor的数据类型</span><span class="token comment"># 将其存放到logs当中的tensorboard当中</span>writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"Tensor_img"</span><span class="token punctuation">,</span> tensor_img<span class="token punctuation">)</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="transforms常见的函数"><a href="#transforms常见的函数" class="headerlink" title="transforms常见的函数"></a>transforms常见的函数</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transformswriter <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">)</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"dataset/train/ants_image/6240329_72c01e663e.jpg"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token comment"># transforms当中的方法的使用</span><span class="token comment"># 1、ToTensor</span><span class="token comment"># 将原来的PIL数据类型转化为tensor的数据类型</span>trans_totensor <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 首先定义一个方法trans_totensor为：类型转化为Tensor</span>img_tensor <span class="token operator">=</span> trans_totensor<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token comment"># 将参数传进去，完成数据类型的返回</span>writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"ToTensor"</span><span class="token punctuation">,</span> img_tensor<span class="token punctuation">)</span><span class="token comment"># 添加到tensorboard当中去</span><span class="token comment"># 2、Normalize</span><span class="token comment"># Normalize()函数的作用是将数据转换为标准高斯分布，即逐个channel的对图像进行标准化</span><span class="token comment"># （均值变为0，标准差为1），可以加快模型的收敛</span><span class="token keyword">print</span><span class="token punctuation">(</span>img_tensor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>trans_norm <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>img_norm <span class="token operator">=</span> trans_norm<span class="token punctuation">(</span>img_tensor<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img_norm<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"Normalize"</span><span class="token punctuation">,</span> img_norm<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 3、 Resize 将图像大大小转为512 512</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>size<span class="token punctuation">)</span>trans_resize <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span>img_resize <span class="token operator">=</span> trans_resize<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img_resize<span class="token punctuation">)</span><span class="token comment"># &lt;PIL.Image.Image image mode=RGB size=512x512 at 0x1B3F3850130></span><span class="token comment"># 大小为 512 * 512</span>img_resize <span class="token operator">=</span> trans_totensor<span class="token punctuation">(</span>img_resize<span class="token punctuation">)</span>  <span class="token comment"># 将原来的PIL类型转为tensor类型，再放入tensorboard当中</span>writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"Resize"</span><span class="token punctuation">,</span> img_resize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img_resize<span class="token punctuation">)</span><span class="token comment"># 4、Compose - resize -2</span><span class="token comment"># Compose 中的参数需要一个列表 列表的表示形式为[数据1， 数据2，...]</span><span class="token comment"># 在Compose中 数据需要tansforms类型 所以得到的是Compose([tansforms参数1],[tansforms参数2]...)</span>trans_resize_2 <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>trans_compose <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>trans_resize_2<span class="token punctuation">,</span> trans_totensor<span class="token punctuation">]</span><span class="token punctuation">)</span>img_resize_2 <span class="token operator">=</span> trans_compose<span class="token punctuation">(</span>img<span class="token punctuation">)</span>writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"Resize"</span><span class="token punctuation">,</span> img_resize_2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 5、RandomCrop 随机的裁剪图片</span>trans_random <span class="token operator">=</span> transforms<span class="token punctuation">.</span>RandomCrop<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>trans_compose_2 <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>trans_random<span class="token punctuation">,</span> trans_totensor<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    img_crop <span class="token operator">=</span> trans_compose_2<span class="token punctuation">(</span>img<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"RandomCrop"</span><span class="token punctuation">,</span> img_crop<span class="token punctuation">,</span> i<span class="token punctuation">)</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/2022/110716117/transform%E6%96%B9%E6%B3%95.png" alt></p></font>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> Pytorch基础代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch学习1-环境安装</title>
      <link href="/2022/110716116.html"/>
      <url>/2022/110716116.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、各类资源地址"><a href="#一、各类资源地址" class="headerlink" title="一、各类资源地址"></a>一、各类资源地址</h3><p><a href="https://pytorch.org/">Pytorch官网</a></p><p><a href="https://www.anaconda.com/">anaconda官网</a></p><p><a href="https://repo.anaconda.com/archive/">anaconda历史版本</a></p><p><a href="https://www.bilibili.com/video/BV1hE411t7RN/?spm_id_from=333.337.search-card.all.click&vd_source=0f50d0008f8b836aa3258f634d65d48e">安装教程视频</a></p><h4 id="1、安装anaconda"><a href="#1、安装anaconda" class="headerlink" title="1、安装anaconda"></a>1、安装anaconda</h4><p>根据上述安装地址下载安装,搜索Anaconda Prompt出现base环境说明安装成功<br><img src="/2022/110716116/anaconda%E7%9A%84base%E7%8E%AF%E5%A2%83.png" alt></p><h4 id="2、显卡的配置"><a href="#2、显卡的配置" class="headerlink" title="2、显卡的配置"></a>2、显卡的配置</h4><p>本地显卡版本：任务管理器-性能-GPU<br>设备管理器-显示适配器<br>驱动 + CUDA</p><p>查看驱动版本：</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">nvidia-smi</code></pre><p><img src="/2022/110716116/%E9%A9%B1%E5%8A%A8%E7%89%88%E6%9C%AC%E6%9F%A5%E7%9C%8B.png" alt></p><h4 id="3、使用conda创建虚拟环境"><a href="#3、使用conda创建虚拟环境" class="headerlink" title="3、使用conda创建虚拟环境"></a>3、使用conda创建虚拟环境</h4><p>1、打开Anaconda Prompt窗口，创建环境Pytorch</p><pre class="language-conda" data-language="conda"><code class="language-conda">conda create -n pytorch python&#x3D;3.6</code></pre><p>2、激活环境</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">conda activate pytorch</code></pre><p>3、查看环境当中具备哪些工具包：</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">pip list</code></pre><p>4、查看pytorch是否可用</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">python&gt;&gt;&gt; import torch&gt;&gt;&gt; torch.cuda.is_available();# 返回True表示本机GPU可被pytorch使用</code></pre><p>5、删除虚拟环境</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">conda remove -n pytorch_env(虚拟环境名称)  --all</code></pre><p><img src="/2022/110716116/%E6%9F%A5%E7%9C%8Bpytorch%E6%98%AF%E5%90%A6%E5%8F%AF%E7%94%A8.png" alt></p><p>6、将pytorch安装到指定的目录下</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">查看anaconda文档conda create help安装虚拟环境到指定目录下conda create --prefix&#x3D;D:\Anaconda\setup\envs\BinPytorch python&#x3D;3.8查看当前的环境及地址conda info --envs出现以下环境：labelImg                 C:\Users\Administrator\.conda\envs\labelImgbase                  *  D:\Anaconda\setuppytorch                  D:\Anaconda\setup\envs\pytorch</code></pre><p>7、创建好了虚拟环境之后，安装pytorch<br><a href="https://pytorch.org/">pytorch安装路径</a><br><img src alt></p><h3 id="二、相关的操作命令"><a href="#二、相关的操作命令" class="headerlink" title="二、相关的操作命令"></a>二、相关的操作命令</h3><pre class="language-cmd" data-language="cmd"><code class="language-cmd">dir() : 打开函数，查看有哪些方法help(): 工具的使用方法</code></pre><p><img src="/2022/110716116/pythorch%E5%91%BD%E4%BB%A4.png" alt><br><img src="/2022/110716116/pytorch%E5%91%BD%E4%BB%A42.png" alt><br><img src="/2022/110716116/pytorch%E5%91%BD%E4%BB%A43.png" alt></p><h5 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h5><p>在pycharm当中完成环境的配置之后</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cuda_version<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></font>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模型/代码/论文/资源 地址汇总</title>
      <link href="/2022/110616115.html"/>
      <url>/2022/110616115.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="一、模型"><a href="#一、模型" class="headerlink" title="一、模型"></a>一、模型</h2><pre class="language-none"><code class="language-none">模型本地存放地址：</code></pre><h3 id="1、ResNet相关预训练模型下载地址"><a href="#1、ResNet相关预训练模型下载地址" class="headerlink" title="1、ResNet相关预训练模型下载地址"></a>1、ResNet相关预训练模型下载地址</h3><pre class="language-python" data-language="python"><code class="language-python">model_urls <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'resnet18'</span><span class="token punctuation">:</span> <span class="token string">'https://download.pytorch.org/models/resnet18-f37072fd.pth'</span><span class="token punctuation">,</span>    <span class="token string">'resnet34'</span><span class="token punctuation">:</span> <span class="token string">'https://download.pytorch.org/models/resnet34-b627a593.pth'</span><span class="token punctuation">,</span>    <span class="token string">'resnet50'</span><span class="token punctuation">:</span> <span class="token string">'https://download.pytorch.org/models/resnet50-0676ba61.pth'</span><span class="token punctuation">,</span>    <span class="token string">'resnet101'</span><span class="token punctuation">:</span> <span class="token string">'https://download.pytorch.org/models/resnet101-63fe2227.pth'</span><span class="token punctuation">,</span>    <span class="token string">'resnet152'</span><span class="token punctuation">:</span> <span class="token string">'https://download.pytorch.org/models/resnet152-394f9c45.pth'</span><span class="token punctuation">,</span>    <span class="token string">'resnext50_32x4d'</span><span class="token punctuation">:</span> <span class="token string">'https://download.pytorch.org/models/resnext50_32x4d-7cdf4587.pth'</span><span class="token punctuation">,</span>    <span class="token string">'resnext101_32x8d'</span><span class="token punctuation">:</span> <span class="token string">'https://download.pytorch.org/models/resnext101_32x8d-8ba56ff5.pth'</span><span class="token punctuation">,</span>    <span class="token string">'wide_resnet50_2'</span><span class="token punctuation">:</span> <span class="token string">'https://download.pytorch.org/models/wide_resnet50_2-95faca4d.pth'</span><span class="token punctuation">,</span>    <span class="token string">'wide_resnet101_2'</span><span class="token punctuation">:</span> <span class="token string">'https://download.pytorch.org/models/wide_resnet101_2-32ee1156.pth'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>两种载入方式：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># methold1：</span><span class="token comment"># model = torchvision.models.resnet152(pretrained=True)</span> <span class="token comment"># methold2：</span>model<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>resnet152<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'./resnet152-394f9c45.pth'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><h4 id="1、reID-Relation-Aware-Global-Attention-for-Person-Re-identification-CVPR2020"><a href="#1、reID-Relation-Aware-Global-Attention-for-Person-Re-identification-CVPR2020" class="headerlink" title="1、reID: Relation-Aware Global Attention for Person Re-identification(CVPR2020)"></a>1、reID: Relation-Aware Global Attention for Person Re-identification(CVPR2020)</h4><p><a href="https://openaccess.thecvf.com/content_CVPR_2020/papers/Zhang_Relation-Aware_Global_Attention_for_Person_Re-Identification_CVPR_2020_paper.pdf">论文地址</a><br><a href="https://github.com/microsoft/Relation-Aware-Global-Attention-Networks">github地址</a><br><a href="https://www.bilibili.com/video/BV1eW4y1h7SZ?p=9&spm_id_from=pageDriver&vd_source=0f50d0008f8b836aa3258f634d65d48e">视频教程地址</a><br>本机代码地址： [E:\DeepLearning\REID\RGA\Relation Network for Person Re-identification\githubCode]</p><h2 id="三、论文"><a href="#三、论文" class="headerlink" title="三、论文"></a>三、论文</h2><h4 id="1、reID-Relation-Aware-Global-Attention-for-Person-Re-identification-CVPR2020-1"><a href="#1、reID-Relation-Aware-Global-Attention-for-Person-Re-identification-CVPR2020-1" class="headerlink" title="1、reID: Relation-Aware Global Attention for Person Re-identification(CVPR2020)"></a>1、<a href="https://openaccess.thecvf.com/content_CVPR_2020/papers/Zhang_Relation-Aware_Global_Attention_for_Person_Re-Identification_CVPR_2020_paper.pdf">reID: Relation-Aware Global Attention for Person Re-identification(CVPR2020)</a></h4><h2 id="四、其他资源"><a href="#四、其他资源" class="headerlink" title="四、其他资源"></a>四、其他资源</h2></font>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reID论文-Relation_Aware_Global_Attention_for_Person_Re-identification(CVPR2020)</title>
      <link href="/2022/110616114.html"/>
      <url>/2022/110616114.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="reID-Relation-Aware-Global-Attention-for-Person-Re-identification-CVPR2020"><a href="#reID-Relation-Aware-Global-Attention-for-Person-Re-identification-CVPR2020" class="headerlink" title="reID: Relation-Aware Global Attention for Person Re-identification(CVPR2020)"></a>reID: Relation-Aware Global Attention for Person Re-identification(CVPR2020)</h2><p><a href="https://openaccess.thecvf.com/content_CVPR_2020/papers/Zhang_Relation-Aware_Global_Attention_for_Person_Re-Identification_CVPR_2020_paper.pdf">论文地址</a></p><p><a href="https://github.com/microsoft/Relation-Aware-Global-Attention-Networks">github地址</a></p><p><a href="https://www.bilibili.com/video/BV1eW4y1h7SZ?p=9&spm_id_from=pageDriver&vd_source=0f50d0008f8b836aa3258f634d65d48e">视频教程地址</a></p><h3 id="一、模型图解读"><a href="#一、模型图解读" class="headerlink" title="一、模型图解读"></a>一、模型图解读</h3><p><img src="/2022/110616114/%E5%9F%BA%E4%BA%8E%E7%A9%BA%E9%97%B4%E5%92%8Cchannel%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6.png" alt></p><p>图a: 空间注意力机制的提取：得到特征图之后，一个维度上进行特征的运算<br>图b: 空间注意力机制的提取：得到特征图之后，一个channel上进行特征的运算</p><p>整体思想：通过提取图像的特征图，从特征图上来看，本文的两个创新点在于：</p><p>1、对应图a，从一个channel出发，一张图像[H * W]的所有特征点可以并不是全部都是行人的特征(存在部分背景因素),因此我们需要将特征点进行权重的划分，即获取一个大小为[H * W]的权重数组，再与特征图进行相乘。<br>2、对应图b，从不同的channel出发，我们并不是需要对每一个channel通道进行运算，而是根据通道之间的权重进行计算，因此我们计算出不同通道的权重[c],最后与特征图的通道相乘。<br>注：以上的两个操作过程相似，只是从两个不同的维度出发的！</p><p>模型结构：<br>图a：<br>&nbsp;&nbsp;&nbsp;&nbsp;    1、将图像的特征图embedding成一个通道的立体图(原始特征图的特征)—–&gt;保留原始的特征图信息</p><p>&nbsp;&nbsp;&nbsp;&nbsp;    2、计算[H * W]当中两两特征点之间的关系，reshape成一个[H * W]的特征</p><p>&nbsp;&nbsp;&nbsp;&nbsp;    3、为什么有两个？—–&gt; 一个计算的是我与另外一个特征点的关系，一个是另外一个特征点与我的关系(他们之间的关系是不一样的，可以试着理解理解)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;    4、最后将上述的三个特征图进行组装拼接，即：Relation-aware Feature</p><p>&nbsp;&nbsp;&nbsp;&nbsp;    5、最后将Relation-aware Feature做一个卷积操作，提取出每一个特征点位置上的权重值，及大小为[H * W]的权重数组Spatial Attention</p><p>图b: 几乎同上(获取通道的权重数组)</p></font>]]></content>
      
      
      <categories>
          
          <category> reID </category>
          
          <category> reID论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研er </tag>
            
            <tag> 行人重识别 </tag>
            
            <tag> reId </tag>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reID基础知识1-行人重识别定义及过程</title>
      <link href="/2022/110416113.html"/>
      <url>/2022/110416113.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="reID-Person-re-identification"><a href="#reID-Person-re-identification" class="headerlink" title="reID: Person re-identification"></a>reID: Person re-identification</h2><h3 id="一、reID要做什么？"><a href="#一、reID要做什么？" class="headerlink" title="一、reID要做什么？"></a>一、reID要做什么？</h3><blockquote><ul><li>在多摄像头的复杂环境当中，快速的定位查找指定的目标的所有结果</li></ul></blockquote><p>in other words：给定一个照片，我们需要在复杂的环境当中找到最匹配这张照片的若干个结果！</p><h3 id="二、行人重识别是什么？"><a href="#二、行人重识别是什么？" class="headerlink" title="二、行人重识别是什么？"></a>二、行人重识别是什么？</h3><p>行人识别：是将图像当中的行人找到<br>行人重识别：输入一张图像，然后在众多的摄像头所截取的图像当中获取具备输入图像特征的若干张行人图像<br>一般而言：我们会将该输入图像进行特征提取获取其特征图（例如：1024维的特征向量/图），然后再将图像库当中的数据也全部转化为1024维的特征向量/图，最后通过计算他们之间的相似度，来判别最后那些图像是我需要寻找的。<br><img src="/2022/110416113/%E8%A1%8C%E4%BA%BA%E9%87%8D%E8%AF%86%E5%88%AB%E5%9B%BE.png" alt></p><h3 id="三、行人重识别的应用场景"><a href="#三、行人重识别的应用场景" class="headerlink" title="三、行人重识别的应用场景"></a>三、行人重识别的应用场景</h3><blockquote><ul><li>手机相册分类（有些是人脸识别，有些是人的特征）</li><li>人机交互</li><li>智能超市</li><li>一分钟我要她的所有信息</li></ul></blockquote><p><img src="/2022/110416113/%E8%A1%8C%E4%BA%BA%E9%87%8D%E8%AF%86%E5%88%AB%E7%9A%84%E8%83%8C%E6%99%AF.png" alt></p><p>一句话： 我们进行重识别，其根本的方法就是<font color="#0000FF">相似度的匹配</font></p><h3 id="四、行人重识别领域当中存在的挑战"><a href="#四、行人重识别领域当中存在的挑战" class="headerlink" title="四、行人重识别领域当中存在的挑战"></a>四、行人重识别领域当中存在的挑战</h3><blockquote><ul><li>由于行人存在于图像当中，检测的过程当中截取出来的行人像素较低</li><li>不同于人脸识别，人脸所存在的干扰非常少，而行人包括：肢体，背景，环境，衣着等的影响</li><li>使用到的数据集量比较低，校园数据集一般而言都是1000人、10000图片左右</li></ul></blockquote><p><img src="/2022/110416113/%E8%A1%8C%E4%BA%BA%E9%87%8D%E8%AF%86%E5%88%AB%E5%AD%98%E5%9C%A8%E7%9A%84%E6%8C%91%E6%88%98.png" alt></p><blockquote><ul><li>分辨率较低</li><li>行人肢体受到遮挡</li><li>不同视角下的图像，对比起来较为困难</li><li>不同视角下的图像，光照条件可能不同</li><li>视觉模糊</li></ul></blockquote><p>目前研究所存在的问题：<font color="#00FF00">跨域问题</font>，就是在测试环境当中是<font color="#FF0000">state-of-the-art</font>，放到各种复杂的环境当中效果蹭蹭往下掉！公开的数据集都是学校的数据集！</p><h4 id="论文当中常用的数据集"><a href="#论文当中常用的数据集" class="headerlink" title="论文当中常用的数据集"></a>论文当中常用的数据集</h4><blockquote><ul><li>CUHK03: 香港中文大学(CUHK)校园</li><li>Market-1501: 清华大学校园</li><li>DukeMTMC: 8个摄像机</li><li>MSMIT17：12个室外和3个室内（校园）</li></ul></blockquote><p><img src="/2022/110416113/%E6%A0%A1%E5%9B%AD%E6%95%B0%E6%8D%AE%E9%9B%86.png" alt></p><h3 id="五、行人重识别效果的评估标准"><a href="#五、行人重识别效果的评估标准" class="headerlink" title="五、行人重识别效果的评估标准"></a>五、行人重识别效果的评估标准</h3><p>评估标准：基本上所有论文都是提出两个概念： <font color="#FF0000">rank1</font>  &nbsp;&nbsp;&nbsp; <font color="#FF0000">map</font></p><h4 id="rank1-返回结果的一系列图像当中，rank1表示第一章结果正确"><a href="#rank1-返回结果的一系列图像当中，rank1表示第一章结果正确" class="headerlink" title="rank1: 返回结果的一系列图像当中，rank1表示第一章结果正确"></a>rank1: 返回结果的一系列图像当中，rank1表示第一章结果正确</h4><h4 id="map-计算多组ap-average-presicion-的平均值"><a href="#map-计算多组ap-average-presicion-的平均值" class="headerlink" title="map: 计算多组ap(average presicion)的平均值"></a>map: 计算多组ap(average presicion)的平均值</h4><p><img src="/2022/110416113/map%E7%9A%84%E8%AE%A1%E7%AE%971.png" alt></p><p>通俗的计算： ap(average presicion) = (1/1 + 2/3 + 3/6 + 4/9 + 5/10) / 5<br>分子为：每一个正确的图片所应该存放的位置<br>分母为：识别的正确的结果(橙色)在识别的结果当中的位置</p><p>分析：如果识别的所有结果均在正确的位置上，也就是说，识别出来的第一张最相似，第二张次之，以此类推，那么ap = (1/1 + 2/2 + 3/3 + 4/4 +5/5) / 5 = 1 。即ap值越接近于1，越能够证明识别的效果好！</p><p><img src="/2022/110416113/map%E7%9A%84%E8%AE%A1%E7%AE%972.png" alt></p><p>一般而言做一组实验不能证明其最终的效果，我们做多组实验(上两张图ap_1 = 0.62 ap_2 = 0.44),则最终的 map = (0.62 + 0.44)/2 = 0.53</p><h3 id="六、损失函数"><a href="#六、损失函数" class="headerlink" title="六、损失函数"></a>六、损失函数</h3><p>(学习完了过来补充)</p><h3 id="附：牛逼的地方："><a href="#附：牛逼的地方：" class="headerlink" title="附：牛逼的地方："></a>附：牛逼的地方：</h3><p><a href="https://research.megvii.com/">旷视研究院</a></p><p><a href="https://aaai.org/Conferences/AAAI-22/">AAAI</a></p><p><a href="https://cvpr2022.thecvf.com/">CVPR</a></p><p><a href="https://www.bilibili.com/video/BV1eW4y1h7SZ?p=2&spm_id_from=pageDriver&vd_source=0f50d0008f8b836aa3258f634d65d48e">课程地址</a></p><p>课件地址: (E:\DeepLearning\REID\RGA)</p></font>]]></content>
      
      
      <categories>
          
          <category> reID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研er </tag>
            
            <tag> 行人重识别 </tag>
            
            <tag> reId </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神经网络基础-线性函数&amp;损失函数</title>
      <link href="/2022/110116112.html"/>
      <url>/2022/110116112.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3></font>]]></content>
      
      
      <categories>
          
          <category> 神经网络学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统6-springboot系统中三层架构的分析</title>
      <link href="/2022/103116111.html"/>
      <url>/2022/103116111.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3></font>]]></content>
      
      
      <categories>
          
          <category> 前后端分离web系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用小工具 </tag>
            
            <tag> SpringBoot+vue </tag>
            
            <tag> 前后端分离 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统5-登录系统的逻辑</title>
      <link href="/2022/103116110.html"/>
      <url>/2022/103116110.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3></font>]]></content>
      
      
      <categories>
          
          <category> 前后端分离web系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用小工具 </tag>
            
            <tag> SpringBoot+vue </tag>
            
            <tag> 前后端分离 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统4-表单验证及正则表达式</title>
      <link href="/2022/102916109.html"/>
      <url>/2022/102916109.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="一、表单验证代码"><a href="#一、表单验证代码" class="headerlink" title="一、表单验证代码"></a>一、表单验证代码</h3><h5 id="1-、前端代码"><a href="#1-、前端代码" class="headerlink" title="(1)、前端代码"></a>(1)、前端代码</h5><p><img src="/2022/102916109/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81html%E4%BB%A3%E7%A0%81.png" alt></p><h5 id="2-、前端逻辑代码"><a href="#2-、前端逻辑代码" class="headerlink" title="(2)、前端逻辑代码"></a>(2)、前端逻辑代码</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">"../../utils/request"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"addAdmin"</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//////////////////////////////////// 自定义表单校验规则 //////////////////////////////////</span>        <span class="token keyword">const</span> <span class="token function-variable function">checkAge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'年龄不能为空'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 验证是数字</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入数字值'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 验证是合理的范围</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">120</span> <span class="token operator">||</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入合理的年龄范围'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token function-variable function">checkPhone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1][3,4,5,6,7,8,9][0-9]&#123;9&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入正确的手机号'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//////////////////////////////////// 自定义表单校验规则 //////////////////////////////////</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">addAdminForm</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token string">''</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">addAdminRules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 与表单的prop属性相对应</span>                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span><span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">'请输入姓名'</span><span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span><span class="token string">'blur'</span><span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span> <span class="token literal-property property">validator</span><span class="token operator">:</span> checkAge<span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">phone</span><span class="token operator">:</span><span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span> <span class="token literal-property property">validator</span><span class="token operator">:</span> checkPhone<span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span><span class="token string">'addUserRef'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">valid</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                request<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/admin/save"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>addAdminForm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'200'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>$notify<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'添加成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>addAdminForm <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>$notify<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><a href="https://element.eleme.cn/#/zh-CN/component/form">官网案例</a></p><h3 id="二、相关的正则表达式"><a href="#二、相关的正则表达式" class="headerlink" title="二、相关的正则表达式"></a>二、相关的正则表达式</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript">语法：<span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//:在js中表示一个正则表达式  var regExp =/......./</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token operator">:</span>匹配字符串的开头位置    <span class="token literal-property property">$</span><span class="token operator">:</span>匹配字符串的结束位置<span class="token number">3</span>）<span class="token punctuation">[</span><span class="token punctuation">]</span> 匹配指定字符串中的以为字符<span class="token number">4</span>）<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> 匹配字数   例：<span class="token punctuation">&#123;</span>m，n<span class="token punctuation">&#125;</span>  匹配<span class="token constant">M</span>到n次<span class="token number">5</span>）特殊符号：\d  匹配一位数字，相当于<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\<span class="token constant">D</span> 匹配以为非数字\w 匹配所有的字符，包括数字 字母 下划线\<span class="token constant">W</span> 匹配费字符  ，处理字母 数字 下划线之外的字符<span class="token operator">*</span> 匹配<span class="token number">0</span>次或者多次  相当于<span class="token punctuation">[</span><span class="token number">0</span>，<span class="token punctuation">]</span><span class="token operator">+</span> 匹配<span class="token number">1</span>次或者多次 相当于<span class="token punctuation">[</span><span class="token number">1</span>，<span class="token punctuation">]</span>？ 匹配<span class="token number">0</span>次或者<span class="token number">1</span>次，相当于<span class="token punctuation">[</span><span class="token number">0</span>，<span class="token number">1</span><span class="token punctuation">]</span><span class="token number">1.</span> 数字：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span>$ <span class="token number">2.</span> n位的数字：<span class="token operator">^</span>\d<span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span>$ <span class="token number">3.</span> 至少n位的数字：<span class="token operator">^</span>\d<span class="token punctuation">&#123;</span>n<span class="token punctuation">,</span><span class="token punctuation">&#125;</span>$ <span class="token number">4.</span> m<span class="token operator">-</span>n位的数字：<span class="token operator">^</span>\d<span class="token punctuation">&#123;</span>m<span class="token punctuation">,</span>n<span class="token punctuation">&#125;</span>$ <span class="token number">5.</span> 零和非零开头的数字：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span>$ <span class="token number">6.</span> 非零开头的最多带两位小数的数字：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">7.</span> 带<span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span>位小数的正数或负数：<span class="token operator">^</span><span class="token punctuation">(</span>\<span class="token operator">-</span><span class="token punctuation">)</span><span class="token operator">?</span>\d<span class="token operator">+</span><span class="token punctuation">(</span>\<span class="token punctuation">.</span>\d<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">8.</span> 正数、负数、和小数：<span class="token operator">^</span><span class="token punctuation">(</span>\<span class="token operator">-</span><span class="token operator">|</span>\<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span>\d<span class="token operator">+</span><span class="token punctuation">(</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">9.</span> 有两位小数的正实数：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">10.</span> 有<span class="token number">1</span><span class="token operator">~</span><span class="token number">3</span>位小数的正实数：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">11.</span> 非零的正整数：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>$ 或 <span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span>$ 或 <span class="token operator">^</span>\<span class="token operator">+</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span>$ <span class="token number">12.</span> 非零的负整数：<span class="token operator">^</span>\<span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>"<span class="token operator">*</span>$ 或 <span class="token operator">^</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>$<span class="token number">13.</span> 非负整数：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">)</span>$<span class="token number">14.</span> 非正整数：<span class="token operator">^</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token operator">|</span>0$ 或 <span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span class="token number">15.</span> 非负浮点数：<span class="token operator">^</span>\d<span class="token operator">+</span><span class="token punctuation">(</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span>$ 或 <span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span>\<span class="token number">.0</span><span class="token operator">+</span><span class="token operator">|</span>0$<span class="token number">16.</span> 非正浮点数：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>\d<span class="token operator">+</span><span class="token punctuation">(</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">+</span><span class="token punctuation">(</span>\<span class="token number">.0</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$ 或 <span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span>\<span class="token number">.0</span><span class="token operator">+</span><span class="token operator">|</span>0$<span class="token number">17.</span> 正浮点数：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>$ 或 <span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>\<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span class="token number">18.</span> 负浮点数：<span class="token operator">^</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token punctuation">)</span>$ 或 <span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>\<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span class="token number">19.</span> 浮点数：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token operator">?</span>\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">(</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span>$ 或 <span class="token operator">^</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span>\<span class="token number">.0</span><span class="token operator">+</span><span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">)</span>$二、校验字符的表达式 <span class="token number">1.</span> 汉字：<span class="token operator">^</span><span class="token punctuation">[</span>\u4e00<span class="token operator">-</span>\u9fa5<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>$<span class="token number">2.</span> 英文和数字：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span>Za<span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>$ 或 <span class="token operator">^</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span>Za<span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">&#125;</span>$<span class="token number">3.</span> 长度为<span class="token number">3</span><span class="token operator">-</span><span class="token number">20</span>的所有字符：<span class="token operator">^</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">&#125;</span>$<span class="token number">4.</span> 由<span class="token number">26</span>个英文字母组成的字符串：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span>Za<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token number">5.</span> 由<span class="token number">26</span>个大写英文字母组成的字符串：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token number">6.</span> 由<span class="token number">26</span>个小写英文字母组成的字符串：<span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token number">7.</span> 由数字和<span class="token number">26</span>个英文字母组成的字符串：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span>Za<span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token number">8.</span> 由数字、<span class="token number">26</span>个英文字母或者下划线组成的字符串：<span class="token operator">^</span>\w<span class="token operator">+</span>$ 或 <span class="token operator">^</span>\w<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">&#125;</span>$<span class="token number">9.</span> 中文、英文、数字包括下划线：<span class="token operator">^</span><span class="token punctuation">[</span>\u4E00<span class="token operator">-</span>\u9FA5A<span class="token operator">-</span>Za<span class="token operator">-</span>z0<span class="token operator">-</span>9_<span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token number">10.</span> 中文、英文、数字但不包括下划线等符号：<span class="token operator">^</span><span class="token punctuation">[</span>\u4E00<span class="token operator">-</span>\u9FA5A<span class="token operator">-</span>Za<span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>$ 或 <span class="token operator">^</span><span class="token punctuation">[</span>\u4E00<span class="token operator">-</span>\u9FA5A<span class="token operator">-</span>Za<span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">&#125;</span>$<span class="token number">11.</span> 可以输入含有<span class="token operator">^</span><span class="token operator">%</span><span class="token operator">&amp;</span><span class="token string">',;=?$\"等字符：[^%&amp;'</span><span class="token punctuation">,</span><span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">?</span>$\x22<span class="token punctuation">]</span><span class="token operator">+</span> <span class="token number">12</span> 禁止输入含有<span class="token operator">~</span>的字符：<span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">~</span>\x22<span class="token punctuation">]</span><span class="token operator">+</span>三、特殊需求表达式<span class="token number">1.</span> Email地址：<span class="token operator">^</span>\w<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">]</span>\w<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span>@\w<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">]</span>\w<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span>\<span class="token punctuation">.</span>\w<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">]</span>\w<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span>$<span class="token number">2.</span> 域名：<span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token operator">?</span><span class="token number">3.</span> InternetURL：<span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">^</span>\s<span class="token punctuation">]</span><span class="token operator">*</span> 或 <span class="token operator">^</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span>\<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">[</span>\w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">[</span>\w<span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token operator">?</span><span class="token operator">%</span><span class="token operator">&amp;=</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">?</span>$<span class="token number">4.</span> 手机号码：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">14</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">|</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">15</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">|</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">5</span><span class="token operator">|</span><span class="token number">6</span><span class="token operator">|</span><span class="token number">7</span><span class="token operator">|</span><span class="token number">8</span><span class="token operator">|</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">18</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">|</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">5</span><span class="token operator">|</span><span class="token number">6</span><span class="token operator">|</span><span class="token number">7</span><span class="token operator">|</span><span class="token number">8</span><span class="token operator">|</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\d<span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">&#125;</span>$<span class="token number">5.</span> <span class="token function">电话号码</span><span class="token punctuation">(</span><span class="token string">"XXX-XXXXXXX"</span>、<span class="token string">"XXXX-XXXXXXXX"</span>、<span class="token string">"XXX-XXXXXXX"</span>、<span class="token string">"XXX-XXXXXXXX"</span>、<span class="token string">"XXXXXXX"</span>和"<span class="token constant">XXXXXXXX</span><span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">(</span>\<span class="token punctuation">(</span>\d<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token operator">-</span><span class="token punctuation">)</span><span class="token operator">|</span>\d<span class="token punctuation">&#123;</span><span class="token number">3.4</span><span class="token punctuation">&#125;</span><span class="token operator">-</span><span class="token punctuation">)</span><span class="token operator">?</span>\d<span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">&#125;</span>$ <span class="token number">6.</span> <span class="token function">国内电话号码</span><span class="token punctuation">(</span><span class="token number">0511</span><span class="token operator">-</span><span class="token number">4405222</span>、<span class="token number">021</span><span class="token operator">-</span><span class="token number">87888822</span><span class="token punctuation">)</span>：\d<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token operator">-</span>\d<span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token operator">|</span>\d<span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token operator">-</span>\d<span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token number">7.</span> <span class="token function">身份证号</span><span class="token punctuation">(</span><span class="token number">15</span>位、<span class="token number">18</span>位数字<span class="token punctuation">)</span>：<span class="token operator">^</span>\d<span class="token punctuation">&#123;</span><span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token operator">|</span>\d<span class="token punctuation">&#123;</span><span class="token number">18</span><span class="token punctuation">&#125;</span>$<span class="token number">8.</span> <span class="token function">短身份证号码</span><span class="token punctuation">(</span>数字、字母x结尾<span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>x<span class="token operator">|</span><span class="token constant">X</span><span class="token punctuation">)</span><span class="token operator">?</span>$ 或 <span class="token operator">^</span>\d<span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9x<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9X<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token operator">?</span>$<span class="token number">9.</span> <span class="token function">帐号是否合法</span><span class="token punctuation">(</span>字母开头，允许<span class="token number">5</span><span class="token operator">-</span><span class="token number">16</span>字节，允许字母数字下划线<span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z0</span><span class="token operator">-</span>9_<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">&#125;</span>$<span class="token number">10.</span> <span class="token function">密码</span><span class="token punctuation">(</span>以字母开头，长度在<span class="token number">6</span><span class="token operator">~</span><span class="token number">18</span>之间，只能包含字母、数字和下划线<span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span>\w<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">&#125;</span>$<span class="token number">11.</span> <span class="token function">强密码</span><span class="token punctuation">(</span>必须包含大小写字母和数字的组合，不能使用特殊字符，长度在<span class="token number">8</span><span class="token operator">-</span><span class="token number">10</span>之间<span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">*</span>\d<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span>$<span class="token number">12.</span> 日期格式：<span class="token operator">^</span>\d<span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token operator">-</span>\d<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">-</span>\d<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token number">13.</span> <span class="token function">一年的12个月</span><span class="token punctuation">(</span><span class="token number">01</span>～<span class="token number">09</span>和<span class="token number">1</span>～<span class="token number">12</span><span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>$<span class="token number">14.</span> <span class="token function">一个月的31天</span><span class="token punctuation">(</span><span class="token number">01</span>～<span class="token number">09</span>和<span class="token number">1</span>～<span class="token number">31</span><span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">30</span><span class="token operator">|</span><span class="token number">31</span><span class="token punctuation">)</span>$<span class="token number">15.</span> 钱的输入格式：<span class="token number">16.</span> <span class="token number">1.</span><span class="token literal-property property">有四种钱的表示形式我们可以接受</span><span class="token operator">:</span><span class="token string">"10000.00"</span> 和 <span class="token string">"10,000.00"</span><span class="token punctuation">,</span> 和没有 <span class="token string">"分"</span> 的 <span class="token string">"10000"</span> 和 <span class="token string">"10,000"</span>：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span>$ <span class="token number">17.</span> <span class="token number">2.</span>这表示任意一个不以<span class="token number">0</span>开头的数字<span class="token punctuation">,</span>但是<span class="token punctuation">,</span>这也意味着一个字符<span class="token string">"0"</span>不通过<span class="token punctuation">,</span>所以我们采用下面的形式：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span>$ <span class="token number">18.</span> <span class="token number">3.</span>一个<span class="token number">0</span>或者一个不以<span class="token number">0</span>开头的数字<span class="token punctuation">.</span>我们还可以允许开头有一个负号：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span>$ <span class="token number">19.</span> <span class="token number">4.</span>这表示一个<span class="token number">0</span>或者一个可能为负的开头不为<span class="token number">0</span>的数字<span class="token punctuation">.</span>让用户以<span class="token number">0</span>开头好了<span class="token punctuation">.</span>把负号的也去掉<span class="token punctuation">,</span>因为钱总不能是负的吧<span class="token punctuation">.</span>下面我们要加的是说明可能的小数部分：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">20.</span> <span class="token number">5.</span>必须说明的是<span class="token punctuation">,</span>小数点后面至少应该有<span class="token number">1</span>位数<span class="token punctuation">,</span>所以<span class="token string">"10."</span>是不通过的<span class="token punctuation">,</span>但是 <span class="token string">"10"</span> 和 <span class="token string">"10.2"</span> 是通过的：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">21.</span> <span class="token number">6.</span>这样我们规定小数点后面必须有两位<span class="token punctuation">,</span>如果你认为太苛刻了<span class="token punctuation">,</span>可以这样：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">22.</span> <span class="token number">7.</span>这样就允许用户只写一位小数<span class="token punctuation">.</span>下面我们该考虑数字中的逗号了<span class="token punctuation">,</span>我们可以这样：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">23</span> <span class="token number">8.1</span>到<span class="token number">3</span>个数字<span class="token punctuation">,</span>后面跟着任意个 逗号<span class="token operator">+</span><span class="token number">3</span>个数字<span class="token punctuation">,</span>逗号成为可选<span class="token punctuation">,</span>而不是必须：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">24.</span> 备注：这就是最终结果了<span class="token punctuation">,</span>别忘了<span class="token string">"+"</span>可以用<span class="token string">"*"</span><span class="token function">替代如果你觉得空字符串也可以接受的话</span><span class="token punctuation">(</span>奇怪<span class="token punctuation">,</span>为什么<span class="token operator">?</span><span class="token punctuation">)</span>最后<span class="token punctuation">,</span>别忘了在用函数时去掉去掉那个反斜杠<span class="token punctuation">,</span>一般的错误都在这里 <span class="token number">25.</span> xml文件：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>\\<span class="token punctuation">.</span><span class="token punctuation">[</span>x<span class="token operator">|</span><span class="token constant">X</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">|</span><span class="token constant">M</span><span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token operator">|</span><span class="token constant">L</span><span class="token punctuation">]</span>$ <span class="token number">26.</span> 中文字符的正则表达式：<span class="token punctuation">[</span>\u4e00<span class="token operator">-</span>\u9fa5<span class="token punctuation">]</span> <span class="token number">27.</span> 双字节字符：<span class="token punctuation">[</span><span class="token operator">^</span>\x00<span class="token operator">-</span>\xff<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token function">包括汉字在内，可以用来计算字符串的长度</span><span class="token punctuation">(</span>一个双字节字符长度计<span class="token number">2</span>，<span class="token constant">ASCII</span>字符计<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">28.</span> 空白行的正则表达式：\n\s<span class="token operator">*</span>\<span class="token function">r</span> <span class="token punctuation">(</span>可以用来删除空白行<span class="token punctuation">)</span> <span class="token number">29.</span> <span class="token constant">HTML</span>标记的正则表达式：<span class="token operator">&lt;</span><span class="token punctuation">(</span>\<span class="token constant">S</span><span class="token operator">*</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">/</span>\<span class="token number">1</span><span class="token operator">></span><span class="token operator">|</span><span class="token operator">&lt;</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">(</span>网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力<span class="token punctuation">)</span> <span class="token number">30.</span> 首尾空白字符的正则表达式：<span class="token operator">^</span>\s<span class="token operator">*</span><span class="token operator">|</span>\s<span class="token operator">*</span><span class="token function">$或</span><span class="token punctuation">(</span><span class="token operator">^</span>\s<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>\s<span class="token operator">*</span>$<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">可以用来删除行首行尾的空白字符</span><span class="token punctuation">(</span>包括空格、制表符、换页符等等<span class="token punctuation">)</span>，非常有用的表达式<span class="token punctuation">)</span> <span class="token number">31.</span> 腾讯<span class="token constant">QQ</span>号：<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token punctuation">(</span>腾讯<span class="token constant">QQ</span>号从<span class="token number">10000</span>开始<span class="token punctuation">)</span> <span class="token number">32.</span> 中国邮政编码：<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">!</span>\d<span class="token punctuation">)</span> <span class="token punctuation">(</span>中国邮政编码为<span class="token number">6</span>位数字<span class="token punctuation">)</span> <span class="token number">33.</span> <span class="token constant">IP</span>地址：\d<span class="token operator">+</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span> <span class="token punctuation">(</span>提取<span class="token constant">IP</span>地址时有用<span class="token punctuation">)</span> <span class="token number">34.</span> <span class="token constant">IP</span><span class="token function">地址：</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>\\d<span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">01</span><span class="token punctuation">]</span><span class="token operator">?</span>\\d<span class="token operator">?</span>\\d<span class="token punctuation">)</span>\\<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>\\d<span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">01</span><span class="token punctuation">]</span><span class="token operator">?</span>\\d<span class="token operator">?</span>\\d<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><a href="https://www.runoob.com/regexp/regexp-syntax.html">正则表达式语法</a></p></font>]]></content>
      
      
      <categories>
          
          <category> 前后端分离web系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用小工具 </tag>
            
            <tag> SpringBoot+vue </tag>
            
            <tag> 前后端分离 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统3-实现分页查询的功能</title>
      <link href="/2022/102816108.html"/>
      <url>/2022/102816108.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="一、后端完成相关的配置"><a href="#一、后端完成相关的配置" class="headerlink" title="一、后端完成相关的配置"></a>一、后端完成相关的配置</h3><h5 id="1-、安装pageHelper的依赖"><a href="#1-、安装pageHelper的依赖" class="headerlink" title="(1)、安装pageHelper的依赖"></a>(1)、安装pageHelper的依赖</h5><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/102816108/pageHelper%E4%BE%9D%E8%B5%96.png" alt></p><h5 id="2-、相关代码"><a href="#2-、相关代码" class="headerlink" title="(2)、相关代码"></a>(2)、相关代码</h5><p>UserController:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 编写分页查询的功能</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/page"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token class-name">UserPage</span><span class="token punctuation">(</span><span class="token class-name">UserPageRequest</span> userPageRequest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">getUserPage</span><span class="token punctuation">(</span>userPageRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>UserService:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUsersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 分页查询user</span>    <span class="token class-name">Object</span> <span class="token function">getUserPage</span><span class="token punctuation">(</span><span class="token class-name">UserPageRequest</span> userPageRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>UserServiceImpl:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUsersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name"><span class="token namespace">userMapper<span class="token punctuation">.</span></span>UsersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 分页查询以及条件查询</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getUserPage</span><span class="token punctuation">(</span><span class="token class-name">UserPageRequest</span> userPageRequest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 再将参数进行传递到mapper当中进行模糊查询 重点！！！！！！！！！！！！！！！！！！！！！</span>        <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>userPageRequest<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userPageRequest<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectUserByCondition</span><span class="token punctuation">(</span>userPageRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>UserMapper:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span><span class="token comment">//    @Select("select * from user")</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token class-name">UsersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 通过参数进行条件查询：并且返回分页的效果</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">selectUserByCondition</span><span class="token punctuation">(</span><span class="token class-name">UserPageRequest</span> userPageRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>User.xml:</p><p><img src="/2022/102816108/%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2xml.png" alt></p><h3 id="二、前端代码"><a href="#二、前端代码" class="headerlink" title="二、前端代码"></a>二、前端代码</h3><h5 id="1-、分页插件的代码"><a href="#1-、分页插件的代码" class="headerlink" title="(1)、分页插件的代码"></a>(1)、分页插件的代码</h5><p><img src="/2022/102816108/%E5%89%8D%E7%AB%AF%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6.png" alt></p><h5 id="2-、处理变化函数的代码"><a href="#2-、处理变化函数的代码" class="headerlink" title="(2)、处理变化函数的代码"></a>(2)、处理变化函数的代码</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// fetch("http://localhost:9090/user/list").then(res => res.json()).then(res => &#123;</span>    <span class="token comment">//   console.log(res);</span>    <span class="token comment">//   this.tableData = res;</span>    <span class="token comment">// &#125;)</span>    request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/page"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>params        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'200'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>list<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>total <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>total<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 重置函数：将各种参数置为初始值后重新加载</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token literal-property property">pageNum</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 分页条件的监视函数</span><span class="token function">handleSizeChange</span><span class="token punctuation">(</span><span class="token parameter">pageSize</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// console.log("多少条每页发生变化");</span>    <span class="token comment">// console.log(pageSize);</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>params<span class="token punctuation">.</span>pageSize <span class="token operator">=</span> pageSize<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">handleCurrentChange</span><span class="token punctuation">(</span><span class="token parameter">pageNum</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// console.log("前往第几页发生变化");</span>    <span class="token comment">// console.log(pageNum);</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>params<span class="token punctuation">.</span>pageNum <span class="token operator">=</span> pageNum<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/102816108/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C.png" alt></p><p><a href="https://www.bilibili.com/video/BV12Y4y1N7Sw/?p=4&spm_id_from=pageDriver&vd_source=0f50d0008f8b836aa3258f634d65d48e">视频教程</a></p></font>]]></content>
      
      
      <categories>
          
          <category> 前后端分离web系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot+vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统2-创建springboot后端项目</title>
      <link href="/2022/102816107.html"/>
      <url>/2022/102816107.html</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="一、创建springboot后端项目"><a href="#一、创建springboot后端项目" class="headerlink" title="一、创建springboot后端项目"></a>一、创建springboot后端项目</h3><p>根据springboot官网或idea创建springboot项目，这不有手就行&#x1F605;</p><h3 id="二、完成相关的配置"><a href="#二、完成相关的配置" class="headerlink" title="二、完成相关的配置"></a>二、完成相关的配置</h3><h5 id="1-、添加相关的依赖项，这里做一个总结（偷懒，以后直接来用就行了"><a href="#1-、添加相关的依赖项，这里做一个总结（偷懒，以后直接来用就行了" class="headerlink" title="(1)、添加相关的依赖项，这里做一个总结（偷懒，以后直接来用就行了"></a>(1)、添加相关的依赖项，这里做一个总结（偷懒，以后直接来用就行了</h5><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--mysql驱动--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- log4j日志 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- lombok --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h5 id="2-、springboot要运行起来，需要完成数据库的配置"><a href="#2-、springboot要运行起来，需要完成数据库的配置" class="headerlink" title="(2)、springboot要运行起来，需要完成数据库的配置"></a>(2)、springboot要运行起来，需要完成数据库的配置</h5><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9090</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/library<span class="token punctuation">-</span>managment    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"0613"</span></code></pre><pre class="language-protityes" data-language="protityes"><code class="language-protityes">server.port&#x3D;8080</code></pre><h3 id="三、完成springboot查出数据库当中的数据"><a href="#三、完成springboot查出数据库当中的数据" class="headerlink" title="三、完成springboot查出数据库当中的数据"></a>三、完成springboot查出数据库当中的数据</h3><h5 id="1-、后端代码结构"><a href="#1-、后端代码结构" class="headerlink" title="(1)、后端代码结构"></a>(1)、后端代码结构</h5><p><img src="/2022/102816107/%E5%90%8E%E7%AB%AF%E7%BB%93%E6%9E%84.png" alt></p><h5 id="2-、数据库表结构及内容"><a href="#2-、数据库表结构及内容" class="headerlink" title="(2)、数据库表结构及内容"></a>(2)、数据库表结构及内容</h5><p><img src="/2022/102816107/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84.png" alt></p><h5 id="3-、springboot相关代码"><a href="#3-、springboot相关代码" class="headerlink" title="(3)、springboot相关代码"></a>(3)、springboot相关代码</h5><p>User实体类代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>UserController代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">IUserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUsersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>UserService代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUsersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>UserServiceImpl</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUsersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name"><span class="token namespace">userMapper<span class="token punctuation">.</span></span>UsersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="4-、启动项目，在http-localhost-9090-user-list"><a href="#4-、启动项目，在http-localhost-9090-user-list" class="headerlink" title="(4)、启动项目，在http://localhost:9090/user/list"></a>(4)、启动项目，在<a href="http://localhost:9090/user/list">http://localhost:9090/user/list</a></h5><p>在浏览器中即可看到如下内容：<br><img src="/2022/102816107/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C.png" alt></p><h5 id="5-、前端使用fetch完成数据的转化"><a href="#5-、前端使用fetch完成数据的转化" class="headerlink" title="(5)、前端使用fetch完成数据的转化"></a>(5)、前端使用fetch完成数据的转化</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:9090/user/list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> res<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>前端效果如图:<br><img src="/2022/102816107/%E5%89%8D%E7%AB%AF%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt></p><h5 id="6-、使用mybatis：-https-mybatis-net-cn"><a href="#6-、使用mybatis：-https-mybatis-net-cn" class="headerlink" title="(6)、使用mybatis： https://mybatis.net.cn/"></a>(6)、使用mybatis： <a href="https://mybatis.net.cn/">https://mybatis.net.cn/</a></h5><p>在resources目录下创建一个mapper的目录，创建User.xml，编写SQL语句</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bin.library_back.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UsersList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bin.library_back.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>其次在配置文件当中编写mybatis的配置</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 定义mapper的路径</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span></code></pre><p>完成上述相同的测试效果</p><h5 id="7-、统一返回结果Result-java"><a href="#7-、统一返回结果Result-java" class="headerlink" title="(7)、统一返回结果Result.java"></a>(7)、统一返回结果Result.java</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SUCCESS_CODE</span> <span class="token operator">=</span> <span class="token string">"200"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ERROR_CODE</span> <span class="token operator">=</span> <span class="token string">"-1"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token comment">// 返回成功或者失败的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token constant">SUCCESS_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token constant">SUCCESS_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token constant">ERROR_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="8-、解决跨域问题（最简单：在Controller的方法上加上-CrossOrigin的注解）"><a href="#8-、解决跨域问题（最简单：在Controller的方法上加上-CrossOrigin的注解）" class="headerlink" title="(8)、解决跨域问题（最简单：在Controller的方法上加上@CrossOrigin的注解）"></a>(8)、解决跨域问题（最简单：在Controller的方法上加上@CrossOrigin的注解）</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CrossOrigin</span></code></pre><h3 id="四、完成前后端对接"><a href="#四、完成前后端对接" class="headerlink" title="四、完成前后端对接"></a>四、完成前后端对接</h3><p>前端项目当中编写一个utils方法：request.js</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"@/router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Cookies <span class="token keyword">from</span> <span class="token string">'js-cookie'</span><span class="token keyword">const</span> request <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">'http://localhost:9090'</span><span class="token punctuation">,</span>    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// request 拦截器</span><span class="token comment">// 可以自请求发送前对请求做一些处理</span><span class="token comment">// 比如统一加token，对请求参数统一加密</span>request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/json;charset=utf-8'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> adminJson <span class="token operator">=</span> Cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>adminJson<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 设置请求头</span>        config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>adminJson<span class="token punctuation">)</span><span class="token punctuation">.</span>token    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> config<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// response 拦截器</span><span class="token comment">// 可以在接口响应后统一处理结果</span>request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token comment">// 兼容服务端返回的字符串数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res <span class="token operator">=</span> res <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">:</span> res        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'401'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err'</span> <span class="token operator">+</span> error<span class="token punctuation">)</span> <span class="token comment">// for debug</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> request</code></pre><p>在vue代码当中完成请求后端的接口</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">"../utils/request"</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/page"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>params    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'200'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>list<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>total <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>total<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前后端分离web系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot+vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统1-创建Vue前端项目</title>
      <link href="/2022/102716107.html"/>
      <url>/2022/102716107.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="一、创建Vue项目及安装依赖项"><a href="#一、创建Vue项目及安装依赖项" class="headerlink" title="一、创建Vue项目及安装依赖项"></a>一、创建Vue项目及安装依赖项</h3><p>(1)、使用下列命令安装/更新Vue-cli</p><pre class="language-base" data-language="base"><code class="language-base">npm install -g @vue&#x2F;cli# ORyarn global add @vue&#x2F;cli</code></pre><p><a href="https://cli.vuejs.org/zh/guide/installation.html">vue-vli学习网站</a></p><p>(2)、使用下列命令安装Vue框架内容</p><pre class="language-base" data-language="base"><code class="language-base">vue create [项目名]</code></pre><p>(3)、使用命令访问创建的项目内容</p><pre class="language-base" data-language="base"><code class="language-base">vue run dev&#x2F;serve</code></pre><p>(4)、前端项目当中使用Element-ui<br>官网：<a href="https://element.eleme.cn/#/zh-CN/guide/design">https://element.eleme.cn/#/zh-CN/guide/design</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i element-ui <span class="token parameter variable">-S</span></code></pre><p>在vue前端项目当中使用</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="二、几个小技巧"><a href="#二、几个小技巧" class="headerlink" title="二、几个小技巧"></a>二、几个小技巧</h3><p>(1)、通常情况下，原始的界面都会出现页面一小部分留白，我们可以编辑全局样式进行控制<br>a、在assets目录下创建global.css<br>b、在main.js当中进行引入：import “@/assets/global.css”</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">*</span> <span class="token punctuation">&#123;</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span> //消除掉盒子模型的内边距，通常是有一个像素的大小<span class="token punctuation">&#125;</span></code></pre><p>(2)、在IDEA编译器当中Add Configurations当中选择npm，找到执行的package.json文件，使用npm run serve命令</p><p><img src="/2022/102716107/IDEA%E4%BD%BF%E7%94%A8npm%E8%BF%90%E8%A1%8C%E7%AA%97%E5%8F%A3.png" alt></p><p>(3)、更新相关的系统icon<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;阿里巴巴icon图标库： <a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p><p>(4)、系统的框架的搭建<br>通常情况下，系统的页面都是分为[头部栏][左侧导航栏][中间主体部分]三个部分，我们就这三部分进行系统页面的划分<br>在创建好的vue前端项目当中，在app.vue文件当中完成三个部分的划分</p><p>a)、头部区域</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--头部区域--></span><span class="token comment">&lt;!--    其中将整个头部区域设置height: 60px; line-height: 60px; 是确定内部的元素都是居中对齐的                        margin-bottom: 2px; 是头部与下列两部分之间存在一个2px的间隙    图片只设置宽度/高度中的一个  而不设置两个是为了不让logo失真    position: relative; 是让图片从其中脱离出来，自由定位--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span> <span class="token property">line-height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span> <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 2px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@/assets/logo.png<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 9px<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 10px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span> <span class="token property">margin-left</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>图书管理系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>b)、主体区域</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--侧边栏和主体内容--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> flex</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--侧边栏导航位置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span> <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100vh - 62px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> <span class="token property">margin-right</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> white</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu</span> <span class="token attr-name">:default-active</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$route.path<span class="token punctuation">"</span></span> <span class="token attr-name">router</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-menu-demo<span class="token punctuation">"</span></span>  <span class="token attr-name">@select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSelect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-s-home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-question<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>关于<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>关于页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2-4-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2-4-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2-4-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--主体数据区域--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> white</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    style="display: flex":                  确保下面的两个div是并排出现的 使用flex布局    min-height: calc(100vh - 62px):         将下面的主题区域撑满，并且要减去头部的大小(60 + 2)    index="/":                              在导航栏当中，index表示的就是跳转的路径，可以对应到router.js当中的path    &lt;router-view/>:                         切换过程当中页面切换的部分，一个代替的部分，只需要放到主题数据区域即可--></span></code></pre><p>(5)、将elementUI中的各类组件的大小进行配置</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token string">'mini'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 配置elementui的样式大小 medium small mini</span></code></pre></font>]]></content>
      
      
      <categories>
          
          <category> 前后端分离web系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot+vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 搭建个人博客</title>
      <link href="/2022/102516107.html"/>
      <url>/2022/102516107.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="如你所见，您现在正在浏览的就是我使用Hexo框架搭建的个人博客"><a href="#如你所见，您现在正在浏览的就是我使用Hexo框架搭建的个人博客" class="headerlink" title="如你所见，您现在正在浏览的就是我使用Hexo框架搭建的个人博客"></a>如你所见，您现在正在浏览的就是我使用Hexo框架搭建的个人博客</h2><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><blockquote><p>在安装之前，你的电脑上应该已经安装了以下内容：</p><ul><li>Git: 也可使用本机cmd命令窗口完成</li><li>node.js: Hexo框架运行的</li></ul></blockquote><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装Git</h3><p>你不会跟我说你没装Git吧<del>~</del></p><p>More info: <a href="https://blog.csdn.net/mukes/article/details/115693833?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166687136816782412530437%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166687136816782412530437&biz_id=0&spm=1018.2226.3001.4187">安装教程</a></p><h3 id="2、安装Node-js"><a href="#2、安装Node-js" class="headerlink" title="2、安装Node.js"></a>2、安装Node.js</h3><p>你不会跟我说你没装Node吧<del>~</del></p><p>More info: <a href="https://blog.csdn.net/weixin_44893902/article/details/121788104?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166686140416782395362937%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166686140416782395362937&biz_id=0&spm=1018.2226.3001.4187">安装教程</a></p><h3 id="3、本地安装Hexo"><a href="#3、本地安装Hexo" class="headerlink" title="3、本地安装Hexo"></a>3、本地安装Hexo</h3><p>在安装完成Git和NodeJS之后，接下来就是本地下载Hexo，首先在本地创建一个Blog(名字任取)的文件夹，打开这个文件夹，鼠标右键使用git bash。</p><p>(1)使用命令安装Hexo</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli</code></pre><p>(2)使用命令查看Hexo的版本信息</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo <span class="token parameter variable">-v</span></code></pre><p>(3)安装完毕之后进行初始化，完成对自己博客项目的创建</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo init</code></pre><p>在安装完成的目录下，会存在以下目录：</p><blockquote><ul><li>node_modules: 依赖包</li><li>public: 存放生成的页面</li><li>scaffolds: 生成文章的一些模板</li><li>source: 用来你的文章</li><li>themes: 下载保存自己的主题，本主题<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a></li><li>_config.yml: 重点配置文件</li></ul></blockquote><p>(4)使用命令生成创建的页面</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo g</code></pre><p>(5)本地运行你的博客项目</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo s</code></pre><p>运行成功后，你会看到如下提示</p><pre class="language-bash" data-language="bash"><code class="language-bash">Hexo is running at http://localhost:4000/ <span class="token builtin class-name">.</span> Press Ctrl+C to stop. </code></pre><p>然后访问日志中的地址：localhost:4000</p><p>恭喜你，你的第一个博客系统搭建成功！</p><h3 id="4、GitHub创建个人仓库"><a href="#4、GitHub创建个人仓库" class="headerlink" title="4、GitHub创建个人仓库"></a>4、GitHub创建个人仓库</h3><p>首先在Github上注册自己的账号，注册完成之后，完善各项账号的信息。<br>然后New Repository 命令为你为：[Github名].github.io<br>例如：我的github名称为Binbin0613, 我的博客仓库名为：Binbin0613.github.io (可以参考<a href="https://github.com/Binbin0613/Binbin0613.github.io">我的仓库</a>)</p><h3 id="5、将本地的Hexo部署上GitHub上"><a href="#5、将本地的Hexo部署上GitHub上" class="headerlink" title="5、将本地的Hexo部署上GitHub上"></a>5、将本地的Hexo部署上GitHub上</h3><p>在你完成Hexo初始化的地方(同第三步的位置)，输入命令，完成代码的上传</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo d</code></pre><p>执行到这一步之后，浏览器输入: [Github名].github.io 即可看到你的博客网站了</p><h3 id="6、发布文章"><a href="#6、发布文章" class="headerlink" title="6、发布文章"></a>6、发布文章</h3><p>至此你的博客项目就搭建好了，那么想要发布文章就需要接下来的几步了！</p><p>(1)、在： [:\BlogName\source_posts] 目录下创建自己想要发布文章的文件(所有的文章发布都是以markDown格式发布的)<br>你可以看到的是已经有一个名为Hello World.md的文件</p><p>(2)、文章中需要插入图片的话，首先找到_config.yml文件。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 原来是false，将其设置为true</span></code></pre><p>与此同时，在[:\BlogName\source_posts] 目录下创建与文章同名的文件夹，然后将图片放入，若要在文章中引入，则直接使用相对路径的方式进行访问[./文章名/XXX.png]，即可完成图片访问。</p><p>(3)、完成文章的编写后，使用下列命名进行缓存的清楚</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo clean</code></pre><p>(4)、使用下列命令完成博客的重新生成</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo g <span class="token comment"># generate</span></code></pre><p>(5)、使用下列命令完成对博客项目的本地查看</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo s <span class="token comment"># server</span></code></pre><p>(6)、使用下列命令完成对博客项目的上传(至Github仓库)</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo d <span class="token comment"># deploy</span></code></pre><h3 id="更多信息请关注"><a href="#更多信息请关注" class="headerlink" title="更多信息请关注"></a>更多信息请关注</h3><p>(1)、<a href="https://blog.csdn.net/wangqingchuan92/article/details/112277112?ops_request_misc=&request_id=&biz_id=102&spm=1018.2226.3001.4187">解决博客的enjoy问题</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <a href="https://apps.timwhitlock.info/emoji/tables/unicode#">enjoy表情包合集</a></p><p>(2)、<a href>Hexo更多的配置相关问题(开个玩笑)</a></p><p>(3)、<a href="https://www.bilibili.com/video/BV1q4411i7gL/?spm_id_from=333.788.recommend_more_video.8&vd_source=0f50d0008f8b836aa3258f634d65d48e">更全的安装视频</a></p><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p></font>]]></content>
      
      
      <categories>
          
          <category> 博客介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binbin0613 </tag>
            
            <tag> 日常 </tag>
            
            <tag> 关于博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binbin0613</title>
      <link href="/2022/102416107.html"/>
      <url>/2022/102416107.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="欢迎大家访问我的博客Binbin0613"><a href="#欢迎大家访问我的博客Binbin0613" class="headerlink" title="欢迎大家访问我的博客Binbin0613"></a><strong>欢迎大家访问我的博客<a href="Binbin0613.github.io">Binbin0613</a></strong></h2><h3 id="做一个自我介绍"><a href="#做一个自我介绍" class="headerlink" title="做一个自我介绍"></a>做一个自我介绍</h3><p>Bin，<a href="http://www.xhu.edu.cn/">XHU</a>软件工程本，<a href="https://sias.uestc.edu.cn/">UESTC</a>电子信息专硕，21岁大四在读身高170cm体重不说每天8点到23点待实验室周末无休还卡在毕设的码农一位！</p><blockquote><ul><li>爱好： 踢足球(大学基本没碰过 &#x1F605;)</li><li>学习方向： <a href="https://github.com/Binbin0613">REID</a> &nbsp; &nbsp; <a href="https://github.com/Binbin0613">Search</a> &nbsp;&nbsp; <a href="https://github.com/Binbin0613">JAVA</a> &nbsp;&nbsp; <a href="https://github.com/Binbin0613">Vue</a> &nbsp;&nbsp; <a href="https://github.com/Binbin0613">React</a></li></ul></blockquote><p><img src="/2022/102416107/avatar.jpg" alt></p><h5 id="忘记说了：-2022年阿根廷必夺冠！！！"><a href="#忘记说了：-2022年阿根廷必夺冠！！！" class="headerlink" title="忘记说了： 2022年阿根廷必夺冠！！！"></a>忘记说了： 2022年阿根廷必夺冠！！！</h5><h4 id="More-Info"><a href="#More-Info" class="headerlink" title="More Info:"></a>More Info:</h4><p>QQ：3474251879<br>WeChat: Ilovedaisysomuch<br>Email: <a href="mailto:Binbin.0626@foxmail.com">Binbin.0626@foxmail.com</a><br>Github: <a href="https://github.com/Binbin0613">https://github.com/Binbin0613</a><br>Sina: 基本上不玩，偶尔看看</p></font>]]></content>
      
      
      <categories>
          
          <category> 博客介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binbin0613 </tag>
            
            <tag> 关于博客 </tag>
            
            <tag> 实用小工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/102316107.html"/>
      <url>/2022/102316107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="/2022/102316107/avatar.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 博客介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binbin0613 </tag>
            
            <tag> 日常 </tag>
            
            <tag> 关于博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
