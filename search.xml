<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>图书管理系统6-springboot系统中三层架构的分析</title>
      <link href="/2022/103116111.html"/>
      <url>/2022/103116111.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="登录"><a class="header-anchor" href="#登录">¶</a>登录</h2><h3 id="一、"><a class="header-anchor" href="#一、">¶</a>一、</h3></font>]]></content>
      
      
      <categories>
          
          <category> 前后端分离web系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用小工具 </tag>
            
            <tag> SpringBoot+vue </tag>
            
            <tag> 前后端分离 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统5-登录系统的逻辑</title>
      <link href="/2022/103116110.html"/>
      <url>/2022/103116110.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="登录"><a class="header-anchor" href="#登录">¶</a>登录</h2><h3 id="一、"><a class="header-anchor" href="#一、">¶</a>一、</h3></font>]]></content>
      
      
      <categories>
          
          <category> 前后端分离web系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用小工具 </tag>
            
            <tag> SpringBoot+vue </tag>
            
            <tag> 前后端分离 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统4-表单验证及正则表达式</title>
      <link href="/2022/102916109.html"/>
      <url>/2022/102916109.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2><h3 id="一、表单验证代码"><a class="header-anchor" href="#一、表单验证代码">¶</a>一、表单验证代码</h3><h5 id="1-、前端代码"><a class="header-anchor" href="#1-、前端代码">¶</a>(1)、前端代码</h5><p><img src="/2022/102916109/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81html%E4%BB%A3%E7%A0%81.png" alt></p><h5 id="2-、前端逻辑代码"><a class="header-anchor" href="#2-、前端逻辑代码">¶</a>(2)、前端逻辑代码</h5><pre class=" language-language-javascript"><code class="language-language-javascript">import request from "../../utils/request";export default &#123;    name: "addAdmin",    data()&#123;        //////////////////////////////////// 自定义表单校验规则 //////////////////////////////////        const checkAge = (rule, value, callback) => &#123;            if (!value) &#123;                return callback(new Error('年龄不能为空'));            &#125;            // 验证是数字            if (!/^[0-9]*$/.test(value)) &#123;                callback(new Error('请输入数字值'));            &#125;            // 验证是合理的范围            if(parseInt(value) > 120 || parseInt(value) < 0)&#123;                callback(new Error('请输入合理的年龄范围'));            &#125;            callback();        &#125;;        const checkPhone = (rule, value, callback) => &#123;            if(!/^[1][3,4,5,6,7,8,9][0-9]&#123;9&#125;$/.test(value))&#123;                callback(new Error('请输入正确的手机号'));            &#125;            callback();        &#125;;        //////////////////////////////////// 自定义表单校验规则 //////////////////////////////////        return &#123;            addAdminForm: &#123;                username: '',                email: '',                phone: ''            &#125;,            addAdminRules: &#123;                // 与表单的prop属性相对应                name:[                    &#123;required:true, message:'请输入姓名', trigger:'blur'&#125;                ],                age:[                    &#123; validator: checkAge, trigger: 'blur' &#125;                ],                phone:[                    &#123; validator: checkPhone, trigger: 'blur' &#125;                ]            &#125;        &#125;    &#125;,    methods: &#123;        submit()&#123;            this.$refs['addUserRef'].validate((valid) => &#123;                request.post("/admin/save", this.addAdminForm).then(res => &#123;                    if(res.code === '200')&#123;                        this.$notify.success('添加成功');                        this.addAdminForm = &#123;&#125;;                    &#125;else&#123;                        this.$notify.error(res.msg)                    &#125;                &#125;)            &#125;)        &#125;    &#125;&#125;</code></pre><p><a href="https://element.eleme.cn/#/zh-CN/component/form">官网案例</a></p><h3 id="二、相关的正则表达式"><a class="header-anchor" href="#二、相关的正则表达式">¶</a>二、相关的正则表达式</h3><pre class=" language-language-javascript"><code class="language-language-javascript">语法：1) //:在js中表示一个正则表达式  var regExp =/......./2)^:匹配字符串的开头位置    $:匹配字符串的结束位置3）[] 匹配指定字符串中的以为字符4）&#123;&#125; 匹配字数   例：&#123;m，n&#125;  匹配M到n次5）特殊符号：\d  匹配一位数字，相当于[0-9]\D 匹配以为非数字\w 匹配所有的字符，包括数字 字母 下划线\W 匹配费字符  ，处理字母 数字 下划线之外的字符* 匹配0次或者多次  相当于[0，]+ 匹配1次或者多次 相当于[1，]？ 匹配0次或者1次，相当于[0，1]1. 数字：^[0-9]*$ 2. n位的数字：^\d&#123;n&#125;$ 3. 至少n位的数字：^\d&#123;n,&#125;$ 4. m-n位的数字：^\d&#123;m,n&#125;$ 5. 零和非零开头的数字：^(0|[1-9][0-9]*)$ 6. 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$ 7. 带1-2位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)?$ 8. 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$ 9. 有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$ 10. 有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$ 11. 非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\+?[1-9][0-9]*$ 12. 非零的负整数：^\-[1-9][]0-9"*$ 或 ^-[1-9]\d*$13. 非负整数：^(([1-9]\d*)|0)$14. 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$15. 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$16. 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$17. 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$18. 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$19. 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$二、校验字符的表达式 1. 汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$2. 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$3. 长度为3-20的所有字符：^.&#123;3,20&#125;$4. 由26个英文字母组成的字符串：^[A-Za-z]+$5. 由26个大写英文字母组成的字符串：^[A-Z]+$6. 由26个小写英文字母组成的字符串：^[a-z]+$7. 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$8. 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;3,20&#125;$9. 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$10. 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$11. 可以输入含有^%&',;=?$\"等字符：[^%&',;=?$\x22]+ 12 禁止输入含有~的字符：[^~\x22]+三、特殊需求表达式1. Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$2. 域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?3. InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$4. 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$5. 电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$ 6. 国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;7. 身份证号(15位、18位数字)：^\d&#123;15&#125;|\d&#123;18&#125;$8. 短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$9. 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$10. 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$11. 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$12. 日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;13. 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$14. 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$15. 钱的输入格式：16. 1.有四种钱的表示形式我们可以接受:"10000.00" 和 "10,000.00", 和没有 "分" 的 "10000" 和 "10,000"：^[1-9][0-9]*$ 17. 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符"0"不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ 18. 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ 19. 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ 20. 5.必须说明的是,小数点后面至少应该有1位数,所以"10."是不通过的,但是 "10" 和 "10.2" 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$ 21. 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$ 22. 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$ 23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$ 24. 备注：这就是最终结果了,别忘了"+"可以用"*"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里 25. xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$ 26. 中文字符的正则表达式：[\u4e00-\u9fa5] 27. 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1)) 28. 空白行的正则表达式：\n\s*\r (可以用来删除空白行) 29. HTML标记的正则表达式：<(\S*?)[^>]*>.*?</\1>|<.*? /> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力) 30. 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式) 31. 腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始) 32. 中国邮政编码：[1-9]\d&#123;5&#125;(?!\d) (中国邮政编码为6位数字) 33. IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用) 34. IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</code></pre><p><a href="https://www.runoob.com/regexp/regexp-syntax.html">正则表达式语法</a></p></font>]]></content>
      
      
      <categories>
          
          <category> 前后端分离web系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用小工具 </tag>
            
            <tag> SpringBoot+vue </tag>
            
            <tag> 前后端分离 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统3-实现分页查询的功能</title>
      <link href="/2022/102816108.html"/>
      <url>/2022/102816108.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2><h3 id="一、后端完成相关的配置"><a class="header-anchor" href="#一、后端完成相关的配置">¶</a>一、后端完成相关的配置</h3><h5 id="1-、安装pageHelper的依赖"><a class="header-anchor" href="#1-、安装pageHelper的依赖">¶</a>(1)、安装pageHelper的依赖</h5><pre class=" language-language-xml"><code class="language-language-xml"><dependency>    <groupId>com.github.pagehelper</groupId>    <artifactId>pagehelper-spring-boot-starter</artifactId>    <version>1.4.5</version></dependency></code></pre><p><img src="/2022/102816108/pageHelper%E4%BE%9D%E8%B5%96.png" alt></p><h5 id="2-、相关代码"><a class="header-anchor" href="#2-、相关代码">¶</a>(2)、相关代码</h5><p>UserController:</p><pre class=" language-language-java"><code class="language-language-java">// 编写分页查询的功能@GetMapping("/page")public Result UserPage(UserPageRequest userPageRequest)&#123;    return Result.success(userService.getUserPage(userPageRequest));&#125;</code></pre><p>UserService:</p><pre class=" language-language-java"><code class="language-language-java">public interface IUserService &#123;    List<User> getUsersList();    // 分页查询user    Object getUserPage(UserPageRequest userPageRequest);&#125;</code></pre><p>UserServiceImpl:</p><pre class=" language-language-java"><code class="language-language-java">@Servicepublic class UserServiceImpl implements IUserService &#123;    @Autowired    private UserMapper userMapper;    @Override    public List<User> getUsersList() &#123;        return userMapper.UsersList();    &#125;    // 分页查询以及条件查询    @Override    public Object getUserPage(UserPageRequest userPageRequest) &#123;        // 再将参数进行传递到mapper当中进行模糊查询 重点！！！！！！！！！！！！！！！！！！！！！        PageHelper.startPage(userPageRequest.getPageNum(), userPageRequest.getPageSize());        List<User> users = userMapper.selectUserByCondition(userPageRequest);        return new PageInfo<>(users);    &#125;&#125;</code></pre><p>UserMapper:</p><pre class=" language-language-java"><code class="language-language-java">@Mapperpublic interface UserMapper &#123;//    @Select("select * from user")    List<User> UsersList();    // 通过参数进行条件查询：并且返回分页的效果    List<User> selectUserByCondition(UserPageRequest userPageRequest);&#125;</code></pre><p>User.xml:</p><p><img src="/2022/102816108/%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2xml.png" alt></p><h3 id="二、前端代码"><a class="header-anchor" href="#二、前端代码">¶</a>二、前端代码</h3><h5 id="1-、分页插件的代码"><a class="header-anchor" href="#1-、分页插件的代码">¶</a>(1)、分页插件的代码</h5><p><img src="/2022/102816108/%E5%89%8D%E7%AB%AF%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6.png" alt></p><h5 id="2-、处理变化函数的代码"><a class="header-anchor" href="#2-、处理变化函数的代码">¶</a>(2)、处理变化函数的代码</h5><pre class=" language-language-javascript"><code class="language-language-javascript">load()&#123;    // fetch("http://localhost:9090/user/list").then(res => res.json()).then(res => &#123;    //   console.log(res);    //   this.tableData = res;    // &#125;)    request.get("/user/page", &#123;        params: this.params        &#125;).then(res => &#123;        if(res.code === '200')&#123;            this.tableData = res.data.list;            this.total = res.data.total;        &#125;    &#125;)&#125;,// 重置函数：将各种参数置为初始值后重新加载reset()&#123;    this.params = &#123;    name: '',    phone: '',    pageSize: 10,    pageNum: 1    &#125;    this.load();&#125;,// 分页条件的监视函数handleSizeChange(pageSize)&#123;    // console.log("多少条每页发生变化");    // console.log(pageSize);    this.params.pageSize = pageSize;    this.load();&#125;,handleCurrentChange(pageNum)&#123;    // console.log("前往第几页发生变化");    // console.log(pageNum);    this.params.pageNum = pageNum;    this.load();&#125;</code></pre><p><img src="/2022/102816108/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C.png" alt></p><p><a href="https://www.bilibili.com/video/BV12Y4y1N7Sw/?p=4&amp;spm_id_from=pageDriver&amp;vd_source=0f50d0008f8b836aa3258f634d65d48e">视频教程</a></p></font>]]></content>
      
      
      <categories>
          
          <category> 前后端分离web系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot+vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统2-创建springboot后端项目</title>
      <link href="/2022/102816107.html"/>
      <url>/2022/102816107.html</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2><h3 id="一、创建springboot后端项目"><a class="header-anchor" href="#一、创建springboot后端项目">¶</a>一、创建springboot后端项目</h3><p>根据springboot官网或idea创建springboot项目，这不有手就行😅</p><h3 id="二、完成相关的配置"><a class="header-anchor" href="#二、完成相关的配置">¶</a>二、完成相关的配置</h3><h5 id="1-、添加相关的依赖项，这里做一个总结（偷懒，以后直接来用就行了"><a class="header-anchor" href="#1-、添加相关的依赖项，这里做一个总结（偷懒，以后直接来用就行了">¶</a>(1)、添加相关的依赖项，这里做一个总结（偷懒，以后直接来用就行了</h5><pre class=" language-language-xml"><code class="language-language-xml"><!--mysql驱动--><dependency>    <groupId>mysql</groupId>    <artifactId>mysql-connector-java</artifactId>    <version>5.1.47</version></dependency><!-- log4j日志 --><dependency>    <groupId>log4j</groupId>    <artifactId>log4j</artifactId>    <version>1.2.17</version></dependency><!-- lombok --><dependency>    <groupId>org.projectlombok</groupId>    <artifactId>lombok</artifactId>    <version>1.18.12</version></dependency></code></pre><h5 id="2-、springboot要运行起来，需要完成数据库的配置"><a class="header-anchor" href="#2-、springboot要运行起来，需要完成数据库的配置">¶</a>(2)、springboot要运行起来，需要完成数据库的配置</h5><pre class=" language-language-yml"><code class="language-language-yml">server:  port: 9090spring:  datasource:    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql://localhost:3306/library-managment    username: root    password: "0613"</code></pre><pre class=" language-language-protityes"><code class="language-language-protityes">server.port=8080</code></pre><h3 id="三、完成springboot查出数据库当中的数据"><a class="header-anchor" href="#三、完成springboot查出数据库当中的数据">¶</a>三、完成springboot查出数据库当中的数据</h3><h5 id="1-、后端代码结构"><a class="header-anchor" href="#1-、后端代码结构">¶</a>(1)、后端代码结构</h5><p><img src="/2022/102816107/%E5%90%8E%E7%AB%AF%E7%BB%93%E6%9E%84.png" alt></p><h5 id="2-、数据库表结构及内容"><a class="header-anchor" href="#2-、数据库表结构及内容">¶</a>(2)、数据库表结构及内容</h5><p><img src="/2022/102816107/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84.png" alt></p><h5 id="3-、springboot相关代码"><a class="header-anchor" href="#3-、springboot相关代码">¶</a>(3)、springboot相关代码</h5><p>User实体类代码</p><pre class=" language-language-java"><code class="language-language-java">@Data@AllArgsConstructor@NoArgsConstructorpublic class User &#123;    private Integer id;    private String name;    private String username;    private Integer age;    private String sex;    private String phone;    private String address;&#125;</code></pre><p>UserController代码</p><pre class=" language-language-java"><code class="language-language-java">@RestController@RequestMapping("/user")@CrossOriginpublic class UserController &#123;    @Autowired    private IUserService userService;    @GetMapping("/list")    public List<User> getUserList()&#123;        return userService.getUsersList();    &#125;&#125;</code></pre><p>UserService代码</p><pre class=" language-language-java"><code class="language-language-java">public interface IUserService &#123;    List<User> getUsersList();&#125;</code></pre><p>UserServiceImpl</p><pre class=" language-language-java"><code class="language-language-java">@Servicepublic class UserServiceImpl implements IUserService &#123;    @Autowired    private UserMapper userMapper;    @Override    public List<User> getUsersList() &#123;        return userMapper.UsersList();    &#125;&#125;</code></pre><h5 id="4-、启动项目，在http-localhost-9090-user-list"><a class="header-anchor" href="#4-、启动项目，在http-localhost-9090-user-list">¶</a>(4)、启动项目，在http://localhost:9090/user/list</h5><p>在浏览器中即可看到如下内容：<br><img src="/2022/102816107/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C.png" alt></p><h5 id="5-、前端使用fetch完成数据的转化"><a class="header-anchor" href="#5-、前端使用fetch完成数据的转化">¶</a>(5)、前端使用fetch完成数据的转化</h5><pre class=" language-language-javascript"><code class="language-language-javascript">fetch("http://localhost:9090/user/list").then(res => res.json()).then(res => &#123;        console.log(res);        this.tableData = res;      &#125;)</code></pre><p>前端效果如图:<br><img src="/2022/102816107/%E5%89%8D%E7%AB%AF%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt></p><h5 id="6-、使用mybatis：-https-mybatis-net-cn"><a class="header-anchor" href="#6-、使用mybatis：-https-mybatis-net-cn">¶</a>(6)、使用mybatis： <a href="https://mybatis.net.cn/">https://mybatis.net.cn/</a></h5><p>在resources目录下创建一个mapper的目录，创建User.xml，编写SQL语句</p><pre class=" language-language-xml"><code class="language-language-xml"><?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.bin.library_back.mapper.UserMapper">    <select id="UsersList" resultType="com.bin.library_back.entity.User">        select * from user    </select></mapper></code></pre><p>其次在配置文件当中编写mybatis的配置</p><pre class=" language-language-yml"><code class="language-language-yml"># 定义mapper的路径mybatis:  mapper-locations: classpath:mapper/*.xml</code></pre><p>完成上述相同的测试效果</p><h5 id="7-、统一返回结果Result-java"><a class="header-anchor" href="#7-、统一返回结果Result-java">¶</a>(7)、统一返回结果Result.java</h5><pre class=" language-language-java"><code class="language-language-java">@Datapublic class Result &#123;    private static final String SUCCESS_CODE = "200";    private static final String ERROR_CODE = "-1";    private String code;    private Object data;    private String msg;    // 返回成功或者失败的方法    public static Result success()&#123;        Result result = new Result();        result.setCode(SUCCESS_CODE);        return result;    &#125;    public static Result success(Object data)&#123;        Result result = new Result();        result.setCode(SUCCESS_CODE);        result.setData(data);        return result;    &#125;    public static Result error(String msg)&#123;        Result result = new Result();        result.setCode(ERROR_CODE);        result.setMsg(msg);        return result;    &#125;&#125;</code></pre><h5 id="8-、解决跨域问题（最简单：在Controller的方法上加上-CrossOrigin的注解）"><a class="header-anchor" href="#8-、解决跨域问题（最简单：在Controller的方法上加上-CrossOrigin的注解）">¶</a>(8)、解决跨域问题（最简单：在Controller的方法上加上@CrossOrigin的注解）</h5><pre class=" language-language-java"><code class="language-language-java">@CrossOrigin</code></pre><h3 id="四、完成前后端对接"><a class="header-anchor" href="#四、完成前后端对接">¶</a>四、完成前后端对接</h3><p>前端项目当中编写一个utils方法：request.js</p><pre class=" language-language-javascript"><code class="language-language-javascript">import axios from 'axios'import router from "@/router";import Cookies from 'js-cookie'const request = axios.create(&#123;    baseURL: 'http://localhost:9090',    timeout: 5000&#125;)// request 拦截器// 可以自请求发送前对请求做一些处理// 比如统一加token，对请求参数统一加密request.interceptors.request.use(config => &#123;    config.headers['Content-Type'] = 'application/json;charset=utf-8';    const adminJson = Cookies.get('admin')    if (adminJson) &#123;        // 设置请求头        config.headers['token'] = JSON.parse(adminJson).token    &#125;    return config&#125;, error => &#123;    return Promise.reject(error)&#125;);// response 拦截器// 可以在接口响应后统一处理结果request.interceptors.response.use(    response => &#123;        let res = response.data;        // 兼容服务端返回的字符串数据        if (typeof res === 'string') &#123;            res = res ? JSON.parse(res) : res        &#125;        if (res.code === '401') &#123;            router.push('/login')        &#125;        return res;    &#125;,    error => &#123;        console.log('err' + error) // for debug        return Promise.reject(error)    &#125;)export default request</code></pre><p>在vue代码当中完成请求后端的接口</p><pre class=" language-language-javascript"><code class="language-language-javascript">import request from "../utils/request";request.get("/user/page", &#123;    params: this.params    &#125;).then(res => &#123;    if(res.code === '200')&#123;        this.tableData = res.data.list;        this.total = res.data.total;    &#125;&#125;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前后端分离web系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot+vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统1-创建Vue前端项目</title>
      <link href="/2022/102716107.html"/>
      <url>/2022/102716107.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2><h3 id="一、创建Vue项目及安装依赖项"><a class="header-anchor" href="#一、创建Vue项目及安装依赖项">¶</a>一、创建Vue项目及安装依赖项</h3><p>(1)、使用下列命令安装/更新Vue-cli</p><pre class=" language-language-base"><code class="language-language-base">npm install -g @vue/cli# ORyarn global add @vue/cli</code></pre><p><a href="https://cli.vuejs.org/zh/guide/installation.html">vue-vli学习网站</a></p><p>(2)、使用下列命令安装Vue框架内容</p><pre class=" language-language-base"><code class="language-language-base">vue create [项目名]</code></pre><p>(3)、使用命令访问创建的项目内容</p><pre class=" language-language-base"><code class="language-language-base">vue run dev/serve</code></pre><p>(4)、前端项目当中使用Element-ui<br>官网：<a href="https://element.eleme.cn/#/zh-CN/guide/design">https://element.eleme.cn/#/zh-CN/guide/design</a></p><pre class=" language-language-bash"><code class="language-language-bash">npm i element-ui -S</code></pre><p>在vue前端项目当中使用</p><pre class=" language-language-javascript"><code class="language-language-javascript">// main.jsimport Vue from 'vue';import ElementUI from 'element-ui';import 'element-ui/lib/theme-chalk/index.css';import App from './App.vue';Vue.use(ElementUI);new Vue(&#123;  el: '#app',  render: h => h(App)&#125;);</code></pre><h3 id="二、几个小技巧"><a class="header-anchor" href="#二、几个小技巧">¶</a>二、几个小技巧</h3><p>(1)、通常情况下，原始的界面都会出现页面一小部分留白，我们可以编辑全局样式进行控制<br>a、在assets目录下创建global.css<br>b、在main.js当中进行引入：import “@/assets/global.css”</p><pre class=" language-language-css"><code class="language-language-css">body &#123;    margin: 0;    padding: 0;&#125;* &#123;    box-sizing: border-box; //消除掉盒子模型的内边距，通常是有一个像素的大小&#125;</code></pre><p>(2)、在IDEA编译器当中Add Configurations当中选择npm，找到执行的package.json文件，使用npm run serve命令</p><p><img src="/2022/102716107/IDEA%E4%BD%BF%E7%94%A8npm%E8%BF%90%E8%A1%8C%E7%AA%97%E5%8F%A3.png" alt></p><p>(3)、更新相关的系统icon<br>         阿里巴巴icon图标库： <a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p><p>(4)、系统的框架的搭建<br>通常情况下，系统的页面都是分为[头部栏][左侧导航栏][中间主体部分]三个部分，我们就这三部分进行系统页面的划分<br>在创建好的vue前端项目当中，在app.vue文件当中完成三个部分的划分</p><p>a)、头部区域</p><pre class=" language-language-html"><code class="language-language-html"><!--头部区域--><!--    其中将整个头部区域设置height: 60px; line-height: 60px; 是确定内部的元素都是居中对齐的                        margin-bottom: 2px; 是头部与下列两部分之间存在一个2px的间隙    图片只设置宽度/高度中的一个  而不设置两个是为了不让logo失真    position: relative; 是让图片从其中脱离出来，自由定位--><div style="height: 60px; line-height: 60px; background-color: white; margin-bottom: 2px">    <img src="@/assets/logo.png" style="width: 40px; position: relative; top: 9px; left: 10px">    <span style="font-size: 20px; margin-left: 30px;">图书管理系统</span></div></code></pre><p>b)、主体区域</p><pre class=" language-language-html"><code class="language-language-html"><!--侧边栏和主体内容--><div style="display: flex">    <!--侧边栏导航位置-->    <div style="width: 200px; min-height: calc(100vh - 62px); overflow: hidden; margin-right: 2px; background-color: white">        <el-menu :default-active="$route.path" router class="el-menu-demo"  @select="handleSelect">            <el-menu-item index="/">                <i class="el-icon-s-home"></i>                <span>首页</span>            </el-menu-item>            <el-submenu index="2">                <template slot="title">                    <i class="el-icon-question"></i>                    <span>关于</span>                </template>                <el-menu-item index="/about">关于页面</el-menu-item>                <el-submenu index="2-4">                    <template slot="title">选项4</template>                    <el-menu-item index="2-4-1">选项1</el-menu-item>                    <el-menu-item index="2-4-2">选项2</el-menu-item>                    <el-menu-item index="2-4-3">选项3</el-menu-item>                </el-submenu>            </el-submenu>        </el-menu>    </div>    <!--主体数据区域-->    <div style="flex: 1; background-color: white">        <router-view/>    </div></div><!--    style="display: flex":                  确保下面的两个div是并排出现的 使用flex布局    min-height: calc(100vh - 62px):         将下面的主题区域撑满，并且要减去头部的大小(60 + 2)    index="/":                              在导航栏当中，index表示的就是跳转的路径，可以对应到router.js当中的path    <router-view/>:                         切换过程当中页面切换的部分，一个代替的部分，只需要放到主题数据区域即可--></code></pre><p>(5)、将elementUI中的各类组件的大小进行配置</p><pre class=" language-language-javascript"><code class="language-language-javascript">Vue.use(ElementUI, &#123;size: 'mini'&#125;); // 配置elementui的样式大小 medium small mini</code></pre></font>]]></content>
      
      
      <categories>
          
          <category> 前后端分离web系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot+vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 搭建个人博客</title>
      <link href="/2022/102516107.html"/>
      <url>/2022/102516107.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="如你所见，您现在正在浏览的就是我使用Hexo框架搭建的个人博客"><a class="header-anchor" href="#如你所见，您现在正在浏览的就是我使用Hexo框架搭建的个人博客">¶</a>如你所见，您现在正在浏览的就是我使用Hexo框架搭建的个人博客</h2><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><blockquote><p>在安装之前，你的电脑上应该已经安装了以下内容：</p><ul><li>Git: 也可使用本机cmd命令窗口完成</li><li>node.js: Hexo框架运行的</li></ul></blockquote><h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2><h3 id="1、安装Git"><a class="header-anchor" href="#1、安装Git">¶</a>1、安装Git</h3><p>你不会跟我说你没装Git吧~~~</p><p>More info: <a href="https://blog.csdn.net/mukes/article/details/115693833?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166687136816782412530437%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166687136816782412530437&amp;biz_id=0&amp;spm=1018.2226.3001.4187">安装教程</a></p><h3 id="2、安装Node-js"><a class="header-anchor" href="#2、安装Node-js">¶</a>2、安装Node.js</h3><p>你不会跟我说你没装Node吧~~~</p><p>More info: <a href="https://blog.csdn.net/weixin_44893902/article/details/121788104?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166686140416782395362937%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166686140416782395362937&amp;biz_id=0&amp;spm=1018.2226.3001.4187">安装教程</a></p><h3 id="3、本地安装Hexo"><a class="header-anchor" href="#3、本地安装Hexo">¶</a>3、本地安装Hexo</h3><p>在安装完成Git和NodeJS之后，接下来就是本地下载Hexo，首先在本地创建一个Blog(名字任取)的文件夹，打开这个文件夹，鼠标右键使用git bash。</p><p>(1)使用命令安装Hexo</p><pre class=" language-language-bash"><code class="language-language-bash">$ hexo install -g hexo-cli</code></pre><p>(2)使用命令查看Hexo的版本信息</p><pre class=" language-language-bash"><code class="language-language-bash">$ hexo -v</code></pre><p>(3)安装完毕之后进行初始化，完成对自己博客项目的创建</p><pre class=" language-language-bash"><code class="language-language-bash">$ hexo init</code></pre><p>在安装完成的目录下，会存在以下目录：</p><blockquote><ul><li>node_modules: 依赖包</li><li>public: 存放生成的页面</li><li>scaffolds: 生成文章的一些模板</li><li>source: 用来你的文章</li><li>themes: 下载保存自己的主题，本主题<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a></li><li>_config.yml: 重点配置文件</li></ul></blockquote><p>(4)使用命令生成创建的页面</p><pre class=" language-language-bash"><code class="language-language-bash">$ hexo g</code></pre><p>(5)本地运行你的博客项目</p><pre class=" language-language-bash"><code class="language-language-bash">$ hexo s</code></pre><p>运行成功后，你会看到如下提示</p><pre class=" language-language-bash"><code class="language-language-bash">Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop. </code></pre><p>然后访问日志中的地址：localhost:4000</p><p>恭喜你，你的第一个博客系统搭建成功！</p><h3 id="4、GitHub创建个人仓库"><a class="header-anchor" href="#4、GitHub创建个人仓库">¶</a>4、GitHub创建个人仓库</h3><p>首先在Github上注册自己的账号，注册完成之后，完善各项账号的信息。<br>然后New Repository 命令为你为：[Github名].github.io<br>例如：我的github名称为Binbin0613, 我的博客仓库名为：<a href="http://Binbin0613.github.io">Binbin0613.github.io</a> (可以参考<a href="https://github.com/Binbin0613/Binbin0613.github.io">我的仓库</a>)</p><h3 id="5、将本地的Hexo部署上GitHub上"><a class="header-anchor" href="#5、将本地的Hexo部署上GitHub上">¶</a>5、将本地的Hexo部署上GitHub上</h3><p>在你完成Hexo初始化的地方(同第三步的位置)，输入命令，完成代码的上传</p><pre class=" language-language-bash"><code class="language-language-bash">$ hexo d</code></pre><p>执行到这一步之后，浏览器输入: [Github名].github.io 即可看到你的博客网站了</p><h3 id="6、发布文章"><a class="header-anchor" href="#6、发布文章">¶</a>6、发布文章</h3><p>至此你的博客项目就搭建好了，那么想要发布文章就需要接下来的几步了！</p><p>(1)、在： [:\BlogName\source_posts] 目录下创建自己想要发布文章的文件(所有的文章发布都是以markDown格式发布的)<br>你可以看到的是已经有一个名为Hello World.md的文件</p><p>(2)、文章中需要插入图片的话，首先找到_config.yml文件。</p><pre class=" language-language-yml"><code class="language-language-yml">post_asset_folder: true # 原来是false，将其设置为true</code></pre><p>与此同时，在[:\BlogName\source_posts] 目录下创建与文章同名的文件夹，然后将图片放入，若要在文章中引入，则直接使用相对路径的方式进行访问[./文章名/XXX.png]，即可完成图片访问。</p><p>(3)、完成文章的编写后，使用下列命名进行缓存的清楚</p><pre class=" language-language-bash"><code class="language-language-bash">$ hexo clean</code></pre><p>(4)、使用下列命令完成博客的重新生成</p><pre class=" language-language-bash"><code class="language-language-bash">$ hexo g # generate</code></pre><p>(5)、使用下列命令完成对博客项目的本地查看</p><pre class=" language-language-bash"><code class="language-language-bash">$ hexo s # server</code></pre><p>(6)、使用下列命令完成对博客项目的上传(至Github仓库)</p><pre class=" language-language-bash"><code class="language-language-bash">$ hexo d # deploy</code></pre><h3 id="更多信息请关注"><a class="header-anchor" href="#更多信息请关注">¶</a>更多信息请关注</h3><p>(1)、<a href="https://blog.csdn.net/wangqingchuan92/article/details/112277112?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;spm=1018.2226.3001.4187">解决博客的enjoy问题</a>          <a href="https://apps.timwhitlock.info/emoji/tables/unicode#">enjoy表情包合集</a></p><p>(2)、<a href>Hexo更多的配置相关问题(开个玩笑)</a></p><p>(3)、<a href="https://www.bilibili.com/video/BV1q4411i7gL/?spm_id_from=333.788.recommend_more_video.8&amp;vd_source=0f50d0008f8b836aa3258f634d65d48e">更全的安装视频</a></p><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p></font>]]></content>
      
      
      <categories>
          
          <category> 博客介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binbin0613 </tag>
            
            <tag> 关于博客 </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binbin0613</title>
      <link href="/2022/102416107.html"/>
      <url>/2022/102416107.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="欢迎大家访问我的博客Binbin0613"><a class="header-anchor" href="#欢迎大家访问我的博客Binbin0613">¶</a><strong>欢迎大家访问我的博客<a href="Binbin0613.github.io">Binbin0613</a></strong></h2><h3 id="做一个自我介绍"><a class="header-anchor" href="#做一个自我介绍">¶</a>做一个自我介绍</h3><p>Bin，<a href="http://www.xhu.edu.cn/">XHU</a>软件工程本，<a href="https://sias.uestc.edu.cn/">UESTC</a>电子信息专硕，21岁大四在读身高170cm体重不说每天8点到23点待实验室周末无休还卡在毕设的码农一位！</p><blockquote><ul><li>爱好： 踢足球(大学基本没碰过 😅)</li><li>学习方向： <a href="https://github.com/Binbin0613">REID</a>     <a href="https://github.com/Binbin0613">Search</a>    <a href="https://github.com/Binbin0613">JAVA</a>    <a href="https://github.com/Binbin0613">Vue</a>    <a href="https://github.com/Binbin0613">React</a></li></ul></blockquote><p><img src="/2022/102416107/avatar.jpg" alt></p><h5 id="忘记说了：-2022年阿根廷必夺冠！！！"><a class="header-anchor" href="#忘记说了：-2022年阿根廷必夺冠！！！">¶</a>忘记说了： 2022年阿根廷必夺冠！！！</h5><h4 id="More-Info"><a class="header-anchor" href="#More-Info">¶</a>More Info:</h4><p>QQ：3474251879<br>WeChat: Ilovedaisysomuch<br>Email: <a href="mailto:Binbin.0626@foxmail.com">Binbin.0626@foxmail.com</a><br>Github: <a href="https://github.com/Binbin0613">https://github.com/Binbin0613</a><br>Sina: 基本上不玩，偶尔看看</p></font>]]></content>
      
      
      <categories>
          
          <category> 博客介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binbin0613 </tag>
            
            <tag> 关于博客 </tag>
            
            <tag> 实用小工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/102316107.html"/>
      <url>/2022/102316107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2><h3 id="Create-a-new-post"><a class="header-anchor" href="#Create-a-new-post">¶</a>Create a new post</h3><pre class=" language-language-bash"><code class="language-language-bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a class="header-anchor" href="#Run-server">¶</a>Run server</h3><pre class=" language-language-bash"><code class="language-language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a class="header-anchor" href="#Generate-static-files">¶</a>Generate static files</h3><pre class=" language-language-bash"><code class="language-language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a class="header-anchor" href="#Deploy-to-remote-sites">¶</a>Deploy to remote sites</h3><pre class=" language-language-bash"><code class="language-language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="/2022/102316107/avatar.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 博客介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binbin0613 </tag>
            
            <tag> 关于博客 </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
