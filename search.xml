<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VGG-图像分类实现猫狗分类</title>
      <link href="/2022/111316122.html"/>
      <url>/2022/111316122.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、项目目录结构及相关代码解析"><a class="header-anchor" href="#一、项目目录结构及相关代码解析">¶</a>一、项目目录结构及相关代码解析</h3><h5 id="使用pytorch框架利用VGG16网络实现猫狗分类的目录结构"><a class="header-anchor" href="#使用pytorch框架利用VGG16网络实现猫狗分类的目录结构">¶</a>使用pytorch框架利用VGG16网络实现猫狗分类的目录结构</h5><p><img src="/2022/111316122/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt></p><p>├── <a href="http://data.py">data.py</a>：进行图像数据的整理(原始给定的数据集当中的图像是不规范的数据，需要对其完成数据的规范化处理)–对数据集进行大小的调整/翻转，使得数据具备更强的鲁棒性</p><p>├── <a href="http://net.py">net.py</a>: 编写的VGG16网络的代码，这里的代码可以去pytorch官网上找到<a href="https://pytorch.org/vision/stable/_modules/torchvision/models/vgg.html#vgg16">源代码</a>，并做出相关的修改</p><p>├── <a href="http://txt.py">txt.py</a>: 将训练的图像的地址进行输出，输出为：cls_train.txt中</p><p>├── <a href="http://main.py">main.py</a>: 进行训练的源代码，包括：数据的加载、创建模型网络、优化器编写、开始训练、保存模型等</p><p>├── <a href="http://predict.py">predict.py</a>: 进行训练出来的模型的效果验证，</p><pre class="language-python" data-language="python"><code class="language-python"></code></pre></font>]]></content>
      
      
      <categories>
          
          <category> VGG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> 网络模型 </tag>
            
            <tag> VGG </tag>
            
            <tag> 猫狗分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VGG-图像分类卷积神经网络</title>
      <link href="/2022/111116123.html"/>
      <url>/2022/111116123.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、查看ImageNet图像分类竞赛历年Tops错误率"><a class="header-anchor" href="#一、查看ImageNet图像分类竞赛历年Tops错误率">¶</a>一、查看ImageNet图像分类竞赛历年Tops错误率</h3><p><a href="https://www.bilibili.com/h5/note-app/view?cvid=14087625&amp;pagefrom=comment">学习笔记</a></p><p><font color="#0000FF">2014年ImageNet图像分类竞赛亚军(谷歌是冠军)，定位赛冠军</font></p><p><img src="/2022/111116123/ImageNet%E7%AB%9E%E8%B5%9B1.png" alt></p><p><img src="/2022/111116123/imagenet%E7%AB%9E%E8%B5%9B2.png" alt></p><h6 id="VGG网络就是：传统意义上的能够做到的将网络深度达到的极致：19层"><a class="header-anchor" href="#VGG网络就是：传统意义上的能够做到的将网络深度达到的极致：19层">¶</a>VGG网络就是：传统意义上的能够做到的将网络深度达到的极致：19层</h6><h3 id="二、VGG网络结构对比-VGG16-VGG19"><a class="header-anchor" href="#二、VGG网络结构对比-VGG16-VGG19">¶</a>二、VGG网络结构对比 VGG16  VGG19</h3><p><img src="/2022/111116123/vgg%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt></p><p>如上图所示：<br>1、每一列即为一个层数，D：VGG16      E：VGG19</p><p>2、每一个模型都分为5个block， 并且所有的卷积层都采用的是3*3大小的卷积核</p><p>3、随着模型变深，每一个block的channel个数，或者说是卷积核个数都会翻倍</p><p>4、以D为例，第一个block当中有两个卷积层，每一个卷积层都有64个3 * 3卷积，第二个block当中有两个卷积层，每一个卷积层都有128个3 * 3卷积</p><p>5、D的5个block是 2 - 2 - 3 - 3 - 3 层卷积，加起来是16，而E是22444，加起来是19层</p><p>6、各种模型的单位数量如表2所示，单位：百万，VGG16有1亿3千8百万个参数，参数过多也是一个短板。</p><p>7、五个block完成之后，进行下采样maxPooling, 再完成三个全连接层和softmax分类输出层</p><p>8、输入的是224 * 224 的RGB三通道图像，输出的是1000个类别的概率，并且输出的1000个概率值为[0, 1], 且这1000个概率值相加为1。softmax会调出最大的那个概率作为其预测的结果。</p><p>9、下采样层(maxpooling层)由于没有参数，所以它并不包含在这16或者19层当中的一层</p><p><img src="/2022/111116123/vgg16%2619.png" alt></p><h5 id="注意看的是这里的VGG16-19网络的结构图-以及-每一块代表什么处理"><a class="header-anchor" href="#注意看的是这里的VGG16-19网络的结构图-以及-每一块代表什么处理">¶</a>注意看的是这里的VGG16 19网络的结构图 以及 每一块代表什么处理</h5><h5 id="font-color-0000FF-像素层面上的长宽越来越少-font"><a class="header-anchor" href="#font-color-0000FF-像素层面上的长宽越来越少-font">¶</a><font color="#0000FF">像素层面上的长宽越来越少</font></h5><h5 id="font-color-0000FF-语义层面上的通道数越来越深-font"><a class="header-anchor" href="#font-color-0000FF-语义层面上的通道数越来越深-font">¶</a><font color="#0000FF">语义层面上的通道数越来越深</font></h5><p>最后得到的是1000个类别的概率值</p><h3 id="二、重点研究VGG16"><a class="header-anchor" href="#二、重点研究VGG16">¶</a>二、重点研究VGG16</h3><h5 id="1、VGG16-从输入到输出的每一层含义"><a class="header-anchor" href="#1、VGG16-从输入到输出的每一层含义">¶</a>1、VGG16 从输入到输出的每一层含义</h5><p><img src="/2022/111116123/vgg16%E6%A6%82%E5%BF%B5%E5%9B%BE.png" alt></p><blockquote><ul><li>最常用的迁移学习的骨干模型</li><li>输入时224<em>224</em>3的RGB彩色图像</li><li>第一个block输出的feature map是224<em>224</em>64，有64个卷积核，每一个卷积核生成一个channel，每一个channel还是224*224</li><li>下采样后长宽减半，然后继续用128个卷积核进行卷积，得到128个channel</li><li>第五个block输出的feature map是7<em>7</em>512，经过下采样将它展平成为一个长向量，再经过3个全连接层（第一二层有4096个神经元，第三层有1000个神经元）</li><li>经过最后一个全连接层输出1000个类别的logic分数，这1000个分数经过softmax处理，得到1000个类别的后验概率</li><li>长宽信息逐渐减小，通道信息逐渐增加（将像素空间的信息转化成语义信息）</li></ul></blockquote><p><img src="/2022/111116123/vgg16%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt></p><h5 id="2、VGG16-在每一层当中的参数数量以及内存消耗"><a class="header-anchor" href="#2、VGG16-在每一层当中的参数数量以及内存消耗">¶</a>2、VGG16 在每一层当中的参数数量以及内存消耗</h5><p><img src="/2022/111116123/vgg16%E7%9A%84%E5%8F%82%E6%95%B0%E5%8F%8A%E5%86%85%E5%AD%98.png" alt></p><p>从上图当中可以看出：<br>前两层卷积占据了巨大部分的内存<br>第一层全连接占据了绝大部分的参数</p><h5 id="3、VGG16-在每一层当中层数变化过程"><a class="header-anchor" href="#3、VGG16-在每一层当中层数变化过程">¶</a>3、VGG16 在每一层当中层数变化过程</h5><p><img src="/2022/111116123/vgg16%E6%AF%8F%E4%B8%80%E5%B1%82%E5%8F%98%E5%8C%96%E5%9B%BE.png" alt></p><h5 id="4、使用3-3作为卷积核的作用"><a class="header-anchor" href="#4、使用3-3作为卷积核的作用">¶</a>4、使用3 * 3作为卷积核的作用</h5><p><img src="/2022/111116123/33%E5%8D%B7%E7%A7%AF%E6%A0%B8%E7%9A%84%E4%BD%9C%E7%94%A8.png" alt></p><p><img src="/2022/111116123/%E4%B8%A4%E6%AC%A133%E5%8D%B7%E7%A7%AF.png" alt></p><p>两次33卷积，可以等同于一次的55卷积<br>好处：模型变深了、非线性次数变多了、学习能力变得更好、表示空间变得更大，两次33卷积的参数数量要远小于一次5 * 5卷积</p><p>进而可以推断：3个3 * 3的卷积的过程，可以替代一次7 * 7的卷积的过程</p><p>还有一个原因就是：3 * 3是最小的能够表示上下左右的所有因素的一个单元</p><h5 id="5、VGG16模型的特点"><a class="header-anchor" href="#5、VGG16模型的特点">¶</a>5、VGG16模型的特点</h5><p>在效果上，vgg16的效果并不是很好，在后续有resNet等优秀的模型更优秀</p><p><img src="/2022/111116123/vgg%E6%95%88%E6%9E%9C%E5%B9%B6%E4%B8%8D%E5%A5%BD.png" alt><br>从上图当中可以看到，左图准确率为中游的水平,右图可以看出计算量和处理的流程都非常的臃肿！</p><h3 id="三、VGG网络相关问题"><a class="header-anchor" href="#三、VGG网络相关问题">¶</a>三、VGG网络相关问题</h3><p>1、VGG16的全称</p><pre class="language-none"><code class="language-none">VGG是Visual Geometry Group Network的缩写，视觉几何群网络。</code></pre><p>2、预处理</p><pre class="language-none"><code class="language-none">图片的预处理就是每一个像素减去了均值。</code></pre><p>3、VGG16中数字“16”的缘由？</p><pre class="language-none"><code class="language-none">VGG结构中有13个卷积层和3个全链接层。 下采样是maxPooling没有参数，所以不算</code></pre><p>4、为什么卷积没有考虑正则，全连接考虑了正则？</p><pre class="language-none"><code class="language-none">因为卷积层的w个数相对少，在一定程度上可以防止过拟合，而全连接层所需计算的w参数多，故需要考虑正则以防止过拟合。</code></pre><p>5、VGG可以用来做什么？</p><pre class="language-none"><code class="language-none">可以用来做迁移学习。</code></pre><p>6、什么是迁移学习？</p><pre class="language-none"><code class="language-none">将一个领域的已经成熟的知识应用到其他的场景中。</code></pre><p>7、所用卷积核和池化核的大小是多少？</p><pre class="language-none"><code class="language-none">卷积核大小为(3,3)，池化核大小为(2,2)。</code></pre><pre class="language-none"><code class="language-none">&#96;&#96;&#96;</code></pre><pre><code>&lt;/font&gt;</code></pre></font>]]></content>
      
      
      <categories>
          
          <category> VGG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> 网络模型 </tag>
            
            <tag> VGG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标检测--利用labelimg制作深度学习数据集</title>
      <link href="/2022/111116121.html"/>
      <url>/2022/111116121.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、项目的克隆以及必要的环境依赖"><a class="header-anchor" href="#一、项目的克隆以及必要的环境依赖">¶</a>一、项目的克隆以及必要的环境依赖</h3><p>YOLOv5的代码是开源的，因此我们可以从github上克隆其源码。不得不说GitHub的确是全球最大的男性交友网站，里面的人个个都是人才，yolov5发布才一年左右的时间，YOLOv5就已经更新了5个分支了，分别是yolov5.1-yolov5.5分支。该项目就是利用的yolov5.5分支来作为讲解。</p><p><a href="https://github.com/ultralytics/yolov5/tree/v5.0">官网</a></p><h5 id="1、注意的是：需要在Tags上选择V5-0版本"><a class="header-anchor" href="#1、注意的是：需要在Tags上选择V5-0版本">¶</a>1、注意的是：需要在Tags上选择V5.0版本</h5><p>个开源的项目通过大家的不断的完善和修复已经到了第5个分支，因此我们选择第五个版本来实验，首先点击左上角的master这个图标来选择项目的第5个分支，如下图所示，然后将版本选择好以后，点击右上角的code那个按键，将代码下载下来。至此整个项目就已经准备好了。</p><p><img src="/2022/111116121/yolov5%E5%9C%B0%E5%9D%80.png" alt></p><h5 id="2、项目的代码结构"><a class="header-anchor" href="#2、项目的代码结构">¶</a>2、项目的代码结构</h5><p><img src="/2022/111116121/YOLO%E7%9B%AE%E5%BD%95.png" alt></p><p>├── data：主要是存放一些超参数的配置文件（这些文件（yaml文件）是用来配置训练集和测试集还有验证集的路径的，其中还包括目标检测的种类数和种类的名称）；还有一些官方提供测试的图片。如果是训练自己的数据集的话，那么就需要修改其中的yaml文件。但是自己的数据集不建议放在这个路径下面，而是建议把数据集放到yolov5项目的同级目录下面。</p><p>├── models：里面主要是一些网络构建的配置文件和函数，其中包含了该项目的四个不同的版本，分别为是s、m、l、x。从名字就可以看出，这几个版本的大小。他们的检测测度分别都是从快到慢，但是精确度分别是从低到高。这就是所谓的鱼和熊掌不可兼得。如果训练自己的数据集的话，就需要修改这里面相对应的yaml文件来训练自己模型。</p><p>├── utils：存放的是工具类的函数，里面有loss函数，metrics函数，plots函数等等。</p><p>├── weights：放置训练好的权重参数。</p><p>├── <a href="http://detect.py">detect.py</a>：利用训练好的权重参数进行目标检测，可以进行图像、视频和摄像头的检测。</p><p>├── <a href="http://train.py">train.py</a>：训练自己的数据集的函数。</p><p>├── <a href="http://test.py">test.py</a>：测试训练的结果的函数。</p><p>├──requirements.txt：这是一个文本文件，里面写着使用yolov5项目的环境依赖包的一些版本，可以利用该文本导入相应版本的包。</p><p>以上就是yolov5项目代码的整体介绍。我们训练和测试自己的数据集基本就是利用到如上的代码。</p><h5 id="3、环境依赖安装"><a class="header-anchor" href="#3、环境依赖安装">¶</a>3、环境依赖安装</h5><p>打开requirements.txt这个文件，可以看到里面有很多的依赖库和其对应的版本要求。我们打开pycharm的命令终端，在中输入如下的命令，就可以安装了。</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">pip install -r requirements.txt</code></pre><h3 id="二、数据集的准备和预训练权重的准备"><a class="header-anchor" href="#二、数据集的准备和预训练权重的准备">¶</a>二、数据集的准备和预训练权重的准备</h3><p>数据最好放在最外一级目录中，然后数据集的目录格式如下图所示。大家一定要严格按我的格式来，否则非常容易出问题。<br><font color="#0000FF">目录结构当中的VOCdevkit就是我的数据集</font></p><p><img src="/2022/111116121/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9B%AE%E5%BD%95.png" alt></p><h5 id="预训练权重"><a class="header-anchor" href="#预训练权重">¶</a>预训练权重</h5><p>一般为了缩短网络的训练时间，并达到更好的精度，我们一般加载预训练权重进行网络的训练。而yolov5的5.0版本给我们提供了几个预训练权重，我们可以对应我们不同的需求选择不同的版本的预训练权重。通过如下的图可以获得权重的名字和大小信息，可以预料的到，预训练权重越大，训练出来的精度就会相对来说越高，但是其检测的速度就会越慢。预训练权重可以通过这个网址进行下载，<a href="http://xn--yolov5s-e73k318ipqlslfg1fwix19biu0b9seda6019aga742nml2cia0817a06ywvj.pt">本次训练自己的数据集用的预训练权重为yolov5s.pt</a>。</p><p><a href="https://github.com/ultralytics/yolov5/releases">网址的底部</a></p><h3 id="三、训练自己的模型"><a class="header-anchor" href="#三、训练自己的模型">¶</a>三、训练自己的模型</h3><h5 id="1、修改数据配置文件"><a class="header-anchor" href="#1、修改数据配置文件">¶</a>1、修改数据配置文件</h5><p>    预训练模型和数据集都准备好了，就可以开始训练自己的yolov5目标检测模型了，训练目标检测模型需要修改两个yaml文件中的参数。一个是data目录下的相应的yaml文件，一个是model目录文件下的相应的yaml文件。</p><p>    修改data目录下的相应的yaml文件。找到目录下的voc.yaml文件，将该文件复制一份，将复制的文件重命名，最好和项目相关，这样方便后面操作。我这里修改为hat.yaml。该项目是对安全帽的识别。</p><p><img src="/2022/111116121/%E7%9B%AE%E5%BD%95%E6%9B%B4%E6%94%B9.png" alt></p><h6 id="data文件夹下hat-yaml文件的修改"><a class="header-anchor" href="#data文件夹下hat-yaml文件的修改">¶</a>data文件夹下hat.yaml文件的修改</h6><p>打开这个文件夹修改其中的参数，首先将箭头1中的那一行代码注释掉（我已经注释掉了），如果不注释这行代码训练的时候会报错；箭头2中需要将训练和测试的数据集的路径填上（最好要填绝对路径，有时候由目录结构的问题会莫名奇妙的报错）；箭头3中需要检测的类别数，我这里是识别安全帽和人，所以这里填写2；最后箭头4中填写需要识别的类别的名字（必须是英文，否则会乱码识别不出来）。到这里和data目录下的yaml文件就修改好了。</p><p><img src="/2022/111116121/data%E4%B8%8Byaml%E6%96%87%E4%BB%B6.png" alt></p><h6 id="models文件夹下hat-yaml文件的修改"><a class="header-anchor" href="#models文件夹下hat-yaml文件的修改">¶</a>models文件夹下hat.yaml文件的修改</h6><p>由于该项目使用的是yolov5s.pt这个预训练权重，所以要使用models目录下的yolov5s.yaml文件中的相应参数（因为不同的预训练权重对应着不同的网络层数，所以用错预训练权重会报错）。同上修改data目录下的yaml文件一样，我们最好将yolov5s.yaml文件复制一份，然后将其重命名，我将其重命名为hat.yaml。</p><p>打开yolov5_hat.yaml文件只需要修改如图中的数字就好了，这里是识别两个类别。</p><p><img src="/2022/111116121/models%E4%B8%8Byaml%E6%96%87%E4%BB%B6.png" alt></p><h6 id="train-py文件的相关参数的修改"><a class="header-anchor" href="#train-py文件的相关参数的修改">¶</a>train.py文件的相关参数的修改</h6><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""    opt模型主要参数解析：    --weights：初始化的权重文件的路径地址    --cfg：模型yaml文件的路径地址    --data：数据yaml文件的路径地址    --hyp：超参数文件路径地址    --epochs：训练轮次    --batch-size：喂入批次文件的多少    --img-size：输入图片尺寸    --rect:是否采用矩形训练，默认False    --resume:接着打断训练上次的结果接着训练    --nosave:不保存模型，默认False    --notest:不进行test，默认False    --noautoanchor:不自动调整anchor，默认False    --evolve:是否进行超参数进化，默认False    --bucket:谷歌云盘bucket，一般不会用到    --cache-images:是否提前缓存图片到内存，以加快训练速度，默认False    --image-weights：使用加权图像选择进行训练    --device:训练的设备，cpu；0(表示一个gpu设备cuda:0)；0,1,2,3(多个gpu设备)    --multi-scale:是否进行多尺度训练，默认False    --single-cls:数据集是否只有一个类别，默认False    --adam:是否使用adam优化器    --sync-bn:是否使用跨卡同步BN,在DDP模式使用    --local_rank：DDP参数，请勿修改    --workers：最大工作核心数    --project:训练模型的保存位置    --name：模型保存的目录名称    --exist-ok：模型目录是否存在，不存在就创建"""</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--weights'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'yolov5s.pt'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'initial weights path'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--cfg'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'model.yaml path'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--data'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'data/coco128.yaml'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'data.yaml path'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--hyp'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'data/hyp.scratch.yaml'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'hyperparameters path'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--epochs'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--batch-size'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'total batch size for all GPUs'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--img-size'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'[train, test] image sizes'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--rect'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'rectangular training'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--resume'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">'?'</span><span class="token punctuation">,</span> const<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'resume most recent training'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--nosave'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'only save final checkpoint'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--notest'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'only test final epoch'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--noautoanchor'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'disable autoanchor check'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--evolve'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'evolve hyperparameters'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--bucket'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'gsutil bucket'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--cache-images'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'cache images for faster training'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--image-weights'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'use weighted image selection for training'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--device'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'cuda device, i.e. 0 or 0,1,2,3 or cpu'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--multi-scale'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'vary img-size +/- 50%%'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--single-cls'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'train multi-class data as single-class'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--adam'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'use torch.optim.Adam() optimizer'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--sync-bn'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'use SyncBatchNorm, only available in DDP mode'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--local_rank'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'DDP parameter, do not modify'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--workers'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'maximum number of dataloader workers'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--project'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'runs/train'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'save to project/name'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--entity'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'W&amp;B entity'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--name'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'exp'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'save to project/name'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--exist-ok'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'existing project/name ok, do not increment'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--quad'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'quad dataloader'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--linear-lr'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'linear LR'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--label-smoothing'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Label smoothing epsilon'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--upload_dataset'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Upload dataset as W&amp;B artifact table'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--bbox_interval'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Set bounding-box image logging interval for W&amp;B'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--save_period'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Log model after every "save_period" epoch'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--artifact_alias'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"latest"</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'version of dataset artifact to be used'</span><span class="token punctuation">)</span>    opt <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>训练自己的模型需要修改如下几个参数就可以训练了。首先将weights权重的路径填写到对应的参数里面，然后将修好好的models模型的yolov5s.yaml文件路径填写到相应的参数里面，最后将data数据的hat.yaml文件路径填写到相对于的参数里面。这几个参数就必须要修改的参数。</p><pre class="language-python" data-language="python"><code class="language-python">parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--weights'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'weights/yolov5s.pt'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'initial weights path'</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--cfg'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'models/yolov5s_hat.yaml'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'model.yaml path'</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--data'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'data/hat.yaml'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'data.yaml path'</span><span class="token punctuation">)</span></code></pre><p>还有几个需要根据自己的需求来更改的参数：</p><p>首先是模型的训练轮次，这里是训练的300轮。(我的垃圾戴尔G3[GPU GTX1650]训练40轮，搞了一天,)</p><pre class="language-python" data-language="python"><code class="language-python">parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--epochs'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span></code></pre><p><font color="#FF0000">如果出现 out of memory 表示显存溢出了， 需要下调以下两个参数</font></p><pre class="language-python" data-language="python"><code class="language-python">parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--batch-size'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'total batch size for all GPUs'</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--workers'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'maximum number of dataloader workers'</span><span class="token punctuation">)</span></code></pre><p><font color="#FF0000">如果出现OSError：[WinError 1455] 页面文件太小，无法完成操作</font></p><p>可以根据如下的操作来修改，在utils路径下找到datasets.py这个文件，将里面的第81行里面的参数nw改完0就可以了。</p><p>🍑<br>🍒<br>🍓<br>🍔<br>🍕<br>🍖<br>🍗<br>🍘<br>🍙<br>🍚<br>🍛</p><p>然后运行train.py就可以训练模型了</p><h3 id="四，使用tensorboard查看参数"><a class="header-anchor" href="#四，使用tensorboard查看参数">¶</a>四，使用tensorboard查看参数</h3><p>yolov5里面有写好的tensorbord函数，可以运行命令就可以调用tensorbord，然后查看tensorbord了。首先打开pycharm的命令控制终端，输入如下命令，就会出现一个网址地址，将那行网址复制下来到浏览器打开就可以看到训练的过程了</p><p>注意需要切换到pytorch虚拟环境下</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">tensorboard --logdir&#x3D;runs&#x2F;train</code></pre><p><img src="/2022/111116121/tensorboard%E9%9D%A2%E6%9D%BF.png" alt></p><h3 id="五、训练完成之后，会出现一个runs的文件夹"><a class="header-anchor" href="#五、训练完成之后，会出现一个runs的文件夹">¶</a>五、训练完成之后，会出现一个runs的文件夹</h3><p>等到数据训练好了以后，就会在主目录下产生一个run文件夹，在run/train/exp/weights目录下会产生两个权重文件，一个是最后一轮的权重文件，一个是最好的权重文件，一会我们就要利用这个最好的权重文件来做推理测试。除此以外还会产生一些验证文件的图片等一些文件</p><p>找到detect.py文件<br>然后找到主函数的入口，这里面有模型的主要参数。模型的主要参数解析如下所示。</p><pre class="language-python" data-language="python"><code class="language-python">f __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""--weights:权重的路径地址--source:测试数据，可以是图片/视频路径，也可以是'0'(电脑自带摄像头),也可以是rtsp等视频流--output:网络预测之后的图片/视频的保存路径--img-size:网络输入图片大小--conf-thres:置信度阈值--iou-thres:做nms的iou阈值--device:是用GPU还是CPU做推理--view-img:是否展示预测之后的图片/视频，默认False--save-txt:是否将预测的框坐标以txt文件形式保存，默认False--classes:设置只保留某一部分类别，形如0或者0 2 3--agnostic-nms:进行nms是否也去除不同类别之间的框，默认False--augment:推理的时候进行多尺度，翻转等操作(TTA)推理--update:如果为True，则对所有模型进行strip_optimizer操作，去除pt文件中的优化器等信息，默认为False--project：推理的结果保存在runs/detect目录下--name：结果保存的文件夹名称"""</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--weights'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'yolov5s.pt'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'model.pt path(s)'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--source'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'data/images'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'source'</span><span class="token punctuation">)</span>  <span class="token comment"># file/folder, 0 for webcam</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--img-size'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'inference size (pixels)'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--conf-thres'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'object confidence threshold'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--iou-thres'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">0.45</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'IOU threshold for NMS'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--device'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'cuda device, i.e. 0 or 0,1,2,3 or cpu'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--view-img'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'display results'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--save-txt'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'save results to *.txt'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--save-conf'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'save confidences in --save-txt labels'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--nosave'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'do not save images/videos'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--classes'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'filter by class: --class 0, or --class 0 2 3'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--agnostic-nms'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'class-agnostic NMS'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--augment'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'augmented inference'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--update'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'update all models'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--project'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'runs/detect'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'save results to project/name'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--name'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'exp'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'save results to project/name'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--exist-ok'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'existing project/name ok, do not increment'</span><span class="token punctuation">)</span>    opt <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这里需要将刚刚训练好的最好的权重传入到推理函数中去。然后就可以对图像视频进行推理了。</p> <pre class="language-python" data-language="python"><code class="language-python">parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--weights'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'runs/train/exp/weights/best.pt'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'model.pt path(s)'</span><span class="token punctuation">)</span></code></pre><p>对图片进行测试推理，将如下参数修改成图片的路径，然后运行detect.py就可以进行测试了。</p> <pre class="language-python" data-language="python"><code class="language-python">parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--source'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'000295.jpg'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'source'</span><span class="token punctuation">)</span> </code></pre><p>在runs下有detect文件夹，即为运行的结果</p><p>对视频进行测试，和如上的图片的测试是一样的，只不过是将图片的路径改为视频的路径而已。利用摄像头进行测试只需将路径改写为0就好了。但是好像还是会报错，这一点卡了我很久。报错如下。</p><p>打开datasets文件，找到第279行代码，给两个url参数加上str就可以了，如图所示，就可以完美运行电脑的摄像头了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token string">'youtube.com/'</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">'youtu.be/'</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><font></font></font>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
          <category> 目标检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 网络模型 </tag>
            
            <tag> 模型训练 </tag>
            
            <tag> 目标检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标检测--利用labelimg制作深度学习数据集</title>
      <link href="/2022/110916121.html"/>
      <url>/2022/110916121.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、使用labelImg标记数据"><a class="header-anchor" href="#一、使用labelImg标记数据">¶</a>一、使用labelImg标记数据</h3><p>Labelimg是一款开源的数据标注工具，可以标注三种格式。</p><pre><code>   1  VOC标签格式，保存为xml文件。   2  yolo标签格式，保存为txt文件。   3 createML标签格式，保存为json格式。</code></pre><h3 id="二、labelimg的安装"><a class="header-anchor" href="#二、labelimg的安装">¶</a>二、labelimg的安装</h3><p>这里主要讲的是在window系统中的安装，首先打开cmd命令行（快捷键：win+R）。进入cmd命令行控制台。输入如下的命令：</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">pip install labelimg -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</code></pre><p>行如上命令后，系统就会自动下载labelimg相关的依赖。由于这是一个很轻量的工具，所以下载起来很快，当出现如下红色框框中的告诉我们成功安装的时候，说明labelimg安装成功了。<br><img src="/2022/110916121/%E5%AE%89%E8%A3%85labelimg.png" alt></p><h3 id="三、数据准备"><a class="header-anchor" href="#三、数据准备">¶</a>三、数据准备</h3><p>首先这里需要准备我们需要打标注的数据集。这里我建议新建一个名为VOC2007的文件夹（这个是约定俗成，不这么做也行），里面创建一个名为JPEGImages的文件夹存放我们需要打标签的图片文件；再创建一个名为Annotations存放标注的标签文件；最后创建一个名为 predefined_classes.txt 的txt文件来存放所要标注的类别名称。</p><p>VOC2007的目录结构为：</p><p>├── VOC2007<br>│├── JPEGImages  存放需要打标签的图片文件<br>│├── Annotations  存放标注的标签文件<br>│├── predefined_classes.txt  定义自己要标注的所有类别（这个文件可有可无，但是在我们定义类别比较多的时候，最好有这个创建一个这样的txt文件来存放类别）</p><p>具体查看：E:\DeepLearning\BinCode\VOCdevkit\VOC2007</p><p><img src="/2022/110916121/%E6%A0%87%E6%B3%A8%E8%AE%BE%E7%BD%AE.png" alt></p><p>打开cmd命令终端（快捷键：win+R）。进入到刚刚创建的这个VOC2007路径（这个很重要，涉及到能不能利用predefined_classes.txt 这个txt文件中定义的类别，我在这里卡了很久，一度以为不能显示txt文件中定义的类别是我安装有问题）。执行如图中的命令进入到VOC2007路径下（每个人的路径都不一样，按个人的路径去写）如下图所示：可以看到进入到相应的目录了。</p><p><img src="/2022/110916121/%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.png" alt></p><p>输入如下的命令打开labelimg。这个命令的意思是打开labelimg工具；打开JPEGImage文件夹，初始化predefined_classes.txt里面定义的类。</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">labelimg JPEGImages predefined_classes.txt</code></pre><p><a href="https://blog.csdn.net/didiaopao/article/details/119808973">学习路径</a></p></font>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 网络模型 </tag>
            
            <tag> 模型训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch学习4-使用GPU训练模型</title>
      <link href="/2022/110816121.html"/>
      <url>/2022/110816121.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h4 id="一、第一种方式使用GPU训练模型"><a class="header-anchor" href="#一、第一种方式使用GPU训练模型">¶</a>一、第一种方式使用GPU训练模型</h4><h5 id="方法：在损失函数，网络模型，数据-imgs-targets-上添加-cuda"><a class="header-anchor" href="#方法：在损失函数，网络模型，数据-imgs-targets-上添加-cuda">¶</a>方法：在损失函数，网络模型，数据(imgs, targets) 上添加 .cuda()</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> time<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token comment"># 1、准备数据集(参数当中需要将其转换为tensor类型)</span><span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoadertrain_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                          download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 2、查看训练数据集 测试数据集的大小</span>train_data_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_data<span class="token punctuation">)</span>test_data_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_data<span class="token punctuation">)</span><span class="token comment"># 下面是字符串的替换方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练数据集的大小为：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>train_data_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试数据集的大小为：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>test_data_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 训练数据集的大小为：50000</span><span class="token comment"># 测试数据集的大小为：10000</span><span class="token comment"># 3、使用DataLoader加载数据集</span>train_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>test_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token comment"># 4、引入搭建好的神经网络： model.py</span><span class="token comment"># 使用了 from model import *</span><span class="token keyword">class</span> <span class="token class-name">Bin</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Bin<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>model <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token builtin">bin</span> <span class="token operator">=</span> Bin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将网络模型转移到cuda上去</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">bin</span> <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 5、构建损失函数</span>loss_fn <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    loss_fn <span class="token operator">=</span> loss_fn<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 6、构建优化器</span><span class="token comment"># 学习速率</span><span class="token comment"># learning_rate = 0.01</span><span class="token comment"># 也有下面的写法</span><span class="token comment"># 1e-2 = (10) ^ (-2) = 0.01</span>learning_rate <span class="token operator">=</span> <span class="token number">1e-2</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span><span class="token comment"># 7、设置训练网络当中的一些参数</span><span class="token comment"># 训练的次数</span>total_train_step <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 测试的次数</span>total_test_step <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 训练的轮数</span>epoch <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 8、循环进行训练</span><span class="token comment"># 在训练的过程当中添加tensorboard</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"./logs_train"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第 &#123;&#125; 轮训练开始"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 训练步骤开始</span>    <span class="token builtin">bin</span><span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> train_dataloader<span class="token punctuation">:</span>        imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data        <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            imgs <span class="token operator">=</span> imgs<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            targets <span class="token operator">=</span> targets<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>        loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>output<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>        <span class="token comment"># 优化器优化模型</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        total_train_step <span class="token operator">=</span> total_train_step <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span> total_train_step <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练次数: &#123;&#125; ， loss: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_train_step<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 将训练过程当中的额loss添加到tensorboard上</span>            writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"train_loss"</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> total_train_step<span class="token punctuation">)</span>    <span class="token comment"># 测试步骤开始</span>    <span class="token builtin">bin</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    total_test_loss <span class="token operator">=</span> <span class="token number">0</span>    total_accuracy <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 不需要进行梯度处理</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> data <span class="token keyword">in</span> test_dataloader<span class="token punctuation">:</span>            imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data            <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                imgs <span class="token operator">=</span> imgs<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>                targets <span class="token operator">=</span> targets<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            outputs <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>            loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>            total_test_loss <span class="token operator">=</span> total_test_loss <span class="token operator">+</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            accuracy <span class="token operator">=</span> <span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> targets<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            total_accuracy <span class="token operator">=</span> total_accuracy <span class="token operator">+</span> accuracy    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"整体测试集上的loss: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_test_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"整体测试集上的正确率： &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_accuracy<span class="token operator">/</span>test_data_size<span class="token punctuation">)</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"test_loss"</span><span class="token punctuation">,</span> total_test_loss<span class="token punctuation">,</span> total_test_step<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"test_accuracy"</span><span class="token punctuation">,</span> total_accuracy<span class="token operator">/</span>test_data_size<span class="token punctuation">,</span> total_test_step<span class="token punctuation">)</span>    total_test_step <span class="token operator">=</span> total_test_step <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment"># 在这里保存每一轮训练的结果</span>    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">,</span> <span class="token string">"bin_&#123;&#125;.pth"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"模型已保存"</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="一、第二种方式使用GPU训练模型"><a class="header-anchor" href="#一、第二种方式使用GPU训练模型">¶</a>一、第二种方式使用GPU训练模型</h4><h5 id="方法：添加"><a class="header-anchor" href="#方法：添加">¶</a>方法：添加</h5><p>.to(device)<br>Device = torch.device(“cpu”)<br>Torch.device(“cuda”)<br>Torch.device(“cuda:0”)<br>Torch.device(“cuda:1”)</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> time<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token comment"># 1、准备数据集(参数当中需要将其转换为tensor类型)</span><span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token comment"># 定义训练的设备</span><span class="token comment"># device = torch.device("cpu")</span><span class="token comment"># device = torch.device("cuda:0")</span><span class="token comment"># device = torch.device("cude" if torch.cuda.is_available() else "cpu") 语法糖的格式</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span><span class="token punctuation">)</span>train_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                          download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 2、查看训练数据集 测试数据集的大小</span>train_data_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_data<span class="token punctuation">)</span>test_data_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_data<span class="token punctuation">)</span><span class="token comment"># 下面是字符串的替换方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练数据集的大小为：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>train_data_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试数据集的大小为：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>test_data_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 训练数据集的大小为：50000</span><span class="token comment"># 测试数据集的大小为：10000</span><span class="token comment"># 3、使用DataLoader加载数据集</span>train_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>test_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token comment"># 4、引入搭建好的神经网络： model.py</span><span class="token comment"># 使用了 from model import *</span><span class="token keyword">class</span> <span class="token class-name">Bin</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Bin<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>model <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token builtin">bin</span> <span class="token operator">=</span> Bin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将网络模型转移到设备上去</span><span class="token builtin">bin</span> <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token comment"># 5、构建损失函数</span>loss_fn <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_fn <span class="token operator">=</span> loss_fn<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token comment"># 6、构建优化器</span><span class="token comment"># 学习速率</span><span class="token comment"># learning_rate = 0.01</span><span class="token comment"># 也有下面的写法</span><span class="token comment"># 1e-2 = (10) ^ (-2) = 0.01</span>learning_rate <span class="token operator">=</span> <span class="token number">1e-2</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span><span class="token comment"># 7、设置训练网络当中的一些参数</span><span class="token comment"># 训练的次数</span>total_train_step <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 测试的次数</span>total_test_step <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 训练的轮数</span>epoch <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 8、循环进行训练</span><span class="token comment"># 在训练的过程当中添加tensorboard</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"./logs_train"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第 &#123;&#125; 轮训练开始"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 训练步骤开始</span>    <span class="token builtin">bin</span><span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> train_dataloader<span class="token punctuation">:</span>        imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data        imgs <span class="token operator">=</span> imgs<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        targets <span class="token operator">=</span> targets<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        output <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>        loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>output<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>        <span class="token comment"># 优化器优化模型</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        total_train_step <span class="token operator">=</span> total_train_step <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span> total_train_step <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练次数: &#123;&#125; ， loss: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_train_step<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 将训练过程当中的额loss添加到tensorboard上</span>            writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"train_loss"</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> total_train_step<span class="token punctuation">)</span>    <span class="token comment"># 测试步骤开始</span>    <span class="token builtin">bin</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    total_test_loss <span class="token operator">=</span> <span class="token number">0</span>    total_accuracy <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 不需要进行梯度处理</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> data <span class="token keyword">in</span> test_dataloader<span class="token punctuation">:</span>            imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data            imgs <span class="token operator">=</span> imgs<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            targets <span class="token operator">=</span> targets<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>            outputs <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>            loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>            total_test_loss <span class="token operator">=</span> total_test_loss <span class="token operator">+</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            accuracy <span class="token operator">=</span> <span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> targets<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            total_accuracy <span class="token operator">=</span> total_accuracy <span class="token operator">+</span> accuracy    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"整体测试集上的loss: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_test_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"整体测试集上的正确率： &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_accuracy<span class="token operator">/</span>test_data_size<span class="token punctuation">)</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"test_loss"</span><span class="token punctuation">,</span> total_test_loss<span class="token punctuation">,</span> total_test_step<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"test_accuracy"</span><span class="token punctuation">,</span> total_accuracy<span class="token operator">/</span>test_data_size<span class="token punctuation">,</span> total_test_step<span class="token punctuation">)</span>    total_test_step <span class="token operator">=</span> total_test_step <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment"># 在这里保存每一轮训练的结果</span>    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">,</span> <span class="token string">"bin_&#123;&#125;.pth"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"模型已保存"</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></font>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 网络模型 </tag>
            
            <tag> 模型训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch学习6-完整的模型训练塔路</title>
      <link href="/2022/110816120.html"/>
      <url>/2022/110816120.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、模型的使用"><a class="header-anchor" href="#一、模型的使用">¶</a>一、模型的使用</h3><p>首先创建模型的py文件</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token comment"># 搭建神经网络</span><span class="token keyword">class</span> <span class="token class-name">Bin</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Bin<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>model <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token builtin">bin</span> <span class="token operator">=</span> Bin<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    output <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><h5 id="一套完整的模型训练过程"><a class="header-anchor" href="#一套完整的模型训练过程">¶</a>一套完整的模型训练过程</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token keyword">from</span> model <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 1、准备数据集(参数当中需要将其转换为tensor类型)</span><span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoadertrain_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                          download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 2、查看训练数据集 测试数据集的大小</span>train_data_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_data<span class="token punctuation">)</span>test_data_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_data<span class="token punctuation">)</span><span class="token comment"># 下面是字符串的替换方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练数据集的大小为：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>train_data_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试数据集的大小为：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>test_data_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 训练数据集的大小为：50000</span><span class="token comment"># 测试数据集的大小为：10000</span><span class="token comment"># 3、使用DataLoader加载数据集</span>train_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>test_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token comment"># 4、引入搭建好的神经网络： model.py</span><span class="token comment"># 使用了 from model import *</span><span class="token builtin">bin</span> <span class="token operator">=</span> Bin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 5、构建损失函数</span>loss_fn <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 6、构建优化器</span><span class="token comment"># 学习速率</span><span class="token comment"># learning_rate = 0.01</span><span class="token comment"># 也有下面的写法</span><span class="token comment"># 1e-2 = (10) ^ (-2) = 0.01</span>learning_rate <span class="token operator">=</span> <span class="token number">1e-2</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span><span class="token comment"># 7、设置训练网络当中的一些参数</span><span class="token comment"># 训练的次数</span>total_train_step <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 测试的次数</span>total_test_step <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 训练的轮数</span>epoch <span class="token operator">=</span> <span class="token number">10</span><span class="token comment"># 8、循环进行训练</span><span class="token comment"># 在训练的过程当中添加tensorboard</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"./logs_train"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第 &#123;&#125; 轮训练开始"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 训练步骤开始</span>    <span class="token builtin">bin</span><span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> train_dataloader<span class="token punctuation">:</span>        imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data        output <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>        loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>output<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>        <span class="token comment"># 优化器优化模型</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        total_train_step <span class="token operator">=</span> total_train_step <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span> total_train_step <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练次数: &#123;&#125; ， loss: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_train_step<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 将训练过程当中的额loss添加到tensorboard上</span>            writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"train_loss"</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> total_train_step<span class="token punctuation">)</span>    <span class="token comment"># 测试步骤开始</span>    <span class="token builtin">bin</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    total_test_loss <span class="token operator">=</span> <span class="token number">0</span>    total_accuracy <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 不需要进行梯度处理</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> data <span class="token keyword">in</span> test_dataloader<span class="token punctuation">:</span>            imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data            outputs <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>            loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>            total_test_loss <span class="token operator">=</span> total_test_loss <span class="token operator">+</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            accuracy <span class="token operator">=</span> <span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> targets<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            total_accuracy <span class="token operator">=</span> total_accuracy <span class="token operator">+</span> accuracy    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"整体测试集上的loss: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_test_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"整体测试集上的正确率： &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_accuracy<span class="token operator">/</span>test_data_size<span class="token punctuation">)</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"test_loss"</span><span class="token punctuation">,</span> total_test_loss<span class="token punctuation">,</span> total_test_step<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"test_accuracy"</span><span class="token punctuation">,</span> total_accuracy<span class="token operator">/</span>test_data_size<span class="token punctuation">,</span> total_test_step<span class="token punctuation">)</span>    total_test_step <span class="token operator">=</span> total_test_step <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment"># 在这里保存每一轮训练的结果</span>    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">,</span> <span class="token string">"bin_&#123;&#125;.pth"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"模型已保存"</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="在tensorboard上的效果如图"><a class="header-anchor" href="#在tensorboard上的效果如图">¶</a>在tensorboard上的效果如图</h5><p><img src="/2022/110816120/%E5%AE%8C%E6%95%B4%E7%9A%84%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E6%B5%81%E7%A8%8B.png" alt></p></font>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 网络模型 </tag>
            
            <tag> 模型训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch学习5-现有模型的修改</title>
      <link href="/2022/110816119.html"/>
      <url>/2022/110816119.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、模型的使用"><a class="header-anchor" href="#一、模型的使用">¶</a>一、模型的使用</h3><h5 id="查看vgg16的模型结构"><a class="header-anchor" href="#查看vgg16的模型结构">¶</a>查看vgg16的模型结构</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchvision<span class="token comment"># train_data = torchvision.dataset.ImageNet("./data_image_net", split='train', download=True,</span><span class="token comment">#                                           transform=torchvision.transforms.ToTensor())</span><span class="token keyword">from</span> torch <span class="token keyword">import</span> nnvgg16_false <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>vgg16<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>vgg16_true <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>vgg16<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># vgg16是已经训练好了网络模型架构，相比于nn_module文件当中的模型架构，他本身已经封装了模型的结构</span><span class="token keyword">print</span><span class="token punctuation">(</span>vgg16_true<span class="token punctuation">)</span><span class="token comment"># 打印输出VGG的模型结构</span><span class="token comment"># VGG(</span><span class="token comment">#   (features): Sequential(</span><span class="token comment">#     (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (1): ReLU(inplace=True)</span><span class="token comment">#     (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (3): ReLU(inplace=True)</span><span class="token comment">#     (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (6): ReLU(inplace=True)</span><span class="token comment">#     (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (8): ReLU(inplace=True)</span><span class="token comment">#     (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (11): ReLU(inplace=True)</span><span class="token comment">#     (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (13): ReLU(inplace=True)</span><span class="token comment">#     (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (15): ReLU(inplace=True)</span><span class="token comment">#     (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (18): ReLU(inplace=True)</span><span class="token comment">#     (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (20): ReLU(inplace=True)</span><span class="token comment">#     (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (22): ReLU(inplace=True)</span><span class="token comment">#     (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (25): ReLU(inplace=True)</span><span class="token comment">#     (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (27): ReLU(inplace=True)</span><span class="token comment">#     (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (29): ReLU(inplace=True)</span><span class="token comment">#     (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#   )</span><span class="token comment">#   (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))</span><span class="token comment">#   (classifier): Sequential(</span><span class="token comment">#     (0): Linear(in_features=25088, out_features=4096, bias=True)</span><span class="token comment">#     (1): ReLU(inplace=True)</span><span class="token comment">#     (2): Dropout(p=0.5, inplace=False)</span><span class="token comment">#     (3): Linear(in_features=4096, out_features=4096, bias=True)</span><span class="token comment">#     (4): ReLU(inplace=True)</span><span class="token comment">#     (5): Dropout(p=0.5, inplace=False)</span><span class="token comment">#     (6): Linear(in_features=4096, out_features=1000, bias=True)</span><span class="token comment">#   )</span><span class="token comment"># )</span>train_data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                          transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                          download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 对vgg16网络模型进行修改</span>vgg16_true<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"add_linear"</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>vgg16_true<span class="token punctuation">.</span>classifier<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"add_linear"</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>vgg16_true<span class="token punctuation">)</span><span class="token comment"># VGG(</span><span class="token comment">#   (features): Sequential(</span><span class="token comment">#     (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (1): ReLU(inplace=True)</span><span class="token comment">#     (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (3): ReLU(inplace=True)</span><span class="token comment">#     (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (6): ReLU(inplace=True)</span><span class="token comment">#     (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (8): ReLU(inplace=True)</span><span class="token comment">#     (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (11): ReLU(inplace=True)</span><span class="token comment">#     (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (13): ReLU(inplace=True)</span><span class="token comment">#     (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (15): ReLU(inplace=True)</span><span class="token comment">#     (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (18): ReLU(inplace=True)</span><span class="token comment">#     (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (20): ReLU(inplace=True)</span><span class="token comment">#     (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (22): ReLU(inplace=True)</span><span class="token comment">#     (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (25): ReLU(inplace=True)</span><span class="token comment">#     (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (27): ReLU(inplace=True)</span><span class="token comment">#     (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><span class="token comment">#     (29): ReLU(inplace=True)</span><span class="token comment">#     (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#   )</span><span class="token comment">#   (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))</span><span class="token comment">#   (classifier): Sequential(</span><span class="token comment">#     (0): Linear(in_features=25088, out_features=4096, bias=True)</span><span class="token comment">#     (1): ReLU(inplace=True)</span><span class="token comment">#     (2): Dropout(p=0.5, inplace=False)</span><span class="token comment">#     (3): Linear(in_features=4096, out_features=4096, bias=True)</span><span class="token comment">#     (4): ReLU(inplace=True)</span><span class="token comment">#     (5): Dropout(p=0.5, inplace=False)</span><span class="token comment">#     (6): Linear(in_features=4096, out_features=1000, bias=True)</span><span class="token comment"># 在原有模型的基础上添加的步骤</span><span class="token comment">#     (add_linear): Linear(in_features=1000, out_features=10, bias=True)</span><span class="token comment">#   )</span><span class="token comment"># 在原有模型的基础上添加的步骤</span><span class="token comment">#   (add_linear): Linear(in_features=1000, out_features=10, bias=True)</span><span class="token comment"># )</span></code></pre><h3 id="二、模型的保存与加载"><a class="header-anchor" href="#二、模型的保存与加载">¶</a>二、模型的保存与加载</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">################################## 模型的保存 #################################</span><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvisionvgg16 <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>vgg16<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 保存的方式1</span><span class="token comment"># 直接保存到当前目录下，保存的有模型的结构/参数/</span><span class="token comment"># 然后在model_save_load当中进行模型的加载</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>vgg16<span class="token punctuation">,</span> <span class="token string">"vgg16_method1.pth"</span><span class="token punctuation">)</span><span class="token comment"># 保存方式2</span><span class="token comment"># 保留了模型的参数到字典当中（官网推荐）</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>vgg16<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"vgg16_method2.pth"</span><span class="token punctuation">)</span><span class="token comment">################################## 模型的加载###################################</span><span class="token keyword">import</span> torch<span class="token comment"># 方式1-->模型的加载</span><span class="token keyword">import</span> torchvisionmodel <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"vgg16_method1.pth"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token comment"># 方式2</span>vgg16 <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>vgg16<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>vgg16<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"vgg_method2.pth"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>vgg16<span class="token punctuation">)</span></code></pre></font>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 网络模型 </tag>
            
            <tag> VGG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch学习3-神经网络的搭建</title>
      <link href="/2022/110716118.html"/>
      <url>/2022/110716118.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h4 id="一、相关地址"><a class="header-anchor" href="#一、相关地址">¶</a>一、相关地址</h4><h5 id="神经网络NN-Neural-Network"><a class="header-anchor" href="#神经网络NN-Neural-Network">¶</a>神经网络NN[Neural Network]</h5><p><a href="https://pytorch.org/docs/stable/nn.html">PyTorch的nn Api</a></p><h4 id="二、torch-nn-Module-对所有的神经网络构成最基本的类"><a class="header-anchor" href="#二、torch-nn-Module-对所有的神经网络构成最基本的类">¶</a>二、torch.nn.Module 对所有的神经网络构成最基本的类</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>上述代码当中的神经网络包括两个过程：forward函数对x首先进行卷积1，卷积1的处理过程在__init__函数当中定义nn.Conv2d(1, 20, 5)，然后对其进行非线性的处理relu，再来一次卷积2和非线性relu，最后返回结果。</p><p><img src="/2022/110716118/forward%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8.png" alt></p><h4 id="三、卷积操作"><a class="header-anchor" href="#三、卷积操作">¶</a>三、卷积操作</h4><p><img src="/2022/110716118/%E5%8D%B7%E7%A7%AF%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 可以手动算一算</span><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>kernel <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>kernel<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment"># torch.Size([5, 5])</span><span class="token comment"># torch.Size([3, 3])</span><span class="token comment"># 进行变换为四维的矩阵</span><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>kernel <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>kernel<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>kernel<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment"># torch.Size([1, 1, 5, 5])</span><span class="token comment"># torch.Size([1, 1, 3, 3])</span><span class="token comment"># conv2d：表示2维卷积     conv3d：表示3维卷积</span><span class="token comment"># conv2d表示进行卷积操作 stride为步进值</span>output <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> kernel<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token comment"># tensor([[[[10, 12, 12],</span><span class="token comment">#           [18, 16, 16],</span><span class="token comment">#           [13,  9,  3]]]])</span>output2 <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> kernel<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output2<span class="token punctuation">)</span><span class="token comment"># tensor([[[[10, 12],</span><span class="token comment">#           [13,  3]]]])</span><span class="token comment"># padding 表示在输入矩阵的外围填充一圈,默认填充的是0</span>output3 <span class="token operator">=</span> F<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> kernel<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output3<span class="token punctuation">)</span><span class="token comment"># tensor([[[[ 1,  3,  4, 10,  8],</span><span class="token comment">#           [ 5, 10, 12, 12,  6],</span><span class="token comment">#           [ 7, 18, 16, 16,  8],</span><span class="token comment">#           [11, 13,  9,  3,  4],</span><span class="token comment">#           [14, 13,  9,  7,  4]]]])</span></code></pre><p><img src="/2022/110716118/%E5%8D%B7%E7%A7%AF%E6%93%8D%E4%BD%9C1.png" alt></p><p><a href="https://github.com/vdumoulin/conv_arithmetic/blob/master/README.md">官网上的卷积流程</a></p><p>卷积流程如下：<br><img src="/2022/110716118/%E5%8D%B7%E7%A7%AF%E5%8A%A8%E7%94%BB.png" alt></p><p><img src="/2022/110716118/%E5%8D%B7%E7%A7%AF%E5%8F%82%E6%95%B0.png" alt></p><h4 id="四、卷积数据集"><a class="header-anchor" href="#四、卷积数据集">¶</a>四、卷积数据集</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Conv2d<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriterdataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">BinConv2d</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>BinConv2d<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> xbinConv2d <span class="token operator">=</span> BinConv2d<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>binConv2d<span class="token punctuation">)</span>step <span class="token operator">=</span> <span class="token number">0</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">)</span><span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>    imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data    output <span class="token operator">=</span> binConv2d<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>    <span class="token comment"># 将图像放入到定义好的卷积处理流程当中进行处理</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>imgs<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>targets<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment"># torch.Size([64, 3, 32, 32])</span>    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> imgs<span class="token punctuation">,</span> step<span class="token punctuation">)</span>    <span class="token comment"># torch.Size([64, 6, 30, 30]) -> [xxx, 3, 30, 30]</span>    <span class="token comment"># 原始的output格式torch.Size([64, 6, 30, 30])，但是需要转化为[xxx, 3, 30, 30]</span>    output <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span> step<span class="token punctuation">)</span>    step <span class="token operator">=</span> step <span class="token operator">+</span> <span class="token number">1</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>卷积后的效果图：<br><img src="/2022/110716118/%E5%8D%B7%E7%A7%AF%E5%90%8E%E7%9A%84tensorboard.png" alt></p><h4 id="五、池化层Pooling-layers"><a class="header-anchor" href="#五、池化层Pooling-layers">¶</a>五、池化层Pooling layers</h4><p>maxpooling: 最大池化的作用：保留原始的特征的同时，也需要降低维度。换而言之就是对其进行压缩，我们看的视频是1080P的，池化之后是720p也可以满足对视频的需求，但是其降低了数据的计算量。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> MaxPool2d<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriterdataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                       transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token comment"># input = torch.tensor([[1, 2, 0, 3, 1],</span><span class="token comment">#                       [0, 1, 2, 3, 1],</span><span class="token comment">#                       [1, 2, 1, 0, 0],</span><span class="token comment">#                       [5, 2, 3, 1, 1],</span><span class="token comment">#                       [2, 1, 0, 1, 1]], dtype=torch.float32)</span><span class="token comment">#</span><span class="token comment"># input = torch.reshape(input, (-1, 1, 5, 5))</span><span class="token comment"># print(input.shape)</span><span class="token keyword">class</span> <span class="token class-name">BinMaxPool</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>BinMaxPool<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># ceil_mode 表示：如果匹配的过程中有空洞的地方，是否需要跳过</span>        <span class="token comment"># kernel_size 表示： 每一次池化核走的时候，走3步</span>        self<span class="token punctuation">.</span>maxpool1 <span class="token operator">=</span> MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> ceil_mode<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>maxpool1<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> outputbinmaxpool <span class="token operator">=</span> BinMaxPool<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># output = binmaxpool(input)</span><span class="token comment"># print(output)</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"./logs_maxpool"</span><span class="token punctuation">)</span>step <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>    imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data    <span class="token comment"># setp对应上每一步的输入和输出图像</span>    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> imgs<span class="token punctuation">,</span> step<span class="token punctuation">)</span>    output <span class="token operator">=</span> binmaxpool<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span> step<span class="token punctuation">)</span>    step <span class="token operator">=</span> step <span class="token operator">+</span> <span class="token number">1</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/2022/110716118/%E6%9C%80%E5%A4%A7%E6%B1%A0%E5%8C%96%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt></p><h4 id="六、非线性激活relu处理和sigmoid处理"><a class="header-anchor" href="#六、非线性激活relu处理和sigmoid处理">¶</a>六、非线性激活relu处理和sigmoid处理</h4><p>非线性激活函数实际上是给模型增强非线性的表达能力或者因素，有了非线性函数模型的表达能力就会更强。整个模型就像活了一样，而不是像机器一样只会做一些单一的线性操作。<br>没有激活函数的神经网络实际上是线性可加的，那么多线性层其实可以归为一层，只具有线性的神经网络表达能力及其有限。</p><p><img src="/2022/110716118/relu%E6%95%88%E6%9E%9C.png" alt></p><p>注意：批的大小就是batch_size，每取一次就是一个step，step与batch_size是有关系的，因为通常数据集都很大，没有办法一次性全部取出来，单个单个的取浪费时间（与IO操作有关系），所有按照批处理的方式进行。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> ReLU<span class="token punctuation">,</span> Sigmoid<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>   <span class="token comment"># 将数据转化为满足格式的</span>dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">"./data"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                       transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">BinReLU</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>BinReLU<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu1 <span class="token operator">=</span> ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>sigmoid11 <span class="token operator">=</span> Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>sigmoid11<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> outputbinRelu <span class="token operator">=</span> BinReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>output <span class="token operator">=</span> binRelu<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"./logs_relu"</span><span class="token punctuation">)</span>step <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>    imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">,</span> global_step<span class="token operator">=</span>step<span class="token punctuation">)</span>    output <span class="token operator">=</span> binRelu<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span> step<span class="token punctuation">)</span>    step <span class="token operator">+=</span> <span class="token number">1</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="七、CIFAR10-model结构"><a class="header-anchor" href="#七、CIFAR10-model结构">¶</a>七、CIFAR10 model结构</h4><p><img src="/2022/110716118/CIFAR10model%E7%BB%93%E6%9E%84.png" alt></p><p><img src="/2022/110716118/stride-padding%E7%9A%84%E8%AE%A1%E7%AE%97.png" alt></p><h5 id="网络的处理流程："><a class="header-anchor" href="#网络的处理流程：">¶</a>网络的处理流程：</h5><pre><code>卷积---池化---卷积---池化---卷积---池化---展开---线性层---线性层</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Conv2d<span class="token punctuation">,</span> MaxPool2d<span class="token punctuation">,</span> Flatten<span class="token punctuation">,</span> Linear<span class="token punctuation">,</span> Sequential<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token keyword">class</span> <span class="token class-name">BinSeq</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>BinSeq<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># self.conv1 = Conv2d(3, 32, 5, padding=2)</span>        <span class="token comment"># self.maxpool1 = MaxPool2d(2)</span>        <span class="token comment"># self.conv2 = Conv2d(32, 32, 5, padding=2)</span>        <span class="token comment"># self.maxpool2 = MaxPool2d(2)</span>        <span class="token comment"># self.conv3 = Conv2d(32, 64, 5, padding=2)</span>        <span class="token comment"># self.maxpool3 = MaxPool2d(2)</span>        <span class="token comment"># self.flatten = Flatten()</span>        <span class="token comment"># self.linear1 = Linear(1024, 64)</span>        <span class="token comment"># self.linear2 = Linear(64, 10)</span>        <span class="token comment"># 模型的包装  Sequential的使用</span>        self<span class="token punctuation">.</span>model1 <span class="token operator">=</span> Sequential<span class="token punctuation">(</span>            Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Linear<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># x = self.conv1(x)</span>        <span class="token comment"># x = self.maxpool1(x)</span>        <span class="token comment"># x = self.conv2(x)</span>        <span class="token comment"># x = self.maxpool2(x)</span>        <span class="token comment"># x = self.conv3(x)</span>        <span class="token comment"># x = self.maxpool3(x)</span>        <span class="token comment"># x = self.flatten(x)</span>        <span class="token comment"># x = self.linear1(x)</span>        <span class="token comment"># x = self.linear2(x)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>model1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> xbinseq <span class="token operator">=</span> BinSeq<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>binseq<span class="token punctuation">)</span><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>output <span class="token operator">=</span> binseq<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"logs_seq"</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span>add_graph<span class="token punctuation">(</span>binseq<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># BinSeq(</span><span class="token comment">#   (model1): Sequential(</span><span class="token comment">#     (0): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))</span><span class="token comment">#     (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (2): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))</span><span class="token comment">#     (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (4): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))</span><span class="token comment">#     (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)</span><span class="token comment">#     (6): Flatten(start_dim=1, end_dim=-1)</span><span class="token comment">#     (7): Linear(in_features=1024, out_features=64, bias=True)</span><span class="token comment">#     (8): Linear(in_features=64, out_features=10, bias=True)</span><span class="token comment">#   )</span><span class="token comment"># )</span></code></pre><p>网络搭建在tensorboard当中的效果如下图所示：</p><p><img src="/2022/110716118/seq%E7%9A%84tensorboard%E6%95%88%E6%9E%9C.png" alt></p><h4 id="八、损失函数与反向传播"><a class="header-anchor" href="#八、损失函数与反向传播">¶</a>八、损失函数与反向传播</h4><p>损失函数：指的是实际的输出与目标之间的差距<br>方向传播：指为我们更新数据提供了一定的依据</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> L1Loss<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token comment"># 注意的是：这里的[1, 2, 3]是指3个维度，是一维1， 2， 3</span><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>target <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>target <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>loss <span class="token operator">=</span> L1Loss<span class="token punctuation">(</span><span class="token punctuation">)</span>result <span class="token operator">=</span> loss<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token comment"># 计算均方误差</span>loss_mse <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>result_mse <span class="token operator">=</span> loss_mse<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>       <span class="token comment"># tensor(0.6667)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result_mse<span class="token punctuation">)</span>   <span class="token comment"># tensor(1.3333)</span><span class="token comment"># 下面进行交叉熵损失函数的计算</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>loss_cross <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>result_cross <span class="token operator">=</span> loss_cross<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result_cross<span class="token punctuation">)</span>     <span class="token comment"># tensor(1.1019)</span></code></pre><p><img src="/2022/110716118/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0.png" alt></p><h5 id="交叉熵损失函数的计算"><a class="header-anchor" href="#交叉熵损失函数的计算">¶</a>交叉熵损失函数的计算</h5><p>交叉熵损失函数的解读：</p><p>    假设：目标为检测左侧的图像，中间的为深度神经网络的模型图，分成三组[person, dog, cat]，其下标分别表示[0, 1, 2]输出的结果为[0.1, 0.2, 0.3], 目标是检测为dog[1]。</p><p>对应于公式中：x表示output，class表示target的值</p><p>则Loss(x, class) = -0.2 * 1  + log(exp(0.1) + exp(0.2) + exp(0.3))</p><p><img src="/2022/110716118/%E4%BA%A4%E5%8F%89%E7%86%B5%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0.png" alt></p></font>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> Pytorch基础代码 </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> Python卷积/池化/非线性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch学习2-基础代码解析</title>
      <link href="/2022/110716117.html"/>
      <url>/2022/110716117.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h4 id="一、数据加载模块"><a class="header-anchor" href="#一、数据加载模块">¶</a>一、数据加载模块</h4><p>DataSet: 提供一种方式去获取数据及其label<br>DataLoader: 为后面的网络提供不同的数据形式</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token keyword">import</span> cv2<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">MyData</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root_dir<span class="token punctuation">,</span> label_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>root_dir <span class="token operator">=</span> root_dir        self<span class="token punctuation">.</span>label_dir <span class="token operator">=</span> label_dir        self<span class="token punctuation">.</span>path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root_dir<span class="token punctuation">,</span> self<span class="token punctuation">.</span>label_dir<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>img_path <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>path<span class="token punctuation">)</span>       <span class="token comment"># 获取路径下的所有图片地址</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        img_name <span class="token operator">=</span> self<span class="token punctuation">.</span>img_path<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>               <span class="token comment"># 每一张图片的位置</span>        <span class="token comment"># 每一张图片的加载路径 使用到了os.path.join  root_dir  label_dir img_name</span>        img_item_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root_dir<span class="token punctuation">,</span> self<span class="token punctuation">.</span>label_dir<span class="token punctuation">,</span> img_name<span class="token punctuation">)</span>        img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>img_item_path<span class="token punctuation">)</span>             <span class="token comment"># 返回的是图片，打开</span>        label <span class="token operator">=</span> self<span class="token punctuation">.</span>label_dir                      <span class="token comment"># 返回该图片的label位置</span>        <span class="token keyword">return</span> img<span class="token punctuation">,</span> label    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>img_path<span class="token punctuation">)</span>                   <span class="token comment"># 返回定义的所有照片的list长度</span><span class="token comment"># 创建实例</span>root_dir <span class="token operator">=</span> <span class="token string">"dataset/hymenoptera_data/train"</span>ants_label_dir <span class="token operator">=</span> <span class="token string">"ants"</span>bees_label_dir <span class="token operator">=</span> <span class="token string">"bees"</span>ants_dataset <span class="token operator">=</span> MyData<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span> ants_label_dir<span class="token punctuation">)</span>     <span class="token comment"># 返回的是蚂蚁数据集</span>bees_dataset <span class="token operator">=</span> MyData<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span> bees_label_dir<span class="token punctuation">)</span>train_dataset <span class="token operator">=</span> ants_dataset <span class="token operator">+</span> bees_dataset<span class="token comment"># 输出ants_dataset当中的img, label</span>img<span class="token punctuation">,</span> label <span class="token operator">=</span> ants_dataset<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># img.show(ants_dataset[0])</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token comment"># &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=500x333 at 0x14AE1EC0340> ants</span><span class="token keyword">print</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token comment"># ants</span><span class="token keyword">print</span><span class="token punctuation">(</span>ants_dataset<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 124</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ants_dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 124</span></code></pre><p><img src="/2022/110716117/DataSet%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt></p><h4 id="二、tensorboard数据展示模块"><a class="header-anchor" href="#二、tensorboard数据展示模块">¶</a>二、tensorboard数据展示模块</h4><p>tensorboard的使用</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token keyword">import</span> cv2<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 将相关的解析文件存放在logs文件夹当中</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">)</span>image_path <span class="token operator">=</span> <span class="token string">"dataset/train/ants_image/0013035.jpg"</span>img_PIL <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>img_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img_PIL<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>img_array<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># &lt;class 'numpy.ndarray'></span><span class="token keyword">print</span><span class="token punctuation">(</span>img_array<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>      <span class="token comment"># (512, 768, 3) 查看通道的数量和位置，即下面的dataformats</span><span class="token comment"># 参数分别表示：名称, 图像，步骤，数据格式</span><span class="token comment"># 这个步骤可以在tensorboard上进行拖动展示，表示每一个步骤的图像结果</span>writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> img_array<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> dataformats<span class="token operator">=</span><span class="token string">"HWC"</span><span class="token punctuation">)</span><span class="token comment"># 绘制一条y=x的线</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"y=2*x"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 这里是会出现多个函数，最后扭在一起是多个函数进行了一个拟合，需要把logs文件夹里面的内容删除即可</span><span class="token comment"># terminal当中编写命令： tensorboard --logdir=logs --port=6007</span></code></pre><p><img src="/2022/110716117/tensorboard%E8%BF%87%E7%A8%8B.png" alt></p><p><img src="/2022/110716117/tensorboard%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt></p><h4 id="三、transforms"><a class="header-anchor" href="#三、transforms">¶</a>三、transforms</h4><p>在python当中的用法 —&gt;tensor的数据类型<br>通过transforms.ToTensor去看两个问题：<br>1、transforms该如何使用（python）<br>2、为什么我们需要Tensor数据类型</p><p><img src="/2022/110716117/transforms%E7%BB%93%E6%9E%9C%E5%8F%8A%E7%94%A8%E6%B3%95.png" alt></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> cv2img_path <span class="token operator">=</span> <span class="token string">"dataset/train/ants_image/6240329_72c01e663e.jpg"</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">)</span><span class="token comment"># 1、使用transforms的方法</span>tensor_trans <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>tensor_img <span class="token operator">=</span> tensor_trans<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tensor_img<span class="token punctuation">)</span><span class="token comment"># &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=500x369 at 0x20B7D789640></span><span class="token comment"># tensor([[[0.3725, 0.3725, 0.3725,  ..., 0.7216, 0.7216, 0.7176],</span><span class="token comment">#          [0.3843, 0.3843, 0.3804,  ..., 0.7216, 0.7176, 0.7176],</span><span class="token comment">#          [0.4000, 0.4000, 0.3961,  ..., 0.7176, 0.7176, 0.7176],</span><span class="token comment">#          ...,</span><span class="token comment">#          [0.1176, 0.1176, 0.1176,  ..., 0.3059, 0.3059, 0.3020],</span><span class="token comment">#          [0.1176, 0.1176, 0.1176,  ..., 0.3020, 0.2980, 0.2980],</span><span class="token comment">#          [0.1176, 0.1020, 0.0980,  ..., 0.3020, 0.2980, 0.2941]],</span><span class="token comment">#</span><span class="token comment">#         [[0.3137, 0.3137, 0.3137,  ..., 0.6588, 0.6588, 0.6549],</span><span class="token comment">#          [0.3255, 0.3255, 0.3216,  ..., 0.6588, 0.6549, 0.6549],</span><span class="token comment">#          [0.3412, 0.3412, 0.3373,  ..., 0.6549, 0.6549, 0.6549],</span><span class="token comment">#          ...,</span><span class="token comment">#          [0.0980, 0.0980, 0.0980,  ..., 0.5176, 0.5176, 0.5137],</span><span class="token comment">#          [0.0980, 0.0980, 0.0980,  ..., 0.5137, 0.5098, 0.5098],</span><span class="token comment">#          [0.1020, 0.0863, 0.0824,  ..., 0.5137, 0.5098, 0.5059]],</span><span class="token comment">#</span><span class="token comment">#         [[0.2941, 0.2941, 0.2941,  ..., 0.6588, 0.6588, 0.6549],</span><span class="token comment">#          [0.3059, 0.3059, 0.3020,  ..., 0.6588, 0.6549, 0.6549],</span><span class="token comment">#          [0.3216, 0.3216, 0.3176,  ..., 0.6549, 0.6549, 0.6549],</span><span class="token comment">#          ...,</span><span class="token comment">#          [0.0824, 0.0824, 0.0824,  ..., 0.5647, 0.5647, 0.5608],</span><span class="token comment">#          [0.0824, 0.0824, 0.0824,  ..., 0.5608, 0.5569, 0.5569],</span><span class="token comment">#          [0.0902, 0.0745, 0.0706,  ..., 0.5608, 0.5569, 0.5529]]])</span><span class="token comment"># 2、为什么使用tensor的数据类型</span><span class="token comment"># 将其存放到logs当中的tensorboard当中</span>writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"Tensor_img"</span><span class="token punctuation">,</span> tensor_img<span class="token punctuation">)</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="transforms常见的函数"><a class="header-anchor" href="#transforms常见的函数">¶</a>transforms常见的函数</h5><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transformswriter <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">)</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"dataset/train/ants_image/6240329_72c01e663e.jpg"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token comment"># transforms当中的方法的使用</span><span class="token comment"># 1、ToTensor</span><span class="token comment"># 将原来的PIL数据类型转化为tensor的数据类型</span>trans_totensor <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 首先定义一个方法trans_totensor为：类型转化为Tensor</span>img_tensor <span class="token operator">=</span> trans_totensor<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token comment"># 将参数传进去，完成数据类型的返回</span>writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"ToTensor"</span><span class="token punctuation">,</span> img_tensor<span class="token punctuation">)</span><span class="token comment"># 添加到tensorboard当中去</span><span class="token comment"># 2、Normalize</span><span class="token comment"># Normalize()函数的作用是将数据转换为标准高斯分布，即逐个channel的对图像进行标准化</span><span class="token comment"># （均值变为0，标准差为1），可以加快模型的收敛</span><span class="token keyword">print</span><span class="token punctuation">(</span>img_tensor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>trans_norm <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>img_norm <span class="token operator">=</span> trans_norm<span class="token punctuation">(</span>img_tensor<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img_norm<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"Normalize"</span><span class="token punctuation">,</span> img_norm<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 3、 Resize 将图像大大小转为512 512</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>size<span class="token punctuation">)</span>trans_resize <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span>img_resize <span class="token operator">=</span> trans_resize<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img_resize<span class="token punctuation">)</span><span class="token comment"># &lt;PIL.Image.Image image mode=RGB size=512x512 at 0x1B3F3850130></span><span class="token comment"># 大小为 512 * 512</span>img_resize <span class="token operator">=</span> trans_totensor<span class="token punctuation">(</span>img_resize<span class="token punctuation">)</span>  <span class="token comment"># 将原来的PIL类型转为tensor类型，再放入tensorboard当中</span>writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"Resize"</span><span class="token punctuation">,</span> img_resize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img_resize<span class="token punctuation">)</span><span class="token comment"># 4、Compose - resize -2</span><span class="token comment"># Compose 中的参数需要一个列表 列表的表示形式为[数据1， 数据2，...]</span><span class="token comment"># 在Compose中 数据需要tansforms类型 所以得到的是Compose([tansforms参数1],[tansforms参数2]...)</span>trans_resize_2 <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>trans_compose <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>trans_resize_2<span class="token punctuation">,</span> trans_totensor<span class="token punctuation">]</span><span class="token punctuation">)</span>img_resize_2 <span class="token operator">=</span> trans_compose<span class="token punctuation">(</span>img<span class="token punctuation">)</span>writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"Resize"</span><span class="token punctuation">,</span> img_resize_2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 5、RandomCrop 随机的裁剪图片</span>trans_random <span class="token operator">=</span> transforms<span class="token punctuation">.</span>RandomCrop<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>trans_compose_2 <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>trans_random<span class="token punctuation">,</span> trans_totensor<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    img_crop <span class="token operator">=</span> trans_compose_2<span class="token punctuation">(</span>img<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"RandomCrop"</span><span class="token punctuation">,</span> img_crop<span class="token punctuation">,</span> i<span class="token punctuation">)</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/2022/110716117/transform%E6%96%B9%E6%B3%95.png" alt></p></font>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> Pytorch基础代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch学习1-环境安装</title>
      <link href="/2022/110716116.html"/>
      <url>/2022/110716116.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h3 id="一、各类资源地址"><a class="header-anchor" href="#一、各类资源地址">¶</a>一、各类资源地址</h3><p><a href="https://pytorch.org/">Pytorch官网</a></p><p><a href="https://www.anaconda.com/">anaconda官网</a></p><p><a href="https://repo.anaconda.com/archive/">anaconda历史版本</a></p><p><a href="https://www.bilibili.com/video/BV1hE411t7RN/?spm_id_from=333.337.search-card.all.click&amp;vd_source=0f50d0008f8b836aa3258f634d65d48e">安装教程视频</a></p><h4 id="1、安装anaconda"><a class="header-anchor" href="#1、安装anaconda">¶</a>1、安装anaconda</h4><p>根据上述安装地址下载安装,搜索Anaconda Prompt出现base环境说明安装成功<br><img src="/2022/110716116/anaconda%E7%9A%84base%E7%8E%AF%E5%A2%83.png" alt></p><h4 id="2、显卡的配置"><a class="header-anchor" href="#2、显卡的配置">¶</a>2、显卡的配置</h4><p>本地显卡版本：任务管理器-性能-GPU<br>设备管理器-显示适配器<br>驱动 + CUDA</p><p>查看驱动版本：</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">nvidia-smi</code></pre><p><img src="/2022/110716116/%E9%A9%B1%E5%8A%A8%E7%89%88%E6%9C%AC%E6%9F%A5%E7%9C%8B.png" alt></p><h4 id="3、使用conda创建虚拟环境"><a class="header-anchor" href="#3、使用conda创建虚拟环境">¶</a>3、使用conda创建虚拟环境</h4><p>1、打开Anaconda Prompt窗口，创建环境Pytorch</p><pre class="language-conda" data-language="conda"><code class="language-conda">conda create -n pytorch python&#x3D;3.6</code></pre><p>2、激活环境</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">conda activate pytorch</code></pre><p>3、查看环境当中具备哪些工具包：</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">pip list</code></pre><p>4、查看pytorch是否可用</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">python&gt;&gt;&gt; import torch&gt;&gt;&gt; torch.cuda.is_available();# 返回True表示本机GPU可被pytorch使用</code></pre><p>5、删除虚拟环境</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">conda remove -n pytorch_env(虚拟环境名称)  --all</code></pre><p><img src="/2022/110716116/%E6%9F%A5%E7%9C%8Bpytorch%E6%98%AF%E5%90%A6%E5%8F%AF%E7%94%A8.png" alt></p><p>6、将pytorch安装到指定的目录下</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">查看anaconda文档conda create help安装虚拟环境到指定目录下conda create --prefix&#x3D;D:\Anaconda\setup\envs\BinPytorch python&#x3D;3.8查看当前的环境及地址conda info --envs出现以下环境：labelImg                 C:\Users\Administrator\.conda\envs\labelImgbase                  *  D:\Anaconda\setuppytorch                  D:\Anaconda\setup\envs\pytorch</code></pre><p>7、创建好了虚拟环境之后，安装pytorch<br><a href="https://pytorch.org/">pytorch安装路径</a><br><img src alt></p><h3 id="二、相关的操作命令"><a class="header-anchor" href="#二、相关的操作命令">¶</a>二、相关的操作命令</h3><pre class="language-cmd" data-language="cmd"><code class="language-cmd">dir() : 打开函数，查看有哪些方法help(): 工具的使用方法</code></pre><p><img src="/2022/110716116/pythorch%E5%91%BD%E4%BB%A4.png" alt><br><img src="/2022/110716116/pytorch%E5%91%BD%E4%BB%A42.png" alt><br><img src="/2022/110716116/pytorch%E5%91%BD%E4%BB%A43.png" alt></p><h5 id="查看是否安装成功"><a class="header-anchor" href="#查看是否安装成功">¶</a>查看是否安装成功</h5><p>在pycharm当中完成环境的配置之后</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cuda_version<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></font>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模型/代码/论文/资源 地址汇总</title>
      <link href="/2022/110616115.html"/>
      <url>/2022/110616115.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="一、模型"><a class="header-anchor" href="#一、模型">¶</a>一、模型</h2><pre class="language-none"><code class="language-none">模型本地存放地址：</code></pre><h3 id="1、ResNet相关预训练模型下载地址"><a class="header-anchor" href="#1、ResNet相关预训练模型下载地址">¶</a>1、ResNet相关预训练模型下载地址</h3><pre class="language-python" data-language="python"><code class="language-python">model_urls <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'resnet18'</span><span class="token punctuation">:</span> <span class="token string">'https://download.pytorch.org/models/resnet18-f37072fd.pth'</span><span class="token punctuation">,</span>    <span class="token string">'resnet34'</span><span class="token punctuation">:</span> <span class="token string">'https://download.pytorch.org/models/resnet34-b627a593.pth'</span><span class="token punctuation">,</span>    <span class="token string">'resnet50'</span><span class="token punctuation">:</span> <span class="token string">'https://download.pytorch.org/models/resnet50-0676ba61.pth'</span><span class="token punctuation">,</span>    <span class="token string">'resnet101'</span><span class="token punctuation">:</span> <span class="token string">'https://download.pytorch.org/models/resnet101-63fe2227.pth'</span><span class="token punctuation">,</span>    <span class="token string">'resnet152'</span><span class="token punctuation">:</span> <span class="token string">'https://download.pytorch.org/models/resnet152-394f9c45.pth'</span><span class="token punctuation">,</span>    <span class="token string">'resnext50_32x4d'</span><span class="token punctuation">:</span> <span class="token string">'https://download.pytorch.org/models/resnext50_32x4d-7cdf4587.pth'</span><span class="token punctuation">,</span>    <span class="token string">'resnext101_32x8d'</span><span class="token punctuation">:</span> <span class="token string">'https://download.pytorch.org/models/resnext101_32x8d-8ba56ff5.pth'</span><span class="token punctuation">,</span>    <span class="token string">'wide_resnet50_2'</span><span class="token punctuation">:</span> <span class="token string">'https://download.pytorch.org/models/wide_resnet50_2-95faca4d.pth'</span><span class="token punctuation">,</span>    <span class="token string">'wide_resnet101_2'</span><span class="token punctuation">:</span> <span class="token string">'https://download.pytorch.org/models/wide_resnet101_2-32ee1156.pth'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>两种载入方式：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># methold1：</span><span class="token comment"># model = torchvision.models.resnet152(pretrained=True)</span> <span class="token comment"># methold2：</span>model<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>resnet152<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'./resnet152-394f9c45.pth'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="二、代码"><a class="header-anchor" href="#二、代码">¶</a>二、代码</h2><h4 id="1、reID-Relation-Aware-Global-Attention-for-Person-Re-identification-CVPR2020"><a class="header-anchor" href="#1、reID-Relation-Aware-Global-Attention-for-Person-Re-identification-CVPR2020">¶</a>1、reID: Relation-Aware Global Attention for Person Re-identification(CVPR2020)</h4><p><a href="https://openaccess.thecvf.com/content_CVPR_2020/papers/Zhang_Relation-Aware_Global_Attention_for_Person_Re-Identification_CVPR_2020_paper.pdf">论文地址</a><br><a href="https://github.com/microsoft/Relation-Aware-Global-Attention-Networks">github地址</a><br><a href="https://www.bilibili.com/video/BV1eW4y1h7SZ?p=9&amp;spm_id_from=pageDriver&amp;vd_source=0f50d0008f8b836aa3258f634d65d48e">视频教程地址</a><br>本机代码地址： [E:\DeepLearning\REID\RGA\Relation Network for Person Re-identification\githubCode]</p><h2 id="三、论文"><a class="header-anchor" href="#三、论文">¶</a>三、论文</h2><h4 id="1、reID-Relation-Aware-Global-Attention-for-Person-Re-identification-CVPR2020-v2"><a class="header-anchor" href="#1、reID-Relation-Aware-Global-Attention-for-Person-Re-identification-CVPR2020-v2">¶</a>1、<a href="https://openaccess.thecvf.com/content_CVPR_2020/papers/Zhang_Relation-Aware_Global_Attention_for_Person_Re-Identification_CVPR_2020_paper.pdf">reID: Relation-Aware Global Attention for Person Re-identification(CVPR2020)</a></h4><h2 id="四、其他资源"><a class="header-anchor" href="#四、其他资源">¶</a>四、其他资源</h2></font>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reID论文-Relation_Aware_Global_Attention_for_Person_Re-identification(CVPR2020)</title>
      <link href="/2022/110616114.html"/>
      <url>/2022/110616114.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="reID-Relation-Aware-Global-Attention-for-Person-Re-identification-CVPR2020"><a class="header-anchor" href="#reID-Relation-Aware-Global-Attention-for-Person-Re-identification-CVPR2020">¶</a>reID: Relation-Aware Global Attention for Person Re-identification(CVPR2020)</h2><p><a href="https://openaccess.thecvf.com/content_CVPR_2020/papers/Zhang_Relation-Aware_Global_Attention_for_Person_Re-Identification_CVPR_2020_paper.pdf">论文地址</a></p><p><a href="https://github.com/microsoft/Relation-Aware-Global-Attention-Networks">github地址</a></p><p><a href="https://www.bilibili.com/video/BV1eW4y1h7SZ?p=9&amp;spm_id_from=pageDriver&amp;vd_source=0f50d0008f8b836aa3258f634d65d48e">视频教程地址</a></p><h3 id="一、模型图解读"><a class="header-anchor" href="#一、模型图解读">¶</a>一、模型图解读</h3><p><img src="/2022/110616114/%E5%9F%BA%E4%BA%8E%E7%A9%BA%E9%97%B4%E5%92%8Cchannel%E7%9A%84%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6.png" alt></p><p>图a: 空间注意力机制的提取：得到特征图之后，一个维度上进行特征的运算<br>图b: 空间注意力机制的提取：得到特征图之后，一个channel上进行特征的运算</p><p>整体思想：通过提取图像的特征图，从特征图上来看，本文的两个创新点在于：</p><p>1、对应图a，从一个channel出发，一张图像[H * W]的所有特征点可以并不是全部都是行人的特征(存在部分背景因素),因此我们需要将特征点进行权重的划分，即获取一个大小为[H * W]的权重数组，再与特征图进行相乘。<br>2、对应图b，从不同的channel出发，我们并不是需要对每一个channel通道进行运算，而是根据通道之间的权重进行计算，因此我们计算出不同通道的权重[c],最后与特征图的通道相乘。<br>注：以上的两个操作过程相似，只是从两个不同的维度出发的！</p><p>模型结构：<br>图a：<br>        1、将图像的特征图embedding成一个通道的立体图(原始特征图的特征)-----&gt;保留原始的特征图信息</p><p>        2、计算[H * W]当中两两特征点之间的关系，reshape成一个[H * W]的特征</p><p>        3、为什么有两个？-----&gt; 一个计算的是我与另外一个特征点的关系，一个是另外一个特征点与我的关系(他们之间的关系是不一样的，可以试着理解理解)</p><p>        4、最后将上述的三个特征图进行组装拼接，即：Relation-aware Feature</p><p>        5、最后将Relation-aware Feature做一个卷积操作，提取出每一个特征点位置上的权重值，及大小为[H * W]的权重数组Spatial Attention</p><p>图b: 几乎同上(获取通道的权重数组)</p></font>]]></content>
      
      
      <categories>
          
          <category> reID </category>
          
          <category> reID论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行人重识别 </tag>
            
            <tag> reId </tag>
            
            <tag> 科研er </tag>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reID基础知识1-行人重识别定义及过程</title>
      <link href="/2022/110416113.html"/>
      <url>/2022/110416113.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="reID-Person-re-identification"><a class="header-anchor" href="#reID-Person-re-identification">¶</a>reID: Person re-identification</h2><h3 id="一、reID要做什么？"><a class="header-anchor" href="#一、reID要做什么？">¶</a>一、reID要做什么？</h3><blockquote><ul><li>在多摄像头的复杂环境当中，快速的定位查找指定的目标的所有结果</li></ul></blockquote><p>in other words：给定一个照片，我们需要在复杂的环境当中找到最匹配这张照片的若干个结果！</p><h3 id="二、行人重识别是什么？"><a class="header-anchor" href="#二、行人重识别是什么？">¶</a>二、行人重识别是什么？</h3><p>行人识别：是将图像当中的行人找到<br>行人重识别：输入一张图像，然后在众多的摄像头所截取的图像当中获取具备输入图像特征的若干张行人图像<br>一般而言：我们会将该输入图像进行特征提取获取其特征图（例如：1024维的特征向量/图），然后再将图像库当中的数据也全部转化为1024维的特征向量/图，最后通过计算他们之间的相似度，来判别最后那些图像是我需要寻找的。<br><img src="/2022/110416113/%E8%A1%8C%E4%BA%BA%E9%87%8D%E8%AF%86%E5%88%AB%E5%9B%BE.png" alt></p><h3 id="三、行人重识别的应用场景"><a class="header-anchor" href="#三、行人重识别的应用场景">¶</a>三、行人重识别的应用场景</h3><blockquote><ul><li>手机相册分类（有些是人脸识别，有些是人的特征）</li><li>人机交互</li><li>智能超市</li><li>一分钟我要她的所有信息</li></ul></blockquote><p><img src="/2022/110416113/%E8%A1%8C%E4%BA%BA%E9%87%8D%E8%AF%86%E5%88%AB%E7%9A%84%E8%83%8C%E6%99%AF.png" alt></p><p>一句话： 我们进行重识别，其根本的方法就是<font color="#0000FF">相似度的匹配</font></p><h3 id="四、行人重识别领域当中存在的挑战"><a class="header-anchor" href="#四、行人重识别领域当中存在的挑战">¶</a>四、行人重识别领域当中存在的挑战</h3><blockquote><ul><li>由于行人存在于图像当中，检测的过程当中截取出来的行人像素较低</li><li>不同于人脸识别，人脸所存在的干扰非常少，而行人包括：肢体，背景，环境，衣着等的影响</li><li>使用到的数据集量比较低，校园数据集一般而言都是1000人、10000图片左右</li></ul></blockquote><p><img src="/2022/110416113/%E8%A1%8C%E4%BA%BA%E9%87%8D%E8%AF%86%E5%88%AB%E5%AD%98%E5%9C%A8%E7%9A%84%E6%8C%91%E6%88%98.png" alt></p><blockquote><ul><li>分辨率较低</li><li>行人肢体受到遮挡</li><li>不同视角下的图像，对比起来较为困难</li><li>不同视角下的图像，光照条件可能不同</li><li>视觉模糊</li></ul></blockquote><p>目前研究所存在的问题：<font color="#00FF00">跨域问题</font>，就是在测试环境当中是<font color="#FF0000">state-of-the-art</font>，放到各种复杂的环境当中效果蹭蹭往下掉！公开的数据集都是学校的数据集！</p><h4 id="论文当中常用的数据集"><a class="header-anchor" href="#论文当中常用的数据集">¶</a>论文当中常用的数据集</h4><blockquote><ul><li>CUHK03: 香港中文大学(CUHK)校园</li><li>Market-1501: 清华大学校园</li><li>DukeMTMC: 8个摄像机</li><li>MSMIT17：12个室外和3个室内（校园）</li></ul></blockquote><p><img src="/2022/110416113/%E6%A0%A1%E5%9B%AD%E6%95%B0%E6%8D%AE%E9%9B%86.png" alt></p><h3 id="五、行人重识别效果的评估标准"><a class="header-anchor" href="#五、行人重识别效果的评估标准">¶</a>五、行人重识别效果的评估标准</h3><p>评估标准：基本上所有论文都是提出两个概念： <font color="#FF0000">rank1</font>      <font color="#FF0000">map</font></p><h4 id="rank1-返回结果的一系列图像当中，rank1表示第一章结果正确"><a class="header-anchor" href="#rank1-返回结果的一系列图像当中，rank1表示第一章结果正确">¶</a>rank1: 返回结果的一系列图像当中，rank1表示第一章结果正确</h4><h4 id="map-计算多组ap-average-presicion-的平均值"><a class="header-anchor" href="#map-计算多组ap-average-presicion-的平均值">¶</a>map: 计算多组ap(average presicion)的平均值</h4><p><img src="/2022/110416113/map%E7%9A%84%E8%AE%A1%E7%AE%971.png" alt></p><p>通俗的计算： ap(average presicion) = (1/1 + 2/3 + 3/6 + 4/9 + 5/10) / 5<br>分子为：每一个正确的图片所应该存放的位置<br>分母为：识别的正确的结果(橙色)在识别的结果当中的位置</p><p>分析：如果识别的所有结果均在正确的位置上，也就是说，识别出来的第一张最相似，第二张次之，以此类推，那么ap = (1/1 + 2/2 + 3/3 + 4/4 +5/5) / 5 = 1 。即ap值越接近于1，越能够证明识别的效果好！</p><p><img src="/2022/110416113/map%E7%9A%84%E8%AE%A1%E7%AE%972.png" alt></p><p>一般而言做一组实验不能证明其最终的效果，我们做多组实验(上两张图ap_1 = 0.62 ap_2 = 0.44),则最终的 map = (0.62 + 0.44)/2 = 0.53</p><h3 id="六、损失函数"><a class="header-anchor" href="#六、损失函数">¶</a>六、损失函数</h3><p>(学习完了过来补充)</p><h3 id="附：牛逼的地方："><a class="header-anchor" href="#附：牛逼的地方：">¶</a>附：牛逼的地方：</h3><p><a href="https://research.megvii.com/">旷视研究院</a></p><p><a href="https://aaai.org/Conferences/AAAI-22/">AAAI</a></p><p><a href="https://cvpr2022.thecvf.com/">CVPR</a></p><p><a href="https://www.bilibili.com/video/BV1eW4y1h7SZ?p=2&amp;spm_id_from=pageDriver&amp;vd_source=0f50d0008f8b836aa3258f634d65d48e">课程地址</a></p><p>课件地址: (E:\DeepLearning\REID\RGA)</p></font>]]></content>
      
      
      <categories>
          
          <category> reID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行人重识别 </tag>
            
            <tag> reId </tag>
            
            <tag> 科研er </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神经网络基础-线性函数&amp;损失函数</title>
      <link href="/2022/110116112.html"/>
      <url>/2022/110116112.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="登录"><a class="header-anchor" href="#登录">¶</a>登录</h2><h3 id="一、"><a class="header-anchor" href="#一、">¶</a>一、</h3></font>]]></content>
      
      
      <categories>
          
          <category> 神经网络学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统6-springboot系统中三层架构的分析</title>
      <link href="/2022/103116111.html"/>
      <url>/2022/103116111.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="登录"><a class="header-anchor" href="#登录">¶</a>登录</h2><h3 id="一、"><a class="header-anchor" href="#一、">¶</a>一、</h3></font>]]></content>
      
      
      <categories>
          
          <category> 前后端分离web系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用小工具 </tag>
            
            <tag> SpringBoot+vue </tag>
            
            <tag> 前后端分离 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统5-登录系统的逻辑</title>
      <link href="/2022/103116110.html"/>
      <url>/2022/103116110.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="登录"><a class="header-anchor" href="#登录">¶</a>登录</h2><h3 id="一、"><a class="header-anchor" href="#一、">¶</a>一、</h3></font>]]></content>
      
      
      <categories>
          
          <category> 前后端分离web系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用小工具 </tag>
            
            <tag> SpringBoot+vue </tag>
            
            <tag> 前后端分离 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统4-表单验证及正则表达式</title>
      <link href="/2022/102916109.html"/>
      <url>/2022/102916109.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2><h3 id="一、表单验证代码"><a class="header-anchor" href="#一、表单验证代码">¶</a>一、表单验证代码</h3><h5 id="1-、前端代码"><a class="header-anchor" href="#1-、前端代码">¶</a>(1)、前端代码</h5><p><img src="/2022/102916109/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81html%E4%BB%A3%E7%A0%81.png" alt></p><h5 id="2-、前端逻辑代码"><a class="header-anchor" href="#2-、前端逻辑代码">¶</a>(2)、前端逻辑代码</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">"../../utils/request"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"addAdmin"</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//////////////////////////////////// 自定义表单校验规则 //////////////////////////////////</span>        <span class="token keyword">const</span> <span class="token function-variable function">checkAge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'年龄不能为空'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 验证是数字</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入数字值'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 验证是合理的范围</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">120</span> <span class="token operator">||</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入合理的年龄范围'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token function-variable function">checkPhone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1][3,4,5,6,7,8,9][0-9]&#123;9&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请输入正确的手机号'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//////////////////////////////////// 自定义表单校验规则 //////////////////////////////////</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">addAdminForm</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token string">''</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">addAdminRules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 与表单的prop属性相对应</span>                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span><span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">'请输入姓名'</span><span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span><span class="token string">'blur'</span><span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span> <span class="token literal-property property">validator</span><span class="token operator">:</span> checkAge<span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">phone</span><span class="token operator">:</span><span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span> <span class="token literal-property property">validator</span><span class="token operator">:</span> checkPhone<span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'blur'</span> <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span><span class="token string">'addUserRef'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">valid</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                request<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/admin/save"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>addAdminForm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'200'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>$notify<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'添加成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>addAdminForm <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>$notify<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><a href="https://element.eleme.cn/#/zh-CN/component/form">官网案例</a></p><h3 id="二、相关的正则表达式"><a class="header-anchor" href="#二、相关的正则表达式">¶</a>二、相关的正则表达式</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript">语法：<span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//:在js中表示一个正则表达式  var regExp =/......./</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token operator">:</span>匹配字符串的开头位置    <span class="token literal-property property">$</span><span class="token operator">:</span>匹配字符串的结束位置<span class="token number">3</span>）<span class="token punctuation">[</span><span class="token punctuation">]</span> 匹配指定字符串中的以为字符<span class="token number">4</span>）<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> 匹配字数   例：<span class="token punctuation">&#123;</span>m，n<span class="token punctuation">&#125;</span>  匹配<span class="token constant">M</span>到n次<span class="token number">5</span>）特殊符号：\d  匹配一位数字，相当于<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\<span class="token constant">D</span> 匹配以为非数字\w 匹配所有的字符，包括数字 字母 下划线\<span class="token constant">W</span> 匹配费字符  ，处理字母 数字 下划线之外的字符<span class="token operator">*</span> 匹配<span class="token number">0</span>次或者多次  相当于<span class="token punctuation">[</span><span class="token number">0</span>，<span class="token punctuation">]</span><span class="token operator">+</span> 匹配<span class="token number">1</span>次或者多次 相当于<span class="token punctuation">[</span><span class="token number">1</span>，<span class="token punctuation">]</span>？ 匹配<span class="token number">0</span>次或者<span class="token number">1</span>次，相当于<span class="token punctuation">[</span><span class="token number">0</span>，<span class="token number">1</span><span class="token punctuation">]</span><span class="token number">1.</span> 数字：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span>$ <span class="token number">2.</span> n位的数字：<span class="token operator">^</span>\d<span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span>$ <span class="token number">3.</span> 至少n位的数字：<span class="token operator">^</span>\d<span class="token punctuation">&#123;</span>n<span class="token punctuation">,</span><span class="token punctuation">&#125;</span>$ <span class="token number">4.</span> m<span class="token operator">-</span>n位的数字：<span class="token operator">^</span>\d<span class="token punctuation">&#123;</span>m<span class="token punctuation">,</span>n<span class="token punctuation">&#125;</span>$ <span class="token number">5.</span> 零和非零开头的数字：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span>$ <span class="token number">6.</span> 非零开头的最多带两位小数的数字：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">7.</span> 带<span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span>位小数的正数或负数：<span class="token operator">^</span><span class="token punctuation">(</span>\<span class="token operator">-</span><span class="token punctuation">)</span><span class="token operator">?</span>\d<span class="token operator">+</span><span class="token punctuation">(</span>\<span class="token punctuation">.</span>\d<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">8.</span> 正数、负数、和小数：<span class="token operator">^</span><span class="token punctuation">(</span>\<span class="token operator">-</span><span class="token operator">|</span>\<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span>\d<span class="token operator">+</span><span class="token punctuation">(</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">9.</span> 有两位小数的正实数：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">10.</span> 有<span class="token number">1</span><span class="token operator">~</span><span class="token number">3</span>位小数的正实数：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">11.</span> 非零的正整数：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>$ 或 <span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span>$ 或 <span class="token operator">^</span>\<span class="token operator">+</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span>$ <span class="token number">12.</span> 非零的负整数：<span class="token operator">^</span>\<span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>"<span class="token operator">*</span>$ 或 <span class="token operator">^</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>$<span class="token number">13.</span> 非负整数：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">)</span>$<span class="token number">14.</span> 非正整数：<span class="token operator">^</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token operator">|</span>0$ 或 <span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span class="token number">15.</span> 非负浮点数：<span class="token operator">^</span>\d<span class="token operator">+</span><span class="token punctuation">(</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span>$ 或 <span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span>\<span class="token number">.0</span><span class="token operator">+</span><span class="token operator">|</span>0$<span class="token number">16.</span> 非正浮点数：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>\d<span class="token operator">+</span><span class="token punctuation">(</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">+</span><span class="token punctuation">(</span>\<span class="token number">.0</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$ 或 <span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span>\<span class="token number">.0</span><span class="token operator">+</span><span class="token operator">|</span>0$<span class="token number">17.</span> 正浮点数：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>$ 或 <span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>\<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span class="token number">18.</span> 负浮点数：<span class="token operator">^</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token punctuation">)</span>$ 或 <span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>\<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span class="token number">19.</span> 浮点数：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token operator">?</span>\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">(</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span>$ 或 <span class="token operator">^</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span>\<span class="token punctuation">.</span>\d<span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span><span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span>\<span class="token number">.0</span><span class="token operator">+</span><span class="token operator">|</span><span class="token number">0</span><span class="token punctuation">)</span>$二、校验字符的表达式 <span class="token number">1.</span> 汉字：<span class="token operator">^</span><span class="token punctuation">[</span>\u4e00<span class="token operator">-</span>\u9fa5<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>$<span class="token number">2.</span> 英文和数字：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span>Za<span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>$ 或 <span class="token operator">^</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span>Za<span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">&#125;</span>$<span class="token number">3.</span> 长度为<span class="token number">3</span><span class="token operator">-</span><span class="token number">20</span>的所有字符：<span class="token operator">^</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">&#125;</span>$<span class="token number">4.</span> 由<span class="token number">26</span>个英文字母组成的字符串：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span>Za<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token number">5.</span> 由<span class="token number">26</span>个大写英文字母组成的字符串：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token number">6.</span> 由<span class="token number">26</span>个小写英文字母组成的字符串：<span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token number">7.</span> 由数字和<span class="token number">26</span>个英文字母组成的字符串：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span>Za<span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token number">8.</span> 由数字、<span class="token number">26</span>个英文字母或者下划线组成的字符串：<span class="token operator">^</span>\w<span class="token operator">+</span>$ 或 <span class="token operator">^</span>\w<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">&#125;</span>$<span class="token number">9.</span> 中文、英文、数字包括下划线：<span class="token operator">^</span><span class="token punctuation">[</span>\u4E00<span class="token operator">-</span>\u9FA5A<span class="token operator">-</span>Za<span class="token operator">-</span>z0<span class="token operator">-</span>9_<span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token number">10.</span> 中文、英文、数字但不包括下划线等符号：<span class="token operator">^</span><span class="token punctuation">[</span>\u4E00<span class="token operator">-</span>\u9FA5A<span class="token operator">-</span>Za<span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>$ 或 <span class="token operator">^</span><span class="token punctuation">[</span>\u4E00<span class="token operator">-</span>\u9FA5A<span class="token operator">-</span>Za<span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">&#125;</span>$<span class="token number">11.</span> 可以输入含有<span class="token operator">^</span><span class="token operator">%</span><span class="token operator">&amp;</span><span class="token string">',;=?$\"等字符：[^%&amp;'</span><span class="token punctuation">,</span><span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">?</span>$\x22<span class="token punctuation">]</span><span class="token operator">+</span> <span class="token number">12</span> 禁止输入含有<span class="token operator">~</span>的字符：<span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">~</span>\x22<span class="token punctuation">]</span><span class="token operator">+</span>三、特殊需求表达式<span class="token number">1.</span> Email地址：<span class="token operator">^</span>\w<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">]</span>\w<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span>@\w<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">]</span>\w<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span>\<span class="token punctuation">.</span>\w<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">]</span>\w<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">*</span>$<span class="token number">2.</span> 域名：<span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token operator">?</span><span class="token number">3.</span> InternetURL：<span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">^</span>\s<span class="token punctuation">]</span><span class="token operator">*</span> 或 <span class="token operator">^</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span>\<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">[</span>\w<span class="token operator">-</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">[</span>\w<span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token operator">?</span><span class="token operator">%</span><span class="token operator">&amp;=</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">?</span>$<span class="token number">4.</span> 手机号码：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">14</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">|</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">15</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">|</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">5</span><span class="token operator">|</span><span class="token number">6</span><span class="token operator">|</span><span class="token number">7</span><span class="token operator">|</span><span class="token number">8</span><span class="token operator">|</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">18</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">|</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">5</span><span class="token operator">|</span><span class="token number">6</span><span class="token operator">|</span><span class="token number">7</span><span class="token operator">|</span><span class="token number">8</span><span class="token operator">|</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\d<span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">&#125;</span>$<span class="token number">5.</span> <span class="token function">电话号码</span><span class="token punctuation">(</span><span class="token string">"XXX-XXXXXXX"</span>、<span class="token string">"XXXX-XXXXXXXX"</span>、<span class="token string">"XXX-XXXXXXX"</span>、<span class="token string">"XXX-XXXXXXXX"</span>、<span class="token string">"XXXXXXX"</span>和"<span class="token constant">XXXXXXXX</span><span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">(</span>\<span class="token punctuation">(</span>\d<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token operator">-</span><span class="token punctuation">)</span><span class="token operator">|</span>\d<span class="token punctuation">&#123;</span><span class="token number">3.4</span><span class="token punctuation">&#125;</span><span class="token operator">-</span><span class="token punctuation">)</span><span class="token operator">?</span>\d<span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">&#125;</span>$ <span class="token number">6.</span> <span class="token function">国内电话号码</span><span class="token punctuation">(</span><span class="token number">0511</span><span class="token operator">-</span><span class="token number">4405222</span>、<span class="token number">021</span><span class="token operator">-</span><span class="token number">87888822</span><span class="token punctuation">)</span>：\d<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token operator">-</span>\d<span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token operator">|</span>\d<span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token operator">-</span>\d<span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token number">7.</span> <span class="token function">身份证号</span><span class="token punctuation">(</span><span class="token number">15</span>位、<span class="token number">18</span>位数字<span class="token punctuation">)</span>：<span class="token operator">^</span>\d<span class="token punctuation">&#123;</span><span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token operator">|</span>\d<span class="token punctuation">&#123;</span><span class="token number">18</span><span class="token punctuation">&#125;</span>$<span class="token number">8.</span> <span class="token function">短身份证号码</span><span class="token punctuation">(</span>数字、字母x结尾<span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>x<span class="token operator">|</span><span class="token constant">X</span><span class="token punctuation">)</span><span class="token operator">?</span>$ 或 <span class="token operator">^</span>\d<span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9x<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9X<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token operator">?</span>$<span class="token number">9.</span> <span class="token function">帐号是否合法</span><span class="token punctuation">(</span>字母开头，允许<span class="token number">5</span><span class="token operator">-</span><span class="token number">16</span>字节，允许字母数字下划线<span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z0</span><span class="token operator">-</span>9_<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">&#125;</span>$<span class="token number">10.</span> <span class="token function">密码</span><span class="token punctuation">(</span>以字母开头，长度在<span class="token number">6</span><span class="token operator">~</span><span class="token number">18</span>之间，只能包含字母、数字和下划线<span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span>\w<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">&#125;</span>$<span class="token number">11.</span> <span class="token function">强密码</span><span class="token punctuation">(</span>必须包含大小写字母和数字的组合，不能使用特殊字符，长度在<span class="token number">8</span><span class="token operator">-</span><span class="token number">10</span>之间<span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">*</span>\d<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span>$<span class="token number">12.</span> 日期格式：<span class="token operator">^</span>\d<span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token operator">-</span>\d<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">-</span>\d<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token number">13.</span> <span class="token function">一年的12个月</span><span class="token punctuation">(</span><span class="token number">01</span>～<span class="token number">09</span>和<span class="token number">1</span>～<span class="token number">12</span><span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>$<span class="token number">14.</span> <span class="token function">一个月的31天</span><span class="token punctuation">(</span><span class="token number">01</span>～<span class="token number">09</span>和<span class="token number">1</span>～<span class="token number">31</span><span class="token punctuation">)</span>：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">30</span><span class="token operator">|</span><span class="token number">31</span><span class="token punctuation">)</span>$<span class="token number">15.</span> 钱的输入格式：<span class="token number">16.</span> <span class="token number">1.</span><span class="token literal-property property">有四种钱的表示形式我们可以接受</span><span class="token operator">:</span><span class="token string">"10000.00"</span> 和 <span class="token string">"10,000.00"</span><span class="token punctuation">,</span> 和没有 <span class="token string">"分"</span> 的 <span class="token string">"10000"</span> 和 <span class="token string">"10,000"</span>：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span>$ <span class="token number">17.</span> <span class="token number">2.</span>这表示任意一个不以<span class="token number">0</span>开头的数字<span class="token punctuation">,</span>但是<span class="token punctuation">,</span>这也意味着一个字符<span class="token string">"0"</span>不通过<span class="token punctuation">,</span>所以我们采用下面的形式：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span>$ <span class="token number">18.</span> <span class="token number">3.</span>一个<span class="token number">0</span>或者一个不以<span class="token number">0</span>开头的数字<span class="token punctuation">.</span>我们还可以允许开头有一个负号：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span>$ <span class="token number">19.</span> <span class="token number">4.</span>这表示一个<span class="token number">0</span>或者一个可能为负的开头不为<span class="token number">0</span>的数字<span class="token punctuation">.</span>让用户以<span class="token number">0</span>开头好了<span class="token punctuation">.</span>把负号的也去掉<span class="token punctuation">,</span>因为钱总不能是负的吧<span class="token punctuation">.</span>下面我们要加的是说明可能的小数部分：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">20.</span> <span class="token number">5.</span>必须说明的是<span class="token punctuation">,</span>小数点后面至少应该有<span class="token number">1</span>位数<span class="token punctuation">,</span>所以<span class="token string">"10."</span>是不通过的<span class="token punctuation">,</span>但是 <span class="token string">"10"</span> 和 <span class="token string">"10.2"</span> 是通过的：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">21.</span> <span class="token number">6.</span>这样我们规定小数点后面必须有两位<span class="token punctuation">,</span>如果你认为太苛刻了<span class="token punctuation">,</span>可以这样：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">22.</span> <span class="token number">7.</span>这样就允许用户只写一位小数<span class="token punctuation">.</span>下面我们该考虑数字中的逗号了<span class="token punctuation">,</span>我们可以这样：<span class="token operator">^</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">23</span> <span class="token number">8.1</span>到<span class="token number">3</span>个数字<span class="token punctuation">,</span>后面跟着任意个 逗号<span class="token operator">+</span><span class="token number">3</span>个数字<span class="token punctuation">,</span>逗号成为可选<span class="token punctuation">,</span>而不是必须：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">?</span>$ <span class="token number">24.</span> 备注：这就是最终结果了<span class="token punctuation">,</span>别忘了<span class="token string">"+"</span>可以用<span class="token string">"*"</span><span class="token function">替代如果你觉得空字符串也可以接受的话</span><span class="token punctuation">(</span>奇怪<span class="token punctuation">,</span>为什么<span class="token operator">?</span><span class="token punctuation">)</span>最后<span class="token punctuation">,</span>别忘了在用函数时去掉去掉那个反斜杠<span class="token punctuation">,</span>一般的错误都在这里 <span class="token number">25.</span> xml文件：<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>\\<span class="token punctuation">.</span><span class="token punctuation">[</span>x<span class="token operator">|</span><span class="token constant">X</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">|</span><span class="token constant">M</span><span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token operator">|</span><span class="token constant">L</span><span class="token punctuation">]</span>$ <span class="token number">26.</span> 中文字符的正则表达式：<span class="token punctuation">[</span>\u4e00<span class="token operator">-</span>\u9fa5<span class="token punctuation">]</span> <span class="token number">27.</span> 双字节字符：<span class="token punctuation">[</span><span class="token operator">^</span>\x00<span class="token operator">-</span>\xff<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token function">包括汉字在内，可以用来计算字符串的长度</span><span class="token punctuation">(</span>一个双字节字符长度计<span class="token number">2</span>，<span class="token constant">ASCII</span>字符计<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">28.</span> 空白行的正则表达式：\n\s<span class="token operator">*</span>\<span class="token function">r</span> <span class="token punctuation">(</span>可以用来删除空白行<span class="token punctuation">)</span> <span class="token number">29.</span> <span class="token constant">HTML</span>标记的正则表达式：<span class="token operator">&lt;</span><span class="token punctuation">(</span>\<span class="token constant">S</span><span class="token operator">*</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">/</span>\<span class="token number">1</span><span class="token operator">></span><span class="token operator">|</span><span class="token operator">&lt;</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">(</span>网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力<span class="token punctuation">)</span> <span class="token number">30.</span> 首尾空白字符的正则表达式：<span class="token operator">^</span>\s<span class="token operator">*</span><span class="token operator">|</span>\s<span class="token operator">*</span><span class="token function">$或</span><span class="token punctuation">(</span><span class="token operator">^</span>\s<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>\s<span class="token operator">*</span>$<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">可以用来删除行首行尾的空白字符</span><span class="token punctuation">(</span>包括空格、制表符、换页符等等<span class="token punctuation">)</span>，非常有用的表达式<span class="token punctuation">)</span> <span class="token number">31.</span> 腾讯<span class="token constant">QQ</span>号：<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token punctuation">(</span>腾讯<span class="token constant">QQ</span>号从<span class="token number">10000</span>开始<span class="token punctuation">)</span> <span class="token number">32.</span> 中国邮政编码：<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">!</span>\d<span class="token punctuation">)</span> <span class="token punctuation">(</span>中国邮政编码为<span class="token number">6</span>位数字<span class="token punctuation">)</span> <span class="token number">33.</span> <span class="token constant">IP</span>地址：\d<span class="token operator">+</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span>\<span class="token punctuation">.</span>\d<span class="token operator">+</span> <span class="token punctuation">(</span>提取<span class="token constant">IP</span>地址时有用<span class="token punctuation">)</span> <span class="token number">34.</span> <span class="token constant">IP</span><span class="token function">地址：</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>\\d<span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">01</span><span class="token punctuation">]</span><span class="token operator">?</span>\\d<span class="token operator">?</span>\\d<span class="token punctuation">)</span>\\<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>\\d<span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">01</span><span class="token punctuation">]</span><span class="token operator">?</span>\\d<span class="token operator">?</span>\\d<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><a href="https://www.runoob.com/regexp/regexp-syntax.html">正则表达式语法</a></p></font>]]></content>
      
      
      <categories>
          
          <category> 前后端分离web系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用小工具 </tag>
            
            <tag> SpringBoot+vue </tag>
            
            <tag> 前后端分离 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统3-实现分页查询的功能</title>
      <link href="/2022/102816108.html"/>
      <url>/2022/102816108.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2><h3 id="一、后端完成相关的配置"><a class="header-anchor" href="#一、后端完成相关的配置">¶</a>一、后端完成相关的配置</h3><h5 id="1-、安装pageHelper的依赖"><a class="header-anchor" href="#1-、安装pageHelper的依赖">¶</a>(1)、安装pageHelper的依赖</h5><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><img src="/2022/102816108/pageHelper%E4%BE%9D%E8%B5%96.png" alt></p><h5 id="2-、相关代码"><a class="header-anchor" href="#2-、相关代码">¶</a>(2)、相关代码</h5><p>UserController:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 编写分页查询的功能</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/page"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token class-name">UserPage</span><span class="token punctuation">(</span><span class="token class-name">UserPageRequest</span> userPageRequest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">getUserPage</span><span class="token punctuation">(</span>userPageRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>UserService:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUsersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 分页查询user</span>    <span class="token class-name">Object</span> <span class="token function">getUserPage</span><span class="token punctuation">(</span><span class="token class-name">UserPageRequest</span> userPageRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>UserServiceImpl:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUsersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name"><span class="token namespace">userMapper<span class="token punctuation">.</span></span>UsersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 分页查询以及条件查询</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getUserPage</span><span class="token punctuation">(</span><span class="token class-name">UserPageRequest</span> userPageRequest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 再将参数进行传递到mapper当中进行模糊查询 重点！！！！！！！！！！！！！！！！！！！！！</span>        <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>userPageRequest<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userPageRequest<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectUserByCondition</span><span class="token punctuation">(</span>userPageRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>UserMapper:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span><span class="token comment">//    @Select("select * from user")</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token class-name">UsersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 通过参数进行条件查询：并且返回分页的效果</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">selectUserByCondition</span><span class="token punctuation">(</span><span class="token class-name">UserPageRequest</span> userPageRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>User.xml:</p><p><img src="/2022/102816108/%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2xml.png" alt></p><h3 id="二、前端代码"><a class="header-anchor" href="#二、前端代码">¶</a>二、前端代码</h3><h5 id="1-、分页插件的代码"><a class="header-anchor" href="#1-、分页插件的代码">¶</a>(1)、分页插件的代码</h5><p><img src="/2022/102816108/%E5%89%8D%E7%AB%AF%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6.png" alt></p><h5 id="2-、处理变化函数的代码"><a class="header-anchor" href="#2-、处理变化函数的代码">¶</a>(2)、处理变化函数的代码</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// fetch("http://localhost:9090/user/list").then(res => res.json()).then(res => &#123;</span>    <span class="token comment">//   console.log(res);</span>    <span class="token comment">//   this.tableData = res;</span>    <span class="token comment">// &#125;)</span>    request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/page"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>params        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'200'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>list<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>total <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>total<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 重置函数：将各种参数置为初始值后重新加载</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token literal-property property">pageNum</span><span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 分页条件的监视函数</span><span class="token function">handleSizeChange</span><span class="token punctuation">(</span><span class="token parameter">pageSize</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// console.log("多少条每页发生变化");</span>    <span class="token comment">// console.log(pageSize);</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>params<span class="token punctuation">.</span>pageSize <span class="token operator">=</span> pageSize<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">handleCurrentChange</span><span class="token punctuation">(</span><span class="token parameter">pageNum</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// console.log("前往第几页发生变化");</span>    <span class="token comment">// console.log(pageNum);</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>params<span class="token punctuation">.</span>pageNum <span class="token operator">=</span> pageNum<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/2022/102816108/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C.png" alt></p><p><a href="https://www.bilibili.com/video/BV12Y4y1N7Sw/?p=4&amp;spm_id_from=pageDriver&amp;vd_source=0f50d0008f8b836aa3258f634d65d48e">视频教程</a></p></font>]]></content>
      
      
      <categories>
          
          <category> 前后端分离web系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot+vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统2-创建springboot后端项目</title>
      <link href="/2022/102816107.html"/>
      <url>/2022/102816107.html</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2><h3 id="一、创建springboot后端项目"><a class="header-anchor" href="#一、创建springboot后端项目">¶</a>一、创建springboot后端项目</h3><p>根据springboot官网或idea创建springboot项目，这不有手就行😅</p><h3 id="二、完成相关的配置"><a class="header-anchor" href="#二、完成相关的配置">¶</a>二、完成相关的配置</h3><h5 id="1-、添加相关的依赖项，这里做一个总结（偷懒，以后直接来用就行了"><a class="header-anchor" href="#1-、添加相关的依赖项，这里做一个总结（偷懒，以后直接来用就行了">¶</a>(1)、添加相关的依赖项，这里做一个总结（偷懒，以后直接来用就行了</h5><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--mysql驱动--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- log4j日志 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- lombok --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h5 id="2-、springboot要运行起来，需要完成数据库的配置"><a class="header-anchor" href="#2-、springboot要运行起来，需要完成数据库的配置">¶</a>(2)、springboot要运行起来，需要完成数据库的配置</h5><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9090</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/library<span class="token punctuation">-</span>managment    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"0613"</span></code></pre><pre class="language-protityes" data-language="protityes"><code class="language-protityes">server.port&#x3D;8080</code></pre><h3 id="三、完成springboot查出数据库当中的数据"><a class="header-anchor" href="#三、完成springboot查出数据库当中的数据">¶</a>三、完成springboot查出数据库当中的数据</h3><h5 id="1-、后端代码结构"><a class="header-anchor" href="#1-、后端代码结构">¶</a>(1)、后端代码结构</h5><p><img src="/2022/102816107/%E5%90%8E%E7%AB%AF%E7%BB%93%E6%9E%84.png" alt></p><h5 id="2-、数据库表结构及内容"><a class="header-anchor" href="#2-、数据库表结构及内容">¶</a>(2)、数据库表结构及内容</h5><p><img src="/2022/102816107/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84.png" alt></p><h5 id="3-、springboot相关代码"><a class="header-anchor" href="#3-、springboot相关代码">¶</a>(3)、springboot相关代码</h5><p>User实体类代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>UserController代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">IUserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUsersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>UserService代码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUsersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>UserServiceImpl</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getUsersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name"><span class="token namespace">userMapper<span class="token punctuation">.</span></span>UsersList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="4-、启动项目，在http-localhost-9090-user-list"><a class="header-anchor" href="#4-、启动项目，在http-localhost-9090-user-list">¶</a>(4)、启动项目，在http://localhost:9090/user/list</h5><p>在浏览器中即可看到如下内容：<br><img src="/2022/102816107/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C.png" alt></p><h5 id="5-、前端使用fetch完成数据的转化"><a class="header-anchor" href="#5-、前端使用fetch完成数据的转化">¶</a>(5)、前端使用fetch完成数据的转化</h5><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:9090/user/list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> res<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>前端效果如图:<br><img src="/2022/102816107/%E5%89%8D%E7%AB%AF%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt></p><h5 id="6-、使用mybatis：-https-mybatis-net-cn"><a class="header-anchor" href="#6-、使用mybatis：-https-mybatis-net-cn">¶</a>(6)、使用mybatis： <a href="https://mybatis.net.cn/">https://mybatis.net.cn/</a></h5><p>在resources目录下创建一个mapper的目录，创建User.xml，编写SQL语句</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bin.library_back.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UsersList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bin.library_back.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>其次在配置文件当中编写mybatis的配置</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 定义mapper的路径</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span></code></pre><p>完成上述相同的测试效果</p><h5 id="7-、统一返回结果Result-java"><a class="header-anchor" href="#7-、统一返回结果Result-java">¶</a>(7)、统一返回结果Result.java</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SUCCESS_CODE</span> <span class="token operator">=</span> <span class="token string">"200"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ERROR_CODE</span> <span class="token operator">=</span> <span class="token string">"-1"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token comment">// 返回成功或者失败的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token constant">SUCCESS_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token constant">SUCCESS_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token constant">ERROR_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="8-、解决跨域问题（最简单：在Controller的方法上加上-CrossOrigin的注解）"><a class="header-anchor" href="#8-、解决跨域问题（最简单：在Controller的方法上加上-CrossOrigin的注解）">¶</a>(8)、解决跨域问题（最简单：在Controller的方法上加上@CrossOrigin的注解）</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CrossOrigin</span></code></pre><h3 id="四、完成前后端对接"><a class="header-anchor" href="#四、完成前后端对接">¶</a>四、完成前后端对接</h3><p>前端项目当中编写一个utils方法：request.js</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"@/router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Cookies <span class="token keyword">from</span> <span class="token string">'js-cookie'</span><span class="token keyword">const</span> request <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">'http://localhost:9090'</span><span class="token punctuation">,</span>    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// request 拦截器</span><span class="token comment">// 可以自请求发送前对请求做一些处理</span><span class="token comment">// 比如统一加token，对请求参数统一加密</span>request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/json;charset=utf-8'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> adminJson <span class="token operator">=</span> Cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>adminJson<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 设置请求头</span>        config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>adminJson<span class="token punctuation">)</span><span class="token punctuation">.</span>token    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> config<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// response 拦截器</span><span class="token comment">// 可以在接口响应后统一处理结果</span>request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token comment">// 兼容服务端返回的字符串数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res <span class="token operator">=</span> res <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">:</span> res        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'401'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err'</span> <span class="token operator">+</span> error<span class="token punctuation">)</span> <span class="token comment">// for debug</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> request</code></pre><p>在vue代码当中完成请求后端的接口</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">"../utils/request"</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/page"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>params    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'200'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>list<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>total <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>total<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前后端分离web系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot+vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图书管理系统1-创建Vue前端项目</title>
      <link href="/2022/102716107.html"/>
      <url>/2022/102716107.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2><h3 id="一、创建Vue项目及安装依赖项"><a class="header-anchor" href="#一、创建Vue项目及安装依赖项">¶</a>一、创建Vue项目及安装依赖项</h3><p>(1)、使用下列命令安装/更新Vue-cli</p><pre class="language-base" data-language="base"><code class="language-base">npm install -g @vue&#x2F;cli# ORyarn global add @vue&#x2F;cli</code></pre><p><a href="https://cli.vuejs.org/zh/guide/installation.html">vue-vli学习网站</a></p><p>(2)、使用下列命令安装Vue框架内容</p><pre class="language-base" data-language="base"><code class="language-base">vue create [项目名]</code></pre><p>(3)、使用命令访问创建的项目内容</p><pre class="language-base" data-language="base"><code class="language-base">vue run dev&#x2F;serve</code></pre><p>(4)、前端项目当中使用Element-ui<br>官网：<a href="https://element.eleme.cn/#/zh-CN/guide/design">https://element.eleme.cn/#/zh-CN/guide/design</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i element-ui <span class="token parameter variable">-S</span></code></pre><p>在vue前端项目当中使用</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="二、几个小技巧"><a class="header-anchor" href="#二、几个小技巧">¶</a>二、几个小技巧</h3><p>(1)、通常情况下，原始的界面都会出现页面一小部分留白，我们可以编辑全局样式进行控制<br>a、在assets目录下创建global.css<br>b、在main.js当中进行引入：import “@/assets/global.css”</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">*</span> <span class="token punctuation">&#123;</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span> //消除掉盒子模型的内边距，通常是有一个像素的大小<span class="token punctuation">&#125;</span></code></pre><p>(2)、在IDEA编译器当中Add Configurations当中选择npm，找到执行的package.json文件，使用npm run serve命令</p><p><img src="/2022/102716107/IDEA%E4%BD%BF%E7%94%A8npm%E8%BF%90%E8%A1%8C%E7%AA%97%E5%8F%A3.png" alt></p><p>(3)、更新相关的系统icon<br>         阿里巴巴icon图标库： <a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p><p>(4)、系统的框架的搭建<br>通常情况下，系统的页面都是分为[头部栏][左侧导航栏][中间主体部分]三个部分，我们就这三部分进行系统页面的划分<br>在创建好的vue前端项目当中，在app.vue文件当中完成三个部分的划分</p><p>a)、头部区域</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--头部区域--></span><span class="token comment">&lt;!--    其中将整个头部区域设置height: 60px; line-height: 60px; 是确定内部的元素都是居中对齐的                        margin-bottom: 2px; 是头部与下列两部分之间存在一个2px的间隙    图片只设置宽度/高度中的一个  而不设置两个是为了不让logo失真    position: relative; 是让图片从其中脱离出来，自由定位--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span> <span class="token property">line-height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span> <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 2px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@/assets/logo.png<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 9px<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 10px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span> <span class="token property">margin-left</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>图书管理系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>b)、主体区域</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--侧边栏和主体内容--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> flex</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--侧边栏导航位置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span> <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100vh - 62px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> <span class="token property">margin-right</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> white</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu</span> <span class="token attr-name">:default-active</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$route.path<span class="token punctuation">"</span></span> <span class="token attr-name">router</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-menu-demo<span class="token punctuation">"</span></span>  <span class="token attr-name">@select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSelect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-s-home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-question<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>关于<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>关于页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2-4-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2-4-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2-4-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--主体数据区域--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> white</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    style="display: flex":                  确保下面的两个div是并排出现的 使用flex布局    min-height: calc(100vh - 62px):         将下面的主题区域撑满，并且要减去头部的大小(60 + 2)    index="/":                              在导航栏当中，index表示的就是跳转的路径，可以对应到router.js当中的path    &lt;router-view/>:                         切换过程当中页面切换的部分，一个代替的部分，只需要放到主题数据区域即可--></span></code></pre><p>(5)、将elementUI中的各类组件的大小进行配置</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token string">'mini'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 配置elementui的样式大小 medium small mini</span></code></pre></font>]]></content>
      
      
      <categories>
          
          <category> 前后端分离web系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot+vue </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 搭建个人博客</title>
      <link href="/2022/102516107.html"/>
      <url>/2022/102516107.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="如你所见，您现在正在浏览的就是我使用Hexo框架搭建的个人博客"><a class="header-anchor" href="#如你所见，您现在正在浏览的就是我使用Hexo框架搭建的个人博客">¶</a>如你所见，您现在正在浏览的就是我使用Hexo框架搭建的个人博客</h2><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><blockquote><p>在安装之前，你的电脑上应该已经安装了以下内容：</p><ul><li>Git: 也可使用本机cmd命令窗口完成</li><li>node.js: Hexo框架运行的</li></ul></blockquote><h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2><h3 id="1、安装Git"><a class="header-anchor" href="#1、安装Git">¶</a>1、安装Git</h3><p>你不会跟我说你没装Git吧~~~</p><p>More info: <a href="https://blog.csdn.net/mukes/article/details/115693833?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166687136816782412530437%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166687136816782412530437&amp;biz_id=0&amp;spm=1018.2226.3001.4187">安装教程</a></p><h3 id="2、安装Node-js"><a class="header-anchor" href="#2、安装Node-js">¶</a>2、安装Node.js</h3><p>你不会跟我说你没装Node吧~~~</p><p>More info: <a href="https://blog.csdn.net/weixin_44893902/article/details/121788104?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166686140416782395362937%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166686140416782395362937&amp;biz_id=0&amp;spm=1018.2226.3001.4187">安装教程</a></p><h3 id="3、本地安装Hexo"><a class="header-anchor" href="#3、本地安装Hexo">¶</a>3、本地安装Hexo</h3><p>在安装完成Git和NodeJS之后，接下来就是本地下载Hexo，首先在本地创建一个Blog(名字任取)的文件夹，打开这个文件夹，鼠标右键使用git bash。</p><p>(1)使用命令安装Hexo</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli</code></pre><p>(2)使用命令查看Hexo的版本信息</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo <span class="token parameter variable">-v</span></code></pre><p>(3)安装完毕之后进行初始化，完成对自己博客项目的创建</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo init</code></pre><p>在安装完成的目录下，会存在以下目录：</p><blockquote><ul><li>node_modules: 依赖包</li><li>public: 存放生成的页面</li><li>scaffolds: 生成文章的一些模板</li><li>source: 用来你的文章</li><li>themes: 下载保存自己的主题，本主题<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a></li><li>_config.yml: 重点配置文件</li></ul></blockquote><p>(4)使用命令生成创建的页面</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo g</code></pre><p>(5)本地运行你的博客项目</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo s</code></pre><p>运行成功后，你会看到如下提示</p><pre class="language-bash" data-language="bash"><code class="language-bash">Hexo is running at http://localhost:4000/ <span class="token builtin class-name">.</span> Press Ctrl+C to stop. </code></pre><p>然后访问日志中的地址：localhost:4000</p><p>恭喜你，你的第一个博客系统搭建成功！</p><h3 id="4、GitHub创建个人仓库"><a class="header-anchor" href="#4、GitHub创建个人仓库">¶</a>4、GitHub创建个人仓库</h3><p>首先在Github上注册自己的账号，注册完成之后，完善各项账号的信息。<br>然后New Repository 命令为你为：[Github名].github.io<br>例如：我的github名称为Binbin0613, 我的博客仓库名为：<a href="http://Binbin0613.github.io">Binbin0613.github.io</a> (可以参考<a href="https://github.com/Binbin0613/Binbin0613.github.io">我的仓库</a>)</p><h3 id="5、将本地的Hexo部署上GitHub上"><a class="header-anchor" href="#5、将本地的Hexo部署上GitHub上">¶</a>5、将本地的Hexo部署上GitHub上</h3><p>在你完成Hexo初始化的地方(同第三步的位置)，输入命令，完成代码的上传</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo d</code></pre><p>执行到这一步之后，浏览器输入: [Github名].github.io 即可看到你的博客网站了</p><h3 id="6、发布文章"><a class="header-anchor" href="#6、发布文章">¶</a>6、发布文章</h3><p>至此你的博客项目就搭建好了，那么想要发布文章就需要接下来的几步了！</p><p>(1)、在： [:\BlogName\source_posts] 目录下创建自己想要发布文章的文件(所有的文章发布都是以markDown格式发布的)<br>你可以看到的是已经有一个名为Hello World.md的文件</p><p>(2)、文章中需要插入图片的话，首先找到_config.yml文件。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 原来是false，将其设置为true</span></code></pre><p>与此同时，在[:\BlogName\source_posts] 目录下创建与文章同名的文件夹，然后将图片放入，若要在文章中引入，则直接使用相对路径的方式进行访问[./文章名/XXX.png]，即可完成图片访问。</p><p>(3)、完成文章的编写后，使用下列命名进行缓存的清楚</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo clean</code></pre><p>(4)、使用下列命令完成博客的重新生成</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo g <span class="token comment"># generate</span></code></pre><p>(5)、使用下列命令完成对博客项目的本地查看</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo s <span class="token comment"># server</span></code></pre><p>(6)、使用下列命令完成对博客项目的上传(至Github仓库)</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo d <span class="token comment"># deploy</span></code></pre><h3 id="更多信息请关注"><a class="header-anchor" href="#更多信息请关注">¶</a>更多信息请关注</h3><p>(1)、<a href="https://blog.csdn.net/wangqingchuan92/article/details/112277112?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;spm=1018.2226.3001.4187">解决博客的enjoy问题</a>          <a href="https://apps.timwhitlock.info/emoji/tables/unicode#">enjoy表情包合集</a></p><p>(2)、<a href>Hexo更多的配置相关问题(开个玩笑)</a></p><p>(3)、<a href="https://www.bilibili.com/video/BV1q4411i7gL/?spm_id_from=333.788.recommend_more_video.8&amp;vd_source=0f50d0008f8b836aa3258f634d65d48e">更全的安装视频</a></p><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p></font>]]></content>
      
      
      <categories>
          
          <category> 博客介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binbin0613 </tag>
            
            <tag> 关于博客 </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binbin0613</title>
      <link href="/2022/102416107.html"/>
      <url>/2022/102416107.html</url>
      
        <content type="html"><![CDATA[<font face="Times New Roman, 楷体"><h2 id="欢迎大家访问我的博客Binbin0613"><a class="header-anchor" href="#欢迎大家访问我的博客Binbin0613">¶</a><strong>欢迎大家访问我的博客<a href="Binbin0613.github.io">Binbin0613</a></strong></h2><h3 id="做一个自我介绍"><a class="header-anchor" href="#做一个自我介绍">¶</a>做一个自我介绍</h3><p>Bin，<a href="http://www.xhu.edu.cn/">XHU</a>软件工程本，<a href="https://sias.uestc.edu.cn/">UESTC</a>电子信息专硕，21岁大四在读身高170cm体重不说每天8点到23点待实验室周末无休还卡在毕设的码农一位！</p><blockquote><ul><li>爱好： 踢足球(大学基本没碰过 😅)</li><li>学习方向： <a href="https://github.com/Binbin0613">REID</a>     <a href="https://github.com/Binbin0613">Search</a>    <a href="https://github.com/Binbin0613">JAVA</a>    <a href="https://github.com/Binbin0613">Vue</a>    <a href="https://github.com/Binbin0613">React</a></li></ul></blockquote><p><img src="/2022/102416107/avatar.jpg" alt></p><h5 id="忘记说了：-2022年阿根廷必夺冠！！！"><a class="header-anchor" href="#忘记说了：-2022年阿根廷必夺冠！！！">¶</a>忘记说了： 2022年阿根廷必夺冠！！！</h5><h4 id="More-Info"><a class="header-anchor" href="#More-Info">¶</a>More Info:</h4><p>QQ：3474251879<br>WeChat: Ilovedaisysomuch<br>Email: <a href="mailto:Binbin.0626@foxmail.com">Binbin.0626@foxmail.com</a><br>Github: <a href="https://github.com/Binbin0613">https://github.com/Binbin0613</a><br>Sina: 基本上不玩，偶尔看看</p></font>]]></content>
      
      
      <categories>
          
          <category> 博客介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binbin0613 </tag>
            
            <tag> 关于博客 </tag>
            
            <tag> 实用小工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/102316107.html"/>
      <url>/2022/102316107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2><h3 id="Create-a-new-post"><a class="header-anchor" href="#Create-a-new-post">¶</a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a class="header-anchor" href="#Run-server">¶</a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a class="header-anchor" href="#Generate-static-files">¶</a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a class="header-anchor" href="#Deploy-to-remote-sites">¶</a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="/2022/102316107/avatar.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 博客介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binbin0613 </tag>
            
            <tag> 关于博客 </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
